diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..4787fe2
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,15 @@
+# Misc files
+*~
+
+# Python files
+*.pyc
+__pycache__
+
+# Virtuoso files
+*.cdslck
+*.cdslck.*
+
+# Pycharm related files
+.idea/workspace.xml
+.idea/usage.statistics.xml
+.idea/tasks.xml
diff --git a/OA/aib_ams/.oalib b/OA/aib_ams/.oalib
new file mode 100644
index 0000000..21ffef8
--- /dev/null
+++ b/OA/aib_ams/.oalib
@@ -0,0 +1,6 @@
+<?xml version="1.0"?>
+
+<Library DMSystem="oaDMFileSys">
+    <oaDMFileSys libReadOnly="No"
+                 origFileSystem="Unix"/>
+</Library>
diff --git a/README.md b/README.md
index f569b86..1ab965b 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,8 @@
 # aib_ams
-AIB open source generators.
+
+Analog Mixed-Signal generators for AIB.
+
+This repository contains updates and bugfixes to generators originally released at
+https://github.com/chipsalliance/aib-phy-generator.git, commit number
+d4bd4c0b7aca238d77f66e9f408f86c975e72af6.  The original code can be found in
+the `aib_ams` folder.
diff --git a/src/aib_ams/__init__.py b/src/aib_ams/__init__.py
new file mode 100644
index 0000000..5573caf
--- /dev/null
+++ b/src/aib_ams/__init__.py
@@ -0,0 +1,14 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
diff --git a/src/aib_ams/design/__init__.py b/src/aib_ams/design/__init__.py
new file mode 100644
index 0000000..5573caf
--- /dev/null
+++ b/src/aib_ams/design/__init__.py
@@ -0,0 +1,14 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
diff --git a/src/aib_ams/design/dcc_helper.py b/src/aib_ams/design/dcc_helper.py
new file mode 100644
index 0000000..499f7d0
--- /dev/null
+++ b/src/aib_ams/design/dcc_helper.py
@@ -0,0 +1,318 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Mapping, Dict, Any, Tuple, Optional, Type
+
+import numpy as np
+
+from bag.layout.template import TemplateBase
+from bag.env import get_tech_global_info
+from bag.concurrent.util import GatherHelper
+
+from bag.simulation.design import DesignerBase
+
+from bag3_digital.layout.stdcells.util import STDCellWrapper
+
+from ..layout.dcc_helper import DCCHelper
+from ..measurement.dcc_helper.liberty import ClockDelayMM
+
+
+class DCCHelperDesigner(DesignerBase):
+    """
+    This design script uses ClockDelayMM for sign-off.
+    """
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        DesignerBase.__init__(self, *args, **kwargs)
+
+        self.debug = True
+
+        # local params
+        self._thres_lo = 0.1
+        self._thres_hi = 0.9
+
+    @classmethod
+    def get_dut_lay_class(cls) -> Optional[Type[TemplateBase]]:
+        return DCCHelper
+    
+    @classmethod
+    def _default_core_params(cls):
+        return cls._get_scaled_core_params(1)
+
+    @classmethod
+    def _default_sync_params(cls):
+        return cls._get_scaled_sync_params(1)
+
+    @classmethod
+    def _default_buf_params(cls):
+        return cls._get_scaled_buf_params(1)
+    
+    async def async_design(self, nsync: int, cload: float, fmax: float, fmin: float, dcd_max: float,
+                           rel_del_max: float, pinfo: Mapping[str, any], 
+                           core_params: Optional[Dict[str, Any]] = None,
+                           sync_params: Optional[Dict[str, Any]] = None, 
+                           buf_params: Optional[Dict[str, Any]] = None,
+                           **kwargs: Mapping[str, Any]) -> Mapping[str, Any]:
+        """
+        This design method is basically a logical-effort sizing and a sign-off in the end.
+        If there are sizes passed in through optional parameters they will be used and this
+        function will only execute the sign-off part.
+
+        Parameters
+        ----------
+        nsync: int 
+            Number of synchronizer flops.
+        cload: float
+            Loading cap.
+        fmax: float
+            Max. frequency for sign-off.
+        fmin: float
+            Min. frequency for sign-off.
+        dcd_max: float
+            Max. duty cycle distortion allowed.
+        rel_del_max: float
+            Max. relative delay requirement between launch and measure edges at output.
+        pinfo: Mapping[str, any]:
+            pinfo for layout.
+        core_params: Dict[str, Any]
+            Optional. If provided core design part will be skipped.
+        sync_params: Dict[str, Any]
+            Optional. If provided synchronizer design part will be skipped.
+        buf_params: Dict[str, Any]
+            Optional. If provided buffer design part will be skipped.
+
+        Returns
+        -------
+        summary: Mapping[str, Any]
+            Design summary.
+        """
+        tech_globals = get_tech_global_info('aib_ams')
+
+        core_params = self._default_core_params() if core_params is None else core_params
+        sync_params = self._default_sync_params() if sync_params is None else sync_params
+        buf_params = self._default_buf_params() if buf_params is None else buf_params
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+
+
+        if 'width' not in pinfo['row_specs'][0] and 'width' not in pinfo['row_specs'][1]:
+            pinfo['row_specs'][0]['width'] = 2 * tech_globals['w_minn']
+            pwidth = int(np.round(tech_globals['inv_beta'] * 2 * tech_globals['w_minn']))
+            pinfo['row_specs'][1]['width'] = pwidth
+
+        gen_params = dict(
+            cls_name=self.get_dut_lay_class().get_qualified_name(),
+            draw_taps=True,
+            params=dict(
+                pinfo=pinfo,
+                core_params=core_params,
+                sync_params=sync_params,
+                buf_params=buf_params,
+                nsync=nsync,
+            ),
+        )
+
+        dut = await self.async_new_dut("dcc_helper", STDCellWrapper, gen_params)
+
+        helper = GatherHelper()
+        for env_str in tech_globals['signoff_envs']['all_corners']['envs']:
+            for freq in [fmin, fmax]:
+                helper.append(self._sim_and_check_specs(dut, 
+                                                        env_str, 
+                                                        freq, 
+                                                        cload, 
+                                                        dcd_max, 
+                                                        fmax, 
+                                                        rel_del_max))
+
+        results = await helper.gather_err()
+
+        dcd_dict = {}
+        del_rel_dict = {}
+        idx = 0
+        for env_str in tech_globals['signoff_envs']['all_corners']['envs']:
+            for freq in ['fmin', 'fmax']:
+                if freq == 'fmax':
+                    dcd_dict[env_str] = results[idx][1]
+                    del_rel_dict[env_str] = results[idx][2]
+                idx += 1
+
+        dcd_min = min(dcd_dict.values())
+        dcd_max = max(dcd_dict.values())
+        del_rel_min = min(del_rel_dict.values())
+        del_rel_max = max(del_rel_dict.values())
+        self.log(f'|DCD| ranges from {dcd_min*100:.4f}% to {dcd_max*100:.4f}%.')
+        self.log(f'Relative delay ranges from {del_rel_min*100:.4f}% to {del_rel_max*100:.4f}%')
+
+        if gen_specs is not None and gen_cell_args is not None:
+            gen_cell_specs = dict(
+                lay_class=STDCellWrapper.get_qualified_name(),
+                cls_name=DCCHelper.get_qualified_name(),
+                params=gen_params,
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return gen_params
+
+    async def _sim_and_check_specs(self, dut, env_str, freq, cload, dcd_max, fmax, rel_del_max):
+        meas_params = self._build_meas_params(env_str, fmax, cload)
+        mm = self.make_mm(ClockDelayMM, meas_params)
+        sim_id = f'dcc_helper_signoff_{env_str}' + ('_fmax' if freq == fmax else '_fmin')
+        sim_result = await self.async_simulate_mm_obj(sim_id, dut, mm)
+        specs_met, dcd, rel_del = self._check_delay(sim_result, freq, dcd_max, rel_del_max)
+
+        if not specs_met:
+            raise ValueError(f'DCC_helper failed signoff @ {env_str}: '
+                             f'dcd is  {dcd * 100:.2f} ({dcd_max * 100:.2f}) %,'
+                             f' rel delay is {rel_del * 100:.2f} ({rel_del_max * 100:.2f}) %.')
+
+        return specs_met, dcd, rel_del
+
+    @classmethod
+    def _build_meas_params(cls, sim_env: str, freq: float, cload: float) -> Dict[str, Any]:
+        """
+        Creates parameter dictionary for ClockDelayMM measurement manager class. ClockDelayMM 
+        uses DigitalTranTB related test-bench manager parameters.
+        
+        Parameters
+        ----------
+        sim_env: str
+            Corner-temperature environment.
+        freq: float
+            Frequency of clk in simulation.
+        cload: float
+            Loading cap.
+            
+        Returns
+        -------
+        meas_params: Dict[str, Any]
+            Measurement dictionary params.
+        """
+        trf_nom = get_tech_global_info('aib_ams')['trf_nom']
+        sim_env_info = get_tech_global_info('aib_ams')['signoff_envs']['all_corners']
+        meas_params = dict(
+            tbm_specs=dict(
+                sim_envs=[sim_env],
+                sim_params=dict(    # simulation parameters
+                    t_rst=1.1 / freq,
+                    t_rst_rf=trf_nom,
+                    t_bit=1 / freq,
+                ),
+                thres_lo=0.1,
+                thres_hi=0.9,
+                rtol=1.0e-8,
+                atol=1.0e-22,
+                tran_options=dict(  
+                    maxstep=1.0e-12,
+                    errpreset='conservative',
+                ),
+                swp_info=[  # list of parameters to sweep
+                    ['t_rf', {'type': 'LIST', 'values': [trf_nom]}],
+                    ['c_load', {'type': 'LIST', 'values': [cload]}]
+                ],
+                pwr_domain=dict(    # pin's low/high pwr domains (defined later)
+                    clk_dcd=('VSS', 'VDD'),
+                    dcc_byp=('VSS', 'VDD'),
+                    launch=('VSS', 'VDD'),
+                    measure=('VSS', 'VDD'),
+                    rstb=('VSS', 'VDD'),
+                    ckout=('VSS', 'VDD')
+                ),
+                sup_values=dict(    # pwr domain definition with proper values
+                    VDD=sim_env_info['vdd'][sim_env],
+                    VSS=0.0,
+                ),
+                pin_values=dict(    # low(0) or high(1) value for pins with constant voltage
+                    clk_dcd=0,
+                    dcc_byp=0,
+                    launch=0,
+                    measure=0,
+                ),
+                reset_list=[['rstb', False]],   # reset rstb (active low)
+            ),
+            fake=False,    # make this true to get fake data (i.e. for debugging)
+        )
+
+        return meas_params
+
+    def _check_delay(self, sim_result, freq: float, dcd_max: float,
+                     rel_del_max: float) -> Tuple[bool, float, float]:
+        met_specs = True
+        t_launch = t_meas = -1
+        for entry in sim_result.data['ckout']:
+            if entry['related'] == 'launch':
+                t_launch = entry['data']['cell_rise']
+            elif entry['related'] == 'measure':
+                t_meas = entry['data']['cell_fall']
+
+        del_max = np.max(np.max([t_launch, t_meas]))
+        rel_del = del_max * freq
+        if rel_del > rel_del_max:
+            self.log(f'Launch delay is {t_launch}, '
+                     f'Meas delay is {t_meas}, '
+                     f'max is {rel_del_max / freq}')
+            met_specs = False
+        dcd = np.subtract(t_launch, t_meas) * freq
+        if np.max(np.abs(dcd)) > dcd_max:
+            self.log(f'Duty cycle distortion is {dcd}, max absolute value is {dcd_max}.')
+            met_specs = False
+
+        return met_specs, np.max(np.abs(dcd)), rel_del
+
+    @staticmethod
+    def _get_scaled_core_params(scale):
+        """ Logical effort (4) - based scaling, using some selected minimum sizes"""
+        mux_params = dict(
+            seg_dict={'tri': 4 * scale, 'buf': 4 * scale}
+        )
+        flop_params = dict(
+            sa_params=dict(
+                has_bridge=True,
+                seg_dict={'in': 4 * scale, 'fb': 4 * scale,
+                          'tail': 4 * scale, 'sw': 1 * scale},
+            ),
+            sr_params=dict(
+                has_outbuf=True,
+                seg_dict={'fb': 2 * scale, 'ps': 4 * scale, 'nr': 4 * scale,
+                          'ibuf': 4 * scale, 'obuf': 4 * scale, 'rst': 4 * scale},
+            )
+        )
+        inv_params = dict(seg=4 * scale)
+
+        return dict(mux_params=mux_params, flop_params=flop_params, inv_params=inv_params)
+
+    @staticmethod
+    def _get_scaled_sync_params(scale):
+        """Logical effort (4) - based scaling, using some selected minimum sizes"""
+        flop_params = dict(
+            sa_params=dict(
+                has_bridge=True,
+                seg_dict={'in': 2*scale, 'fb': 4*scale,
+                          'tail': 4*scale, 'sw': scale}
+            ),
+            sr_params=dict(
+                has_outbuf=True,
+                seg_dict={'fb': 2*scale, 'ps': 2*scale,
+                          'nr': 2*scale,
+                          'ibuf': 2*scale, 'obuf': 2*scale,
+                          'rst': 4*scale}
+            )
+        )
+
+        return flop_params
+
+    @staticmethod
+    def _get_scaled_buf_params(scale):
+        return dict(seg_list=[1*scale, 2*scale])
diff --git a/src/aib_ams/design/delay_line.py b/src/aib_ams/design/delay_line.py
new file mode 100644
index 0000000..b478229
--- /dev/null
+++ b/src/aib_ams/design/delay_line.py
@@ -0,0 +1,605 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""
+Design Script for the NAND-based delay line. The design procedure was ported from
+design/delay_line.py to support new testbench/measurement manager API and also DesignerBase.
+The delay requirement should be relaxed on cds_ff_mpt to around 60ps so that the loops converge
+quickly.
+"""
+
+from typing import Mapping, Dict, Any, Tuple, Optional, cast, Type
+
+import numpy as np
+from copy import deepcopy
+
+from bag.layout.template import TemplateBase
+from bag.simulation.design import DesignerBase
+from bag.concurrent.util import GatherHelper
+
+from bag3_testbenches.measurement.tran.digital import DigitalTranTB
+from bag3_testbenches.measurement.data.tran import EdgeType
+from bag3_digital.layout.stdcells.util import STDCellWrapper
+from bag.layout.util import IPMarginTemplate
+from xbase.layout.mos.top import GenericWrapper
+from aib_ams.layout.delay_line import DelayLine
+
+from bag.env import get_tech_global_info
+
+
+class DelayLineDesigner(DesignerBase):
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        DesignerBase.__init__(self, *args, **kwargs)
+        self.dsn_tech_info = get_tech_global_info('aib_ams')
+
+    @classmethod
+    def get_dut_lay_class(cls) -> Optional[Type[TemplateBase]]:
+        return DelayLine
+
+    async def async_design(self,
+                           tmin: float,
+                           tmax: float,
+                           cload: float,
+                           ncodes: int,
+                           std_delay: float,
+                           pinfo: Mapping[str, Any],
+                           sim_params: Mapping[str, Any],
+                           max_nand_seg: int,
+                           max_stack: int,
+                           nrows: int,
+                           ncols: int,
+                           mc_dsn_env: str,
+                           mc_params: Mapping[str, Any],
+                           **kwargs: Any) -> Mapping[str, Any]:
+        """ Designs the delay cell.
+        1) if td_step > tmax up-size outer nands.
+        2) if td_step < tmin use higher vth or stack transistors to increase the resistance.
+        3) if 2 did not work try up-sizing the inner nands.
+        4) check condition 1, if it holds move to 5, otherwise repeat by re-sizing outer nands
+        with the new inner nands
+        5) if std(td_step) > std_targ, upsize all devices by (std(td_stp) / std_targ) ** 2.
+        Parameters
+        ----------
+        tmin: float
+            td_step should be greater than this spec.
+        tmax: float
+            td_step should be less than this spec.
+        cload: float
+            Loading capacitor.
+        ncodes: int
+            Total number of codes (the number of actual delay cells used).
+        std_delay: float
+            The standard deviation of td_step should be less than this spec across PVT.
+        pinfo: Mapping[str, Any]
+            Pinfo object.
+        sim_params: Mapping[str, Any]
+            Simulation parameter Dictionary. It should contain the following parameters:
+            sim_envs: List[str]
+                Corner/temp used for minimal simulations
+            tper: float
+                Time period of input signal
+            ncycles: int
+                The number cycles used for measurement of delay
+            trf: float
+                Rise/Fall time
+            tclk: float
+                The clk time period for latches to load to register the code
+            clk_trf: float
+                Clk signal rise/fall time
+            thres_lo: float
+                Low threshold used for delay measurements
+            thres_hi: float
+                High threshold used for delay measurements
+        max_nand_seg: int
+            Maximum number of segments to be used in nand gates.
+        max_stack: int
+            Maximum number of stacks to be used.
+        nrows: int
+            Number of rows for the matrix of delay cells in layout. The total number of cells
+            computed by nrows x ncols should be more than the number of codes. The remaining
+            un-used cells will be dummies.
+        ncols: int
+            Number of columns for the matrix of delay cells in layout.
+        mc_dsn_env: str
+            The monte-carlo environment name. Should be consistent with global tech vars.
+        mc_params: Mapping[str, Any]
+            Dictionary for monte-carlo parameters, it must include:
+                numruns: int, seed: int, donominal: str, variations: str.
+                numruns: 30, seed: 1, donominal: 'yes', variations: 'all' is recommended.
+        kwargs: Any
+            num_core: int = 1
+                The number of cores in each delay cell. If one wants to use more stages per cell.
+        Returns
+        -------
+        summary: Mapping[str, Any]
+            Design summary.
+        """
+        tech_info = self.dsn_tech_info
+        curr_nand_outer_seg = curr_nand_inner_seg = tech_info['seg_min']
+        curr_stack = 1
+        num_core = kwargs.get('num_core', 1)
+
+        plot_result: bool = kwargs.get('plot_result', False)
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+
+        cur_tmax, cur_tmin = float('inf'), -float('inf')
+        while cur_tmax > tmax or cur_tmin < tmin:
+            # Accomplish max delay by sweeping outer_nand_nseg from current to max possible
+            self.log('First deal with max delay')
+            if cur_tmax > tmax:
+                for curr_nand_outer_seg in range(curr_nand_outer_seg, max_nand_seg + 1):
+                    cur_tmax, cur_tmin = await self._design_chain_step(curr_nand_outer_seg,
+                                                                       curr_nand_inner_seg,
+                                                                       curr_stack,
+                                                                       ncodes,
+                                                                       cload,
+                                                                       num_core,
+                                                                       nrows,
+                                                                       ncols,
+                                                                       pinfo,
+                                                                       sim_params)
+                    self.log(f'cur_tmax = {cur_tmax}, wanted_tmax < {tmax}')
+                    # await self.plot_results(curr_nand_outer_seg, curr_nand_inner_seg, curr_stack, ncodes, cload, num_core,
+                    #     nrows, ncols, pinfo, sim_params)
+                    if cur_tmax < tmax:
+                        self.log(f'nand_out_seg = {curr_nand_outer_seg} worked')
+                        break
+                else:
+                    raise ValueError("Unable to design cells to meet max delay spec")
+            # Accomplish min delay by sweeping stack from current to max possible. In case of
+            # failure to find a working size try up-sizing the inner_nand_nseg from current to max.
+            # Since we are up-sizing the loading of outer nands, the tmax may get violated in which
+            # case we have to upsize the outer nand and repeat the steps.
+            self.log('Now deal with min delay')
+            if cur_tmin < tmin:
+                for curr_stack in range(curr_stack + 1, max_stack + 1):
+                    cur_tmax, cur_tmin = await self._design_chain_step(curr_nand_outer_seg,
+                                                                       curr_nand_inner_seg,
+                                                                       curr_stack,
+                                                                       ncodes,
+                                                                       cload,
+                                                                       num_core,
+                                                                       nrows,
+                                                                       ncols,
+                                                                       pinfo,
+                                                                       sim_params)
+                    self.log(f'cur_tmin = {cur_tmin}, wanted_tmin > {tmin}')
+                    # await self.plot_results(curr_nand_outer_seg, curr_nand_inner_seg, curr_stack, ncodes, cload,
+                    #                         num_core,
+                    #                         nrows, ncols, pinfo, sim_params)
+                    if cur_tmin > tmin:
+                        self.log('done with tmin using stack')
+                        break
+                else:
+                    self.log('min delay not met with stacking; try increasing SR NAND number '
+                             'of fingers')
+                    # min delay not met with stacking; try increasing SR NAND number of fingers
+                    for curr_nand_inner_seg in range(curr_nand_inner_seg + 1, max_nand_seg + 1):
+                        cur_tmax, cur_tmin = await self._design_chain_step(curr_nand_outer_seg,
+                                                                           curr_nand_inner_seg,
+                                                                           curr_stack,
+                                                                           ncodes,
+                                                                           cload,
+                                                                           num_core,
+                                                                           nrows,
+                                                                           ncols,
+                                                                           pinfo,
+                                                                           sim_params)
+                        self.log(f'cur_tmin = {cur_tmin}, wanted_tmin > {tmin}')
+                        # await self.plot_results(curr_nand_outer_seg, curr_nand_inner_seg, curr_stack, ncodes, cload,
+                        #                         num_core,
+                        #                         nrows, ncols, pinfo, sim_params)
+                        if cur_tmin > tmin:
+                            break
+                    else:
+                        raise ValueError("Unable to design cells to meet min delay spec")
+
+        # for monte-carlo up-size everything until variation gets small.
+        if mc_dsn_env:
+            curr_nand_outer_seg, curr_nand_inner_seg = await self._design_for_mc(
+                curr_nand_outer_seg, curr_nand_inner_seg, curr_stack, cload, std_delay, num_core,
+                pinfo, sim_params, mc_dsn_env, mc_params, ncodes=3)
+
+        if plot_result:
+            results = await self._measure_times(
+                curr_nand_outer_seg, curr_nand_inner_seg, curr_stack, ncodes, cload, num_core,
+                nrows, ncols, pinfo, sim_params
+            )
+            td_min = results['td_min']
+            td_max = results['td_max']
+            # results:
+            # return tdr_arr, tdf_arr, tdr_per_code, tdf_per_code
+            dsn_env_names = sim_params['sim_envs']
+            from matplotlib import pyplot as plt
+            plt.figure(1)
+            ax: Any = plt.subplot(2, 1, 1)
+            xvec = np.arange(0, ncodes / 2 - 1)
+            for idx, sim_env in enumerate(dsn_env_names):
+                tdr = results['tdr_arr'][idx, :-1]
+                tdr = tdr[..., ::2].flatten()
+                plt.step(xvec, tdr, where='mid', label=sim_env)
+            ax.legend()
+            ax.set_ylabel('Rise Delay (s)')
+            ax = plt.subplot(2, 1, 2)
+            for idx, sim_env in enumerate(dsn_env_names):
+                tdr_step = results['tdr_per_code'][idx, :].flatten()
+                ax.scatter(xvec, tdr_step, label=sim_env)
+            ax.set_ylim(ymin=td_min, ymax=td_max)
+            ax.legend()
+            ax.set_ylabel('Rise Delay Step (s)')
+            ax.set_xlabel('Code')
+            plt.show()
+
+        summary = dict(
+            nand_outer_seg=curr_nand_outer_seg,
+            nand_inner_seg=curr_nand_inner_seg,
+            stack=curr_stack,
+            num_insts=ncodes,
+        )
+        if gen_specs is not None and gen_cell_args is not None:
+            dut_params = self._get_dut_params(curr_nand_outer_seg, curr_nand_inner_seg, curr_stack, ncodes, num_core,
+                                              nrows, ncols, pinfo)
+            # dut_params['params']['draw_taps'] = 'LEFT'
+            gen_cell_specs = dict(
+                lay_class=STDCellWrapper.get_qualified_name(),
+                cls_name=DelayLine.get_qualified_name(),
+                params=dut_params,
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return summary
+
+    async def plot_results(self, curr_nand_outer_seg, curr_nand_inner_seg, curr_stack, ncodes, cload, num_core,
+                           nrows, ncols, pinfo, sim_params):
+        results = await self._measure_times(
+            curr_nand_outer_seg, curr_nand_inner_seg, curr_stack, ncodes, cload, num_core,
+            nrows, ncols, pinfo, sim_params
+        )
+        td_min = results['td_min']
+        td_max = results['td_max']
+        # results:
+        # return tdr_arr, tdf_arr, tdr_per_code, tdf_per_code
+        dsn_env_names = sim_params['sim_envs']
+        from matplotlib import pyplot as plt
+        plt.figure(1)
+        ax: Any = plt.subplot(2, 1, 1)
+        xvec = np.arange(0, ncodes / 2 - 1)
+        for idx, sim_env in enumerate(dsn_env_names):
+            tdr = results['tdr_arr'][idx, :-1]
+            tdr = tdr[..., ::2].flatten()
+            plt.step(xvec, tdr, where='mid', label=sim_env)
+        ax.legend()
+        ax.set_ylabel('Rise Delay (s)')
+        ax = plt.subplot(2, 1, 2)
+        for idx, sim_env in enumerate(dsn_env_names):
+            tdr_step = results['tdr_per_code'][idx, :].flatten()
+            ax.scatter(xvec, tdr_step, label=sim_env)
+        ax.set_ylim(ymin=td_min, ymax=td_max)
+        ax.legend()
+        ax.set_ylabel('Rise Delay Step (s)')
+        ax.set_xlabel('Code')
+        plt.show()
+
+    async def _measure_times(self,
+                             nand_outer_seg: int,
+                             nand_inner_seg: int,
+                             stack: int,
+                             ncodes: int,
+                             cload: float,
+                             num_core: int,
+                             nrows: int,
+                             ncols: int,
+                             pinfo: Mapping[str, Any],
+                             sim_params: Mapping[str, Any]):
+        dut_params = self._get_dut_params(nand_outer_seg, nand_inner_seg, stack, ncodes, num_core,
+                                          nrows, ncols, pinfo)
+        dut = await self.async_new_dut('dly_line_chain', STDCellWrapper, dut_params)
+
+
+
+        tper = sim_params['tper']
+        ncycles = sim_params['ncycles']
+        sim_id_pref = f'dly_no{nand_outer_seg}_ni{nand_inner_seg}_s{stack}'
+        helper = GatherHelper()
+        for code in range(0, ncodes - 1):
+            tbm_params = self._get_tbm_params(code, ncodes, cload, sim_params)
+            sim_id = f'{sim_id_pref}_c{code}'
+            helper.append(self._get_delay(sim_id, dut, tbm_params, t_start=tper * (ncycles - 1),
+                                          t_stop=tper * ncycles))
+        ret_list = await helper.gather_err()
+        tdr_list, tdf_list = [x[0] for x in ret_list], [x[1] for x in ret_list]
+
+        res_arr = dict()
+
+        tdr_arr = np.stack(tdr_list, axis=-1)
+        res_arr['tdr_arr'] = tdr_arr
+        tdf_arr = np.stack(tdf_list, axis=-1)
+        res_arr['tdf_arr'] = tdf_arr
+        tdr_per_code = np.diff(tdr_arr, axis=-1)[..., ::2]
+        res_arr['tdr_per_code'] = tdr_per_code
+        tdf_per_code = np.diff(tdf_arr, axis=-1)[..., ::2]
+        res_arr['tdf_per_code'] = tdf_per_code
+
+        tdr_max = np.max(tdr_per_code)
+        res_arr['tdr_max'] = tdr_max
+        tdf_max = np.max(tdf_per_code)
+        res_arr['tdf_max'] = tdf_max
+        tdr_min = np.min(tdr_per_code)
+        res_arr['tdr_min'] = tdr_min
+        tdf_min = np.min(tdf_per_code)
+        res_arr['tdf_min'] = tdf_min
+
+        res_arr['td_max'] = max(tdr_max, tdf_max)
+        res_arr['td_min'] = min(tdr_min, tdf_min)
+
+        return res_arr
+
+    async def _design_chain_step(self,
+                                 nand_outer_seg: int,
+                                 nand_inner_seg: int,
+                                 stack: int,
+                                 ncodes: int,
+                                 cload: float,
+                                 num_core: int,
+                                 nrows: int,
+                                 ncols: int,
+                                 pinfo: Mapping[str, Any],
+                                 sim_params: Mapping[str, Any]) -> Tuple[float, float]:
+        mid = ncodes // 2
+        dut_params = self._get_dut_params(nand_outer_seg, nand_inner_seg, stack, ncodes, num_core,
+                                          nrows, ncols, pinfo)
+        # dut = await self.async_new_dut('dly_line_chain', STDCellWrapper, dut_params)
+        dut = await self.async_new_dut('dly_line_chain', GenericWrapper, dut_params)
+
+        tper = sim_params['tper']
+        ncycles = sim_params['ncycles']
+        sim_id_pref = f'dly_no{nand_outer_seg}_ni{nand_inner_seg}_s{stack}'
+        helper = GatherHelper()
+        for code in [0, 1, mid, mid + 1, ncodes - 2, ncodes - 1]:
+            tbm_params = self._get_tbm_params(code, ncodes, cload, sim_params)
+            sim_id = f'{sim_id_pref}_c{code}'
+            helper.append(self._get_delay(sim_id, dut, tbm_params, t_start=tper * (ncycles - 1),
+                                          t_stop=tper * ncycles))
+        ret_list = await helper.gather_err()
+        tdr_list, tdf_list = [x[0] for x in ret_list], [x[1] for x in ret_list]
+
+        tdr_arr = np.stack(tdr_list, axis=-1)
+        tdf_arr = np.stack(tdf_list, axis=-1)
+        tdr_per_code = np.diff(tdr_arr, axis=-1)[..., ::2]
+        tdf_per_code = np.diff(tdf_arr, axis=-1)[..., ::2]
+
+        tdr_max = np.max(tdr_per_code)
+        tdf_max = np.max(tdf_per_code)
+        tdr_min = np.min(tdr_per_code)
+        tdf_min = np.min(tdf_per_code)
+
+        td_max = max(tdr_max, tdf_max)
+        td_min = min(tdr_min, tdf_min)
+
+        return td_max, td_min
+
+    async def _design_for_mc(self,
+                             outer_seg: int,
+                             inner_seg: int,
+                             stack: int,
+                             cload: float,
+                             std_dev_max: float,
+                             num_core: int,
+                             pinfo: Mapping[str, Any],
+                             sim_params: Mapping[str, Any],
+                             mc_dsn_env: str,
+                             mc_params: Mapping[str, Any],
+                             ncodes: int,
+                             max_iter: int = 5
+                             ) -> Tuple[int, int]:
+        # ncodes in this part can be a small value (i.e. 3)
+        global_info = self.dsn_tech_info
+        indx = 0
+        cur_std_max = float('inf')
+        n_factor = 1
+        tstart = sim_params['tper'] * (sim_params['ncycles'] - 1)
+        tstop = sim_params['tper'] * sim_params['ncycles']
+        # finish if maximum number of iteration reached
+        while cur_std_max > std_dev_max:
+            if indx > max_iter:
+                raise ValueError(f'Reached the maximum niter {max_iter}, but have not reached '
+                                 f'std spec')
+            _factor = int(np.ceil(outer_seg * n_factor)) / outer_seg
+            outer_seg = int(np.ceil(outer_seg * _factor))
+            inner_seg = int(np.ceil(inner_seg * _factor))
+            cload *= _factor
+            self.log(f'Computed fudge factor: {n_factor}, actual factor: {_factor}')
+            self.log(f'New outer NAND Seg: {outer_seg}')
+            self.log(f'New inner NAND Seg: {inner_seg}')
+            self.log(f'New cload: {cload}')
+
+            # put all cells in a single row
+            dut_params = self._get_dut_params(outer_seg, inner_seg, stack,
+                                              ncodes=ncodes,
+                                              num_core=num_core,
+                                              nrows=1,
+                                              ncols=ncodes + 2,
+                                              pinfo=pinfo)
+            dut = await self.async_new_dut('dly_line_chain', STDCellWrapper, dut_params)
+            helper = GatherHelper()
+            for code in range(ncodes):
+                mc_sim_params = dict(deepcopy(sim_params))
+                mc_sim_params['sim_envs'] = global_info['dsn_envs'][mc_dsn_env]['mc_env']
+                mc_tb_params = self._get_tbm_params(code, ncodes, cload, mc_sim_params)
+                mc_tb_params['monte_carlo_params'] = mc_params
+                sim_id = f'dly_no{outer_seg}_ni{inner_seg}_s{stack}_mc{indx}_c{code}'
+                self.log("Running Monte Carlo on design")
+                helper.append(self._get_delay(sim_id, dut, mc_tb_params, t_start=tstart,
+                                              t_stop=tstop))
+            ret_list = await helper.gather_err()
+            tdr_list, tdf_list = [x[0] for x in ret_list], [x[1] for x in ret_list]
+
+            tdr = np.stack(tdr_list, axis=0)
+            tdf = np.stack(tdf_list, axis=0)
+
+            steps_r = np.diff(tdr, axis=0).squeeze()
+            steps_f = np.diff(tdf, axis=0).squeeze()
+
+            sdr = np.std(steps_r)
+            sdf = np.std(steps_f)
+
+            cur_std_max = max(sdr, sdf)
+            print('=' * 80)
+            self.log(f"Standard deviation of the rising delay: {sdr}, Spec = {std_dev_max}")
+            self.log(f"Standard deviation of the falling delay: {sdf}, Spec = {std_dev_max}")
+            print('=' * 80)
+
+            diff_factor = cur_std_max / std_dev_max
+            n_factor = diff_factor ** 2
+            indx += 1
+
+        return outer_seg, inner_seg
+
+    def _get_dut_params(self,
+                        nand_outer_seg: int,
+                        nand_inner_seg: int,
+                        stack: int,
+                        ncodes: int,
+                        num_core: int,
+                        nrows: int,
+                        ncols: int,
+                        pinfo: Mapping[str, Any],
+                        ) -> Dict[str, Any]:
+
+        tech_info = self.dsn_tech_info
+        dc_core = {
+            'in': nand_outer_seg,
+            'out': nand_outer_seg,
+            'sr': nand_inner_seg,
+        }
+
+        scan_rst_flop = {
+            'in': tech_info['seg_min'],
+            'buf': tech_info['seg_min'],
+            'keep': tech_info['seg_min'],
+            'pass': tech_info['seg_min'],
+            'mux': tech_info['seg_min'],
+            'rst': tech_info['seg_min'],
+            'out': tech_info['seg_min'],
+        }
+
+        dut_params = dict(
+            cls_name=self.get_dut_lay_class().get_qualified_name(),
+            params=dict(
+                pinfo=pinfo,
+                seg_dict=dict(
+                    dc_core=dc_core,
+                    scan_rst_flop=scan_rst_flop,
+                    so_inv=tech_info['seg_min'],
+                    bk_inv=tech_info['seg_min'],
+                ),
+                stack_nand=stack,
+                num_rows=nrows,
+                num_cols=ncols,
+                num_insts=ncodes,
+                num_core=num_core,
+                flop=False,
+
+                tile0=1,
+                tile1=3,
+                tile_vss=0,
+                tile_vdd=2,
+                substrate_row=True,
+                draw_taps='NONE',
+                show_pins=True,
+            )
+        )
+        return dut_params
+
+    def _get_tbm_params(self,
+                        code: int,
+                        num_inst: int,
+                        cload: float,
+                        sim_params: Mapping[str, Any],
+                        ) -> Dict[str, Any]:
+        tech_info = self.dsn_tech_info
+
+        dut_pins = ['dlyin', 'CLKIN', 'VDD', 'VSS', 'iSE', 'RSTb',
+                    'dlyout', 'iSI', 'SOOUT', f'a{num_inst - 1}',
+                    f'b{num_inst - 1}', f'bk<{num_inst - 1}:0>']
+
+        pwr_domain = {}
+        for pin in dut_pins:
+            if '<' in pin:
+                base_name = pin.split('<')[0]
+                pwr_domain[base_name] = ('VSS', 'VDD')
+            else:
+                pwr_domain[pin] = ('VSS', 'VDD')
+
+        pulse_list = [
+            dict(
+                pin='dlyin',
+                tper=sim_params['tper'],
+                tpw=sim_params['tper'] / 2,
+                trf=sim_params['trf'],
+            ),
+            dict(
+                pin='CLKIN',
+                tper=sim_params['tclk'],
+                tpw=sim_params['tclk'] / 2,
+                trf=sim_params['clk_trf'],
+            )
+        ]
+
+        default_sim_env = tech_info['dsn_envs']['center']['env']
+        sim_envs = sim_params.get('sim_envs', default_sim_env)
+        tbm_specs = dict(
+            sim_envs=sim_envs,
+            save_outputs=['dlyin', 'dlyout'],
+            sim_params=dict(
+                t_sim=sim_params['ncycles'] * sim_params['tper'],
+                t_rst=0,
+                t_rst_rf=0,
+            ),
+            dut_pins=dut_pins,
+            pulse_list=pulse_list,
+            load_list=[dict(pin='dlyout', type='cap', value=cload)],
+            pwr_domain=pwr_domain,
+            sup_values=dict(VSS=0, VDD=tech_info['vdd']),
+            pin_values={
+                f'bk<{num_inst - 1}:0>': (1 << num_inst) - 1 - 2 ** code,
+                'iSE': 0,
+                'iSI': 0,
+                'RSTb': 1,
+                f'a{num_inst - 1}': 'mid',
+                f'b{num_inst - 1}': 'mid',
+            },
+            thres_lo=sim_params['thres_lo'],
+            thres_hi=sim_params['thres_hi']
+        )
+
+        return tbm_specs
+
+    async def _get_delay(self,
+                         sim_id: str,
+                         dut,
+                         tbm_specs: Mapping[str, Any],
+                         **kwargs: Dict[str, Any]) -> Tuple[np.ndarray, np.ndarray]:
+
+        tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, tbm_specs))
+        sim_results = await self.async_simulate_tbm_obj(sim_id, dut, tbm, tbm_specs)
+        tdr = tbm.calc_delay(sim_results.data, 'dlyin', 'dlyout',
+                             in_edge=EdgeType.RISE, out_edge=EdgeType.RISE, **kwargs)
+        tdf = tbm.calc_delay(sim_results.data, 'dlyin', 'dlyout',
+                             in_edge=EdgeType.FALL, out_edge=EdgeType.FALL, **kwargs)
+        return tdr, tdf
diff --git a/src/aib_ams/design/frontend.py b/src/aib_ams/design/frontend.py
new file mode 100644
index 0000000..a2ed32a
--- /dev/null
+++ b/src/aib_ams/design/frontend.py
@@ -0,0 +1,587 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any, Optional, Mapping, cast
+
+from pybag.enum import LogLevel
+
+from bag.io import read_yaml
+from bag.env import get_tech_global_info
+from xbase.layout.mos.base import TileInfoTable
+
+from bag.simulation.design import DesignerBase
+from bag3_testbenches.measurement.tran.digital import DigitalTranTB
+from bag3_testbenches.measurement.data.tran import EdgeType
+
+from bag3_digital.layout.stdcells.util import STDCellWrapper
+
+from aib_ams.layout.frontend import Frontend
+from aib_ams.layout.top import FrontendESD
+from aib_ams.design.txanlg import TXAnalogCoreDesigner
+from aib_ams.design.rxanlg import RXAnalogDesigner
+
+from xbase.layout.mos.top import GenericWrapper
+from bag.layout.util import IPMarginTemplate
+
+class FrontendDesigner(DesignerBase):
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        DesignerBase.__init__(self, *args, **kwargs)
+        self.dsn_tech_info = get_tech_global_info('aib_ams')
+        self._txanlg_dsnr = None
+        self._rxanlg_dsnr = None
+
+    async def async_design(self,
+                           num_units: int,
+                           num_units_nom: int,
+                           num_units_min: int,
+                           r_targ: float,
+                           r_min_weak: float,
+                           c_ext: float,
+                           freq: float,
+                           trf_max: float,
+                           trst: float,
+                           rel_err: float,
+                           del_err: float,
+                           td_max: float,
+                           stack_max: int,
+                           dig_tbm_specs: Dict[str, Any],
+                           dig_buf_params: Dict[str, Any],
+                           cap_in_search_params: Dict[str, Any],
+                           res_mm_specs: Dict[str, Any],
+                           c_odat: float,
+                           c_odat_async: float,
+                           c_oclkp: float,
+                           c_oclkn: float,
+                           cin: float,
+                           tp_targ: float,
+                           tmismatch: float,
+                           trf_in: float,
+                           tile_specs: Mapping[str, Any],
+                           k_ratio_ctrl: float,
+                           k_ratio_data: float,
+                           num_sup_clear: int = 0,
+                           design_env_name: str = '',
+                           tile_name: str = '',
+                           ridx_p: int = 1,
+                           ridx_n: int = 1,
+                           tran_options: Optional[Mapping[str, Any]] = None,
+                           inv_input_cap_meas_seg: Optional[int] = 16,
+                           sim_options: Optional[Mapping[str, Any]] = None,
+                           unit_inv_cin: float = 0,
+                           cap_in_mm_specs: str = '',
+                           tx_dsn_specs: Mapping[str, Any] = None,
+                           rx_dsn_specs: Mapping[str, Any] = None,
+                           frontend_dsn_specs: Dict[str, Any] = None,
+                           with_esd: bool = False,
+                           **kwargs: Any) -> Mapping[str, Any]:
+
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+        """Run sub-hierarchy design scripts and stitch together
+        """
+        # Get and set max widths of final drivers from tech defaults; set this in tile info
+        tech_info = self.dsn_tech_info
+        w_p = tech_info['w_maxp']
+        w_n = tech_info['w_maxn']
+        if 'lch' not in tile_specs['arr_info']:
+            tile_specs['arr_info']['lch'] = tech_info['lch_min']
+        tile_specs['place_info'][tile_name]['row_specs'][0]['width'] = w_n
+        tile_specs['place_info'][tile_name]['row_specs'][1]['width'] = w_p
+
+        # Make tile info
+        tinfo_table = TileInfoTable.make_tiles(self.grid, tile_specs)
+        tile_name_dict = dict(name=tile_name)
+        pinfo = tinfo_table.make_place_info(tile_name_dict)
+
+        if tx_dsn_specs is None and frontend_dsn_specs is None:
+            tx_args = dict(
+                num_units=num_units,
+                num_units_nom=num_units_nom,
+                num_units_min=num_units_min,
+                r_targ=r_targ,
+                r_min_weak=r_min_weak,
+                c_ext=c_ext,
+                freq=freq,
+                trf_max=trf_max,
+                trst=trst,
+                trf_in=trf_in,
+                k_ratio_ctrl=k_ratio_ctrl,
+                k_ratio_data=k_ratio_data,
+                rel_err=rel_err,
+                del_err=del_err,
+                td_max=td_max,
+                stack_max=stack_max,
+                tile_name=tile_name,
+                tile_specs=tile_specs,
+                dig_tbm_specs=dig_tbm_specs,
+                dig_buf_params=dig_buf_params,
+                cap_in_search_params=cap_in_search_params,
+                res_mm_specs=res_mm_specs,
+                ridx_p=ridx_p,
+                ridx_n=ridx_n,
+                tran_options=tran_options,
+                inv_input_cap_meas_seg=inv_input_cap_meas_seg,
+                sim_options=sim_options,
+            )
+            self._txanlg_dsnr = TXAnalogCoreDesigner(self._root_dir, self._sim_db, self._dsn_specs)
+            tx_params = await self._txanlg_dsnr.async_design(**tx_args)
+        else:
+            tx_params = tx_dsn_specs
+
+        if rx_dsn_specs is None and frontend_dsn_specs is None:
+            # Calculate POR cap for RX POR level shifter sizing
+            tx_ctrl_lv_params = tx_params['ctrl_lvshift']['dut_params']['params']['lv_params']
+            tx_data_lv_params = tx_params['data_lvshift']['dut_params']['params']['lv_params']
+            w_ctrl = tx_ctrl_lv_params['seg_dict']['rst'] * tx_ctrl_lv_params['w_dict']['rst']
+            w_data = tx_data_lv_params['seg_dict']['rst'] * tx_data_lv_params['w_dict']['rst']
+            cin_tx_por_total_w = 7 * w_ctrl + w_data
+            cin_tx_por_vccl = cin_tx_por_total_w / tech_info['cin_inv']['w_per_seg'] * \
+                              tech_info['cin_inv']['cin_per_seg']
+
+            rx_args = read_yaml(kwargs['rx_specs_file'])
+            rx_dsn_params = rx_args['dsn_params']
+            rx_dsn_params['c_por_vccl_tx'] = cin_tx_por_vccl
+            self._rxanlg_dsnr = RXAnalogDesigner(self._root_dir, self._sim_db, rx_dsn_params)
+            rx_params = (await self._rxanlg_dsnr.async_design(**rx_args))['rx_params']
+        else:
+            rx_params = rx_dsn_specs
+
+        if frontend_dsn_specs is None:
+            dut_params = dict(
+                pinfo=pinfo,
+                buf_ctrl_lv_params=tx_params['ctrl_lvshift']['dut_params']['params'][
+                    'in_buf_params'],
+                ctrl_lv_params=tx_params['ctrl_lvshift']['dut_params']['params']['lv_params'],
+                buf_por_lv_params=rx_params['buf_por_lv_params'],
+                por_lv_params=rx_params['por_lv_params'],
+                rx_lv_params=rx_params['data_lv_params'],
+                inv_params=rx_params['inv_params'],
+                se_params=rx_params['se_params'],
+                match_params=rx_params['match_params'],
+                buf_data_lv_params=tx_params['data_lvshift']['dut_params']['params'][
+                    'in_buf_params'],
+                tx_lv_params=tx_params['data_lvshift']['dut_params']['params']['lv_params'],
+                drv_params=tx_params['driver']['dut_params']['params'],
+            )
+        else:
+            dut_params = frontend_dsn_specs
+            if not with_esd:
+                dut_params['pinfo'] = pinfo
+
+        print("=" * 80)
+        print("Frontend: Running Signoff...")
+        await self.verify_design(dut_params, tp_targ, tmismatch, c_ext, freq, trst, td_max,
+                                 trf_max, c_odat, c_odat_async, c_oclkp, c_oclkn, trf_in, with_esd)
+        if gen_specs is not None and gen_cell_args is not None:
+            gen_cell_specs = dict(
+                lay_class=IPMarginTemplate.get_qualified_name(),
+                params=dict(
+                    cls_name=GenericWrapper.get_qualified_name(),
+                    params=dict(
+                        cls_name=Frontend.get_qualified_name(),
+                        params=dut_params,
+                    ),
+                ),
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return dut_params
+
+    async def verify_design(self, dut_params, tp_targ, tmismatch, c_ext, freq, trst, td_max,
+                            trf_max, c_odat, c_odat_async, c_oclkp, c_oclkn, trf_in, with_esd):
+        """Sanity check that we are meeting spec
+        """
+        gen_params = dict(
+            cls_name=Frontend.get_qualified_name(),
+            draw_taps=False,
+            params=dut_params,
+        )
+        if with_esd:
+            dut = await self.async_new_dut('frontendESD_top', FrontendESD, dut_params,
+                                           export_lay=True)
+        else:
+            dut = await self.async_new_dut('frontend_top', STDCellWrapper, gen_params)
+
+        tx_ok = await self._signoff_tx(dut, c_ext, freq, trf_in, trst, td_max, trf_max, with_esd)
+        if not tx_ok:
+            self.log("TX failed top-level sign off", level=LogLevel.WARN)
+
+        rx_ok = await self._signoff_rx(dut, tp_targ, tmismatch, trf_in, c_odat,
+                                       c_odat_async, c_oclkp, c_oclkn, c_ext, freq, with_esd)
+        if not rx_ok:
+            self.log("RX failed top-level sign off", level=LogLevel.WARN)
+
+        return tx_ok and rx_ok
+
+    async def _signoff_tx(self, dut, c_ext, freq, trf_in, trst, td_max, trf_max, with_esd: bool,
+                          spec_margin: float = 0.1, sim_options=None) -> bool:
+        tech_info = self.dsn_tech_info
+        all_corners = tech_info['signoff_envs']['all_corners']
+
+        # Run all corners
+        envs = all_corners['envs']
+        worst_td = -float('inf')
+        worst_trf = -float('inf')
+        worst_env = ''
+        worst_trf_env = ''
+        for env in envs:
+            vdd_io = all_corners['vddio'][env]
+            vdd_core = all_corners['vdd'][env]
+            tbm_specs = self.get_tx_tbm_specs(c_ext, freq, trf_in, trst, vdd_core, vdd_io, [env],
+                                              with_esd, sim_options)
+
+            tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, tbm_specs))
+            sim_results = await self.async_simulate_tbm_obj(f'signoff_txanlg_{env}', dut,
+                                                            tbm, tbm_specs)
+            # get POR fall time to know start time
+            # t_start = tbm.calc_cross(sim_results.data, 'XDUT.por_vccl', out_edge=EdgeType.FALL)
+
+            td_in_hh = tbm.calc_delay(sim_results.data, 'din', 'iopad' if with_esd else 'txpadout',
+                                      in_edge=EdgeType.RISE, out_edge=EdgeType.RISE,
+                                      t_start=1 / freq)
+            td_in_ll = tbm.calc_delay(sim_results.data, 'din', 'iopad' if with_esd else 'txpadout',
+                                      in_edge=EdgeType.FALL, out_edge=EdgeType.FALL,
+                                      t_start=1 / freq)
+            td = max(td_in_hh[0], td_in_ll[0])
+            if td > worst_td:
+                worst_td = td
+                worst_env = env
+                data_td = sim_results.data
+
+            trf_r = tbm.calc_trf(sim_results.data, 'iopad' if with_esd else 'txpadout',
+                                 True, t_start=1 / freq)
+            trf_f = tbm.calc_trf(sim_results.data, 'iopad' if with_esd else 'txpadout',
+                                 False, t_start=1 / freq)
+            trf = max(trf_r[0], trf_f[0])
+            if trf > worst_trf:
+                worst_trf = trf
+                worst_trf_env = env
+                data_trf = sim_results.data
+
+        self.log(f'TX Data td_target = {td_max}, td_worst = {worst_td}, worst_env = {worst_env}')
+        self.log(f'TX Data trf_target = {trf_max}, trf_worst = {worst_trf}, '
+                 f'worst_env = {worst_trf_env}')
+
+        return worst_td <= td_max * (1 + spec_margin) and worst_trf <= (1 + spec_margin) * trf_max
+
+    def get_tx_tbm_specs(self, c_ext, freq, trf, trst, vdd_core, vdd_io, sim_envs, with_esd,
+                         sim_options=None):
+        load_pin, pins, pwr_domain = self.make_shared_tbm_params(with_esd)
+        tbm_specs = dict(
+            dut_pins=pins,
+            pulse_list=[dict(pin='din',
+                             tper='tbit',
+                             tpw='tbit/2',
+                             trf='trf',
+                             pos=True
+                             ),
+                        ],
+            load_list=[dict(pin=load_pin,
+                            type='cap',
+                            value=c_ext)],
+            sup_values=dict(VSS=0,
+                            VDDCore=vdd_core,
+                            VDDIO=vdd_io,
+                            ),
+            pwr_domain=pwr_domain,
+            pin_values={'indrv_buf<1:0>': 3,
+                        'ipdrv_buf<1:0>': 3,
+                        'itx_en_buf': 1,
+                        'weak_pulldownen': 0,
+                        'weak_pullupenb': 1,
+                        'iclkn': 0,
+                        'data_en': 0,
+                        'clk_en': 0,
+                        },
+            reset_list=[('por', True)],
+            sim_envs=sim_envs,
+            sim_params=dict(
+                freq=freq,
+                tbit=1 / freq,
+                trf=trf,
+                t_rst=trst,
+                t_rst_rf=trf,
+                t_sim=2 / freq,
+            ),
+            save_outputs=['iopad', 'din'] if with_esd else ['txpadout', 'din'],
+        )
+        if sim_options:
+            tbm_specs['sim_options'] = sim_options
+
+        return tbm_specs
+
+    @staticmethod
+    def make_shared_tbm_params(with_esd: bool):
+        pins = ['VDDCore', 'VDDIO', 'VSS', 'clk_en', 'data_en', 'din', 'iclkn',
+                'indrv_buf<1:0>', 'ipdrv_buf<1:0>', 'itx_en_buf', 'oclkn', 'oclkp',
+                'odat', 'odat_async', 'por', 'weak_pulldownen', 'weak_pullupenb']
+        pins.extend(['iopad', 'iopad_out'] if with_esd else ['rxpadin', 'txpadout'])
+        load_pin = 'iopad' if with_esd else 'txpadout'
+        pwr_domain = {'din': ('VSS', 'VDDCore'),
+                      'indrv_buf': ('VSS', 'VDDCore'),
+                      'ipdrv_buf': ('VSS', 'VDDCore'),
+                      'itx_en_buf': ('VSS', 'VDDCore'),
+                      'por': ('VSS', 'VDDCore'),
+                      'weak_pulldownen': ('VSS', 'VDDCore'),
+                      'weak_pullupenb': ('VSS', 'VDDCore'),
+                      'iclkn': ('VSS', 'VDDIO'),
+                      'odat': ('VSS', 'VDDCore'),
+                      'odat_async': ('VSS', 'VDDCore'),
+                      'oclkp': ('VSS', 'VDDCore'),
+                      'oclkn': ('VSS', 'VDDCore'),
+                      'data_en': ('VSS', 'VDDCore'),
+                      'clk_en': ('VSS', 'VDDCore'),
+                      }
+        if with_esd:
+            pwr_domain['iopad'] = ('VSS', 'VDDIO')
+            pwr_domain['iopad_out'] = ('VSS', 'VDDIO')
+        else:
+            pwr_domain['txpadout'] = ('VSS', 'VDDIO')
+            pwr_domain['rxpadin'] = ('VSS', 'VDDIO')
+
+        return load_pin, pins, pwr_domain
+
+    async def _signoff_rx(self, dut, tp_targ, tmismatch, trf_in, c_odat,
+                          c_odat_async, c_oclkp, c_oclkn, c_ext, freq, with_esd,
+                          spec_margin: float = 10e-2):
+        tech_info = self.dsn_tech_info
+        all_corners = tech_info['signoff_envs']['all_corners']
+
+        # Run level shifter signoff corner
+        sim_id = "frontend_verify_rx_por_lvl_extreme"
+        env = tech_info['signoff_envs']['lvl_func']['env']
+        vdd_io = tech_info['signoff_envs']['lvl_func']['vddo']
+        vdd_core = tech_info['signoff_envs']['lvl_func']['vddi']
+
+        tbm_specs = self.get_rx_tbm_specs(c_ext, c_odat, c_odat_async, c_oclkp, c_oclkn, freq,
+                                          trf_in, 5 * trf_in, vdd_core, vdd_io, env, with_esd)
+        tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, tbm_specs))
+        sim_results = await self.async_simulate_tbm_obj(f'{sim_id}', dut, tbm, tbm_specs)
+        sim_data = sim_results.data
+
+        td_list = self.get_rx_delays(sim_data, tbm, freq, with_esd)
+        for del_arr in td_list:
+            if del_arr[0] == float('inf') or del_arr[0] < 0:
+                msg = f'RX failed extreme level shifer signoff - got infinite or ' + \
+                      f'negative delay.\n' + \
+                      f'Odat rise: {td_list[0][0]}, Odat fall: {td_list[1][0]}\n' + \
+                      f'Odat_async rise: {td_list[2][0]}, Odat_async fall: {td_list[3][0]}\n' + \
+                      f'Oclkp rise: {td_list[4][0]}, Oclkp fall: {td_list[5][0]}\n' + \
+                      f'Oclkn rise: {td_list[6][0]}, Oclkn fall: {td_list[7][0]}'
+                self.log(msg, level=LogLevel.WARN)
+
+        # Run all corners
+        envs = all_corners['envs']
+        worst_td = -float('inf')
+        worst_td_clk = -float('inf')
+        worst_env = ''
+        sim_id = "frontend_verify_rx"
+        passed = True
+        msg = ''
+        for env in envs:
+            vdd_io = all_corners['vddio'][env]
+            vdd_core = all_corners['vdd'][env]
+            tbm_specs = self.get_rx_tbm_specs(c_ext, c_odat, c_odat_async, c_oclkp, c_oclkn, freq,
+                                              trf_in, 5 * trf_in, vdd_core, vdd_io, [env], with_esd)
+
+            tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, tbm_specs))
+            sim_results = await self.async_simulate_tbm_obj(f'{sim_id}_{env}', dut, tbm, tbm_specs)
+            sim_data = sim_results.data
+            td_list = self.get_rx_delays(sim_data, tbm, freq, with_esd)
+            [td_odat_hh, td_odat_ll, td_odat_async_hh, td_odat_async_ll,
+             td_oclkp_hh, td_oclkp_ll, td_oclkn_hh, td_oclkn_ll] = td_list
+
+            # Verify clk, data meeting timing
+            if td_oclkp_hh[0] > (1 + spec_margin) * tp_targ or td_oclkp_ll[0] > (1 + spec_margin) * tp_targ:
+                msg = msg + \
+                      f"\nFAIL: oclkp path delay too slow. Spec: {tp_targ}, " + \
+                      f"actual rise: {td_oclkp_hh}, actual fall: {td_oclkp_ll} in corner {env}\n"
+                passed = False
+            if td_oclkn_hh[0] > (1 + spec_margin) * tp_targ or td_oclkn_ll[0] > (1 + spec_margin) * tp_targ:
+                msg = msg + \
+                      f"\nFAIL: clkn path delay too slow. Spec: {tp_targ}, " + \
+                      f"actual rise: {td_oclkn_hh}, actual fall: {td_oclkn_ll}  in corner {env}\n"
+                passed = False
+            if td_odat_hh[0] > (1 + spec_margin) * tp_targ or td_odat_ll[0] > (1 + spec_margin) * tp_targ:
+                msg = msg + \
+                      f"\nFAIL: Data path delay too slow. Spec: {tp_targ}, " + \
+                      f"\nactual rise: {td_odat_hh}, actual fall: {td_odat_ll}  in corner {env}\n"
+                passed = False
+
+            td = max(td_odat_hh[0], td_odat_ll[0])
+            if td > worst_td:
+                worst_td = td
+                worst_env = env
+
+            td_clk = max(td_oclkp_hh[0], td_oclkp_ll[0], td_oclkn_hh[0], td_oclkn_ll[0])
+            if td_clk > worst_td_clk:
+                worst_td_clk = td_clk
+
+            # Verify clk - data alignment
+            if abs(td_odat_hh[0] - td_oclkp_hh[0]) > (1 + spec_margin) * tmismatch:
+                msg = msg + \
+                      f"\nFAIL: Skew between odat and oclkp rise delays too large.\n" + \
+                      f"Spec: {tmismatch}, actual difference: {td_odat_hh[0] - td_oclkp_hh[0]}" + \
+                      f"in corner {env}\n"
+                passed = False
+            if abs(td_odat_ll[0] - td_oclkp_ll[0]) > (1 + spec_margin) * tmismatch:
+                msg = msg + \
+                      f"\nFAIL: Skew between odat and oclkp fall delays too large\n" + \
+                      f"Spec: {tmismatch}, actual difference: {td_odat_ll[0] - td_oclkp_ll[0]}" + \
+                      f" in corner {env}\n"
+                passed = False
+            if abs(td_odat_hh[0] - td_oclkn_hh[0]) > (1 + spec_margin) * tmismatch:
+                msg = msg + \
+                      f"\nFAIL: Skew between odat and oclkn rise delays too large\n" + \
+                      f"Spec: {tmismatch}, actual difference: {td_odat_hh[0] - td_oclkn_hh[0]}" + \
+                      f" in corner {env}\n"
+                passed = False
+            if abs(td_odat_ll[0] - td_oclkn_ll[0]) > (1 + spec_margin) * tmismatch:
+                msg = msg + \
+                      f"\nFAIL: Skew between odat and oclkn fall delays too large\n" + \
+                      f"Spec: {tmismatch}, actual difference: {td_odat_ll[0] - td_oclkn_ll[0]}" + \
+                      f" in corner {env}\n"
+                passed = False
+
+            # Verify clk - clkb alignment
+            if abs(td_oclkp_hh[0] - td_oclkn_ll[0]) > (1 + spec_margin) * tmismatch:
+                msg = msg + \
+                      f"\nFAIL: Skew between oclkp rise and oclkn fall too large.\n" + \
+                      f"Spec: {tmismatch}, actual difference: {td_oclkp_hh[0] - td_oclkn_ll[0]}" + \
+                      f" in corner {env}\n"
+                passed = False
+            if abs(td_oclkp_ll[0] - td_oclkn_hh[0]) > (1 + spec_margin) * tmismatch:
+                msg = msg + \
+                      f"\nFAIL: Skew between oclkp fall and oclkn rise too large.\n" + \
+                      f"Spec: {tmismatch}, actual difference: {td_oclkp_ll[0] - td_oclkn_hh[0]}" + \
+                      f" in corner {env}\n"
+                passed = False
+
+            # Verify duty cycle
+            if abs(td_oclkp_hh[0] - td_oclkp_ll[0]) > (1 + spec_margin) * tmismatch:
+                msg = msg + \
+                      f"\nFAIL: Duty cycle distortion on oclkp too large.\n" + \
+                      f"|Spec|: {tmismatch}, actual error: {td_oclkp_hh[0] - td_oclkp_ll[0]}" + \
+                      f" in corner {env}\n"
+                passed = False
+            if abs(td_oclkn_hh[0] - td_oclkn_ll[0]) > (1 + spec_margin) * tmismatch:
+                msg = msg + \
+                      f"\nFAIL: Duty cycle distortion on oclkn too large.\n" + \
+                      f"|Spec|: {tmismatch}, actual error: {td_oclkn_hh[0] - td_oclkn_ll[0]}" + \
+                      f" in corner {env}\n"
+                passed = False
+
+        if not passed:
+            self.log(msg, level=LogLevel.WARN)
+
+        self.log(f'----------\nFrontend PASSED RX signoff.\n'
+                 f'Delay target = {tp_targ}, Mismatch target = {tmismatch}\n'
+                 f'Data worst delay = {worst_td}, '
+                 f'worst_env = {worst_env}\n'
+                 f'Clock worst delay = {worst_td_clk}')
+
+        return passed
+
+    def get_rx_tbm_specs(self, c_ext, c_odat, c_odat_async, c_oclkp, c_oclkn, freq, trf, trst,
+                         vdd_core, vdd_io, sim_envs, with_esd, sim_options=None):
+        load_pin, pins, pwr_domain = self.make_shared_tbm_params(with_esd)
+        save_outputs = ['iopad', 'iclkn', 'oclkp', 'oclkn', 'odat', 'odat_async'] if with_esd else \
+                       ['rxpadin', 'iclkn', 'oclkp', 'oclkn', 'odat', 'odat_async']
+        tbm_specs = dict(
+            dut_pins=pins,
+            pulse_list=[dict(pin='iopad' if with_esd else 'rxpadin',
+                             tper='tbit',
+                             tpw='tbit/2',
+                             trf='trf',
+                             pos=True
+                             ),
+                        ],
+            diff_list=[(['iopad'] if with_esd else ['rxpadin'], ['iclkn'])],
+            load_list=[dict(pin=load_pin,
+                            type='cap',
+                            value=c_ext),
+                       dict(pin='odat',
+                            type='cap',
+                            value=c_odat),
+                       dict(pin='odat_async',
+                            type='cap',
+                            value=c_odat_async),
+                       dict(pin='oclkp',
+                            type='cap',
+                            value=c_oclkp),
+                       dict(pin='oclkn',
+                            type='cap',
+                            value=c_oclkn)],
+            sup_values=dict(VSS=0,
+                            VDDCore=vdd_core,
+                            VDDIO=vdd_io,
+                            ),
+            pwr_domain=pwr_domain,
+            pin_values={'indrv_buf<1:0>': 0,
+                        'ipdrv_buf<1:0>': 0,
+                        'itx_en_buf': 0,
+                        'weak_pulldownen': 0,
+                        'weak_pullupenb': 1,
+                        'data_en': 1,
+                        'clk_en': 1,
+                        },
+            reset_list=[('por', True)],
+            sim_envs=sim_envs,
+            sim_params=dict(
+                freq=freq,
+                tbit=1 / freq,
+                trf=trf,
+                t_rst=trst,
+                t_rst_rf=trf,
+                t_sim=2 / freq,
+            ),
+            save_outputs=save_outputs,
+        )
+        if sim_options:
+            tbm_specs['sim_options'] = sim_options
+
+        return tbm_specs
+
+    @staticmethod
+    def get_rx_delays(sim_data, tbm, freq, with_esd):
+        in_pad = 'iopad' if with_esd else 'rxpadin'
+        td_odat_hh = tbm.calc_delay(sim_data, in_pad, 'odat',
+                                    in_edge=EdgeType.RISE, out_edge=EdgeType.RISE,
+                                    t_start=1 / freq)
+        td_odat_ll = tbm.calc_delay(sim_data, in_pad, 'odat',
+                                    in_edge=EdgeType.FALL, out_edge=EdgeType.FALL,
+                                    t_start=1 / freq)
+        td_odat_async_hh = tbm.calc_delay(sim_data, in_pad, 'odat_async',
+                                          in_edge=EdgeType.RISE, out_edge=EdgeType.RISE,
+                                          t_start=1 / freq)
+        td_odat_async_ll = tbm.calc_delay(sim_data, in_pad, 'odat_async',
+                                          in_edge=EdgeType.FALL, out_edge=EdgeType.FALL,
+                                          t_start=1 / freq)
+        td_oclkp_hh = tbm.calc_delay(sim_data, in_pad, 'oclkp',
+                                     in_edge=EdgeType.RISE, out_edge=EdgeType.RISE,
+                                     t_start=1 / freq)
+        td_oclkp_ll = tbm.calc_delay(sim_data, in_pad, 'oclkp',
+                                     in_edge=EdgeType.FALL, out_edge=EdgeType.FALL,
+                                     t_start=1 / freq)
+        td_oclkn_hh = tbm.calc_delay(sim_data, 'iclkn', 'oclkn',
+                                     in_edge=EdgeType.RISE, out_edge=EdgeType.RISE,
+                                     t_start=1 / freq)
+        td_oclkn_ll = tbm.calc_delay(sim_data, 'iclkn', 'oclkn',
+                                     in_edge=EdgeType.FALL, out_edge=EdgeType.FALL,
+                                     t_start=1 / freq)
+
+        return [td_odat_hh, td_odat_ll, td_odat_async_hh, td_odat_async_ll,
+                td_oclkp_hh, td_oclkp_ll, td_oclkn_hh, td_oclkn_ll]
diff --git a/src/aib_ams/design/output_driver.py b/src/aib_ams/design/output_driver.py
new file mode 100644
index 0000000..746a0db
--- /dev/null
+++ b/src/aib_ams/design/output_driver.py
@@ -0,0 +1,360 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Mapping, Dict, Any, Optional, cast, Type
+
+import numpy as np
+
+from bag.layout.template import TemplateBase
+from bag.simulation.design import DesignerBase
+from bag.env import get_tech_global_info
+
+from xbase.layout.mos.placement.data import TileInfoTable
+
+from bag3_testbenches.measurement.digital.timing import CombLogicTimingTB
+
+from bag3_digital.layout.stdcells.util import STDCellWrapper
+
+from .unit_cell import DriverUnitCellDesigner, DriverPullUpDownDesigner
+from ..layout.driver import AIBOutputDriver
+
+
+class OutputDriverDesigner(DesignerBase):
+    """ Design the output Driver """
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        DesignerBase.__init__(self, *args, **kwargs)
+        self.pinfo = None
+        self._tb_params = dict(
+            load_list=[('out', 'cload')],
+            dut_conns={'out': 'out', 'in': 'in', 'nand_pu': 'nand_pu', 'nor_pd': 'nor_pd',
+                       'enb': 'VSS', 'en': 'VDD', 'VDD': 'VDD', 'VSS': 'VSS'},
+        )
+
+    @classmethod
+    def get_dut_lay_class(cls) -> Optional[Type[TemplateBase]]:
+        return AIBOutputDriver
+
+    # TODO: refactor to use helper functions
+    # TODO: deprecate num_units_nom
+    async def async_design(self, num_units: int, num_units_nom: int, num_units_min: int,
+                           trf_max: float, r_targ: float, r_min_weak: float, c_ext: float,
+                           freq: float, trf_in: float, rel_err: float, del_err: float,
+                           tile_name: str, tile_specs: Mapping[str, Any],
+                           res_mm_specs: Dict[str, Any], ridx_p: int = 1, ridx_n: int = 1,
+                           stack_max: int = 10, tran_options: Optional[Mapping[str, Any]] = None,
+                           max_iter: int = 10,
+                           **kwargs: Any) -> Mapping[str, Any]:
+        """ Design the Output Driver Cell
+
+        1) Calls functions to get initial design for main driver unit cell and weak driver
+        2) Characterize design
+        3) Iterate on main driver design to account for additional loading from other unit cells
+
+        Parameters
+        ----------
+        num_units: int
+            Number of unit cells. Must be between 3 and 6
+        num_units_nom: int
+            ???
+        num_units_min: int
+            Min. number of unit cells
+        trf_max: float
+            Max. output rise / fall time
+        r_targ: float
+            Target output resistance
+        r_min_weak: float
+            Target output resistance for weak driver
+        c_ext: float
+            Load capacitance
+        freq: float
+            Operating switching frequency
+        trf_in: float
+            Input rise / fall time
+        rel_err: float
+            Output resistance error tolerance, used in DriverPullUpDownDesigner
+        del_err: float
+            Delay mismatch tolerance, used in DriverUnitCellDesigner for sizing NAND + NOR
+        tile_name: str
+            Tile name for layout.
+        tile_specs: Mapping[str, Any]
+            Tile specifications for layout.
+        res_mm_specs: Mapping[str, Any]
+            MeasurementManager specs for DriverPullUpDownMM, used in DriverPullUpDownDesigner
+        ridx_n: int
+            NMOS transistor row
+        ridx_p: int
+            PMOS transistor row
+        stack_max: int
+            Max. number of stacks possible in pull up / pull down driver
+        tran_options: Optional[Mapping[str, Any]]
+            Additional transient simulation options dictionary, used in DriverPullUpDownDesigner
+        max_iter: int
+            Max. number of iterations for final main driver resizing
+        kwargs: Any
+            Additional keyword arguments. Unused here
+
+        Returns
+        -------
+        ans: Mapping[str, Any]
+            Design summary, including generator parameters and performance summary
+
+        """
+
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+
+        tech_info = get_tech_global_info('aib_ams')
+        w_p = tech_info['w_maxp']
+        w_n = tech_info['w_maxn']
+        tile_specs['place_info'][tile_name]['row_specs'][0]['width'] = w_n
+        tile_specs['place_info'][tile_name]['row_specs'][1]['width'] = w_p
+        self._dsn_specs['tile_specs']['place_info'][tile_name]['row_specs'][0]['width'] = w_n
+        self._dsn_specs['tile_specs']['place_info'][tile_name]['row_specs'][1]['width'] = w_p
+        core_params = dict(r_targ=r_targ * num_units,
+                           stack_max=stack_max,
+                           trf_max=trf_max,
+                           c_min=c_ext / num_units,
+                           c_max=c_ext / num_units_min,
+                           w_p=w_p, w_n=w_n,
+                           freq=freq,
+                           vdd=tech_info['dsn_envs']['slow_io']['vddio'],
+                           vdd_max=tech_info['signoff_envs']['vmax']['vddio'],
+                           trf_in=trf_in,
+                           rel_err=rel_err, del_err=del_err,
+                           tile_specs=tile_specs, tile_name=tile_name,
+                           tran_options=tran_options,
+                           res_mm_specs=res_mm_specs,
+                           )
+        weak_params = core_params.copy()
+        weak_params['w_p'] = tech_info['w_minp']
+        weak_params['w_n'] = tech_info['w_minn']
+        weak_params['r_targ'] = r_min_weak
+        weak_params['is_weak'] = True
+
+        # Design weak pull-up/pull-down
+        weak_designer = DriverPullUpDownDesigner(self._root_dir, self._sim_db, self._dsn_specs)
+        weak_designer.set_dsn_specs(weak_params)
+        weak_results = await weak_designer.async_design(**weak_params)
+
+        # Design main output driver
+        core_designer = DriverUnitCellDesigner(self._root_dir, self._sim_db, self._dsn_specs)
+        core_designer.set_dsn_specs(core_params)
+        summary = await core_designer.async_design(**core_params)
+
+        # Characterize the initial design
+        result_params = summary['dut_params']['params']
+        tinfo_table = TileInfoTable.make_tiles(self.grid, tile_specs)
+        pinfo = tinfo_table[tile_name]
+        dut_params = dict(
+            cls_name='aib_ams.layout.driver.AIBOutputDriver',
+            draw_taps=True,
+            params=dict(
+                pinfo=pinfo,
+                pupd_params=dict(
+                    seg_p=weak_results['seg_p'],
+                    seg_n=weak_results['seg_n'],
+                    stack=weak_results['stack'],
+                    w_p=weak_results['w_p'],
+                    w_n=weak_results['w_n'],
+                ),
+                unit_params=dict(
+                    seg_p=result_params['seg_p'],
+                    seg_n=result_params['seg_n'],
+                    seg_nand=result_params['seg_nand'],
+                    seg_nor=result_params['seg_nor'],
+                    w_p=result_params['w_p'],
+                    w_n=result_params['w_n'],
+                    w_p_nand=result_params['w_p_nand'],
+                    w_n_nand=result_params['w_n_nand'],
+                    w_p_nor=result_params['w_p_nor'],
+                    w_n_nor=result_params['w_n_nor']
+                ),
+                export_pins=True,
+            )
+        )
+        tbm_specs: Dict[str, Any] = dict(
+            thres_lo=0.1,
+            thres_hi=0.9,
+            tstep=None,
+            sim_params=dict(
+                cload=c_ext,
+                tbit=20*r_targ*c_ext,
+                trf=trf_in,
+            ),
+            rtol=1e-8,
+            atol=1e-22,
+            tran_options=tran_options,
+            save_outputs=['out', 'in']
+        )
+
+        if num_units == 3:
+            n_enb_str = 'VDD'
+            p_en_str = 'VSS'
+        elif num_units == 4:
+            n_enb_str = 'VDD,VSS'
+            p_en_str = 'VSS,VDD'
+        elif num_units == 5:
+            n_enb_str = 'VSS,VDD'
+            p_en_str = 'VDD,VSS'
+        elif num_units == 6:
+            n_enb_str = 'VSS,VSS'
+            p_en_str = 'VDD,VDD'
+        else:
+            raise ValueError('Number of units must be between 3 and 6.')
+
+        tb_params = dict(
+            load_list=[('out', 'cload')],
+            dut_conns={'txpadout': 'out', 'din': 'in',
+                       'n_enb_drv<1:0>': n_enb_str, 'p_en_drv<1:0>': p_en_str,
+                       'tristate': 'VSS', 'tristateb': 'VDD',
+                       'weak_pden': 'VSS', 'weak_puenb': 'VDD'}
+        )
+
+        all_corners = tech_info['signoff_envs']['all_corners']
+        trf_worst = -float('inf')
+        tdr_worst = -float('inf')
+        tdf_worst = -float('inf')
+        tf_worst = -float('inf')
+        tr_worst = -float('inf')
+        worst_env = ''
+        duty_err_worst = 0
+        dut = await self.async_new_dut('output_driver', STDCellWrapper, dut_params)
+        for env in all_corners['envs']:
+            tbm_specs['sim_envs'] = [env]
+            tbm_specs['sim_params']['vdd'] = all_corners['vddio'][env]
+            tbm = cast(CombLogicTimingTB, self.make_tbm(CombLogicTimingTB, tbm_specs))
+            sim_results = await self.async_simulate_tbm_obj(f'sim_final_{env}', dut, tbm, tb_params)
+            tdr, tdf = CombLogicTimingTB.get_output_delay(sim_results.data, tbm_specs, 'in', 'out',
+                                                          False)
+
+            if tdr[0] > tdr_worst:
+                tdr_worst = tdr[0]
+            if tdf[0] > tdf_worst:
+                tdf_worst = tdf[0]
+
+            duty_err = tdr[0] - tdf[0]
+            if np.abs(duty_err) > np.abs(duty_err_worst):
+                duty_err_worst = duty_err
+
+            tr, tf = CombLogicTimingTB.get_output_trf(sim_results.data, tbm_specs, 'out')
+            trf = max(np.max(tr), np.max(tf))
+
+            if trf > trf_worst:
+                trf_worst = trf
+                tr_worst = tr[0]
+                tf_worst = tf[0]
+                worst_env = env
+
+        self.logger.info('---')
+        self.logger.info("Completed initial design.")
+        self.logger.info(f'Target R per segment was: {core_params["r_targ"]}')
+        self.logger.info(f'Worst trf was: {trf_worst} / rise: {tr_worst}, fall: {tf_worst}' +
+                         f'in corner {worst_env}')
+        self.logger.info(f'Worst delay was: {max(tdr_worst, tdf_worst)}')
+        self.logger.info(f'Worst duty cycle error was: {duty_err_worst}')
+        self.logger.info('---')
+
+        # Loop on trf to take into account loading from unit cells that are nominally off
+        # but not included in single unit-cell design script.
+        for i in range(1, max_iter + 1):
+            scale_error = trf_worst / trf_max
+
+            if scale_error < 1:
+                break
+
+            core_params['r_targ'] = core_params['r_targ'] / scale_error * (1 - 1/(2*max_iter))
+            self.logger.info(f'Scale error set to {scale_error}.')
+            self.logger.info(f'New target R per segment set to {core_params["r_targ"]}')
+
+            core_designer.set_dsn_specs(core_params)
+            # TODO: Allow designer to start from previous design point and/or guess at scaled
+            #       design (improve runtime)
+            summary = await core_designer.async_design(**core_params)
+
+            result_params = summary['dut_params']['params']
+
+            dut_params['params']['unit_params'] = dict(
+                seg_p=result_params['seg_p'],
+                seg_n=result_params['seg_n'],
+                seg_nand=result_params['seg_nand'],
+                seg_nor=result_params['seg_nor'],
+                w_p=result_params['w_p'],
+                w_n=result_params['w_n'],
+                w_p_nand=result_params['w_p_nand'],
+                w_n_nand=result_params['w_n_nand'],
+                w_p_nor=result_params['w_p_nor'],
+                w_n_nor=result_params['w_n_nor'],
+            )
+
+            tbm_specs['sim_params']['tbit'] = 1/freq
+            # tbm_specs['sim_params']['tbit'] = 20 * core_params['r_targ'] * c_ext
+
+            trf_worst = -float('inf')
+            tdr_worst = -float('inf')
+            tdf_worst = -float('inf')
+            duty_err_worst = 0
+            worst_env = ''
+            duty_env = ''
+            dut = await self.async_new_dut('output_driver', STDCellWrapper, dut_params)
+            for env in all_corners['envs']:
+                tbm_specs['sim_envs'] = [env]
+                tbm_specs['sim_params']['vdd'] = all_corners['vddio'][env]
+                tbm = cast(CombLogicTimingTB, self.make_tbm(CombLogicTimingTB, tbm_specs))
+
+                sim_results = await self.async_simulate_tbm_obj(f'sim_final_{i}_{env}', dut,
+                                                                tbm, tb_params)
+                tdr, tdf = CombLogicTimingTB.get_output_delay(sim_results.data, tbm_specs,
+                                                              'in', 'out',
+                                                              False)
+
+                if tdr[0] > tdr_worst:
+                    tdr_worst = tdr[0]
+                if tdf[0] > tdf_worst:
+                    tdf_worst = tdf[0]
+
+                duty_err = tdr[0] - tdf[0]
+                if np.abs(duty_err) > np.abs(duty_err_worst):
+                    duty_err_worst = duty_err
+                    duty_env = env
+
+                tr, tf = CombLogicTimingTB.get_output_trf(sim_results.data, tbm_specs, 'out')
+                trf = max(np.max(tr), np.max(tf))
+
+                if trf > trf_worst:
+                    trf_worst = trf
+                    tr_worst = tr[0]
+                    tf_worst = tf[0]
+                    worst_env = env
+
+            self.logger.info('---')
+            self.logger.info(f'Completed design iteration {i}.')
+            self.logger.info(f'Worst trf was: {trf_worst} / rise: {tr_worst}, fall: {tf_worst}' +
+                             f'in corner {worst_env}')
+            self.logger.info(f'Worst delay was: {max(tdr_worst, tdf_worst)} in corner {worst_env}')
+            self.logger.info(f'Worst duty cycle error was: {duty_err_worst} in corner {duty_env}')
+            self.logger.info('')
+
+        if gen_specs is not None and gen_cell_args is not None:
+            gen_cell_specs = dict(
+                lay_class=STDCellWrapper.get_qualified_name(),
+                cls_name=AIBOutputDriver.get_qualified_name(),
+                params=dut_params,
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return dict(dut_params=dut_params, tdr=tdr_worst, tdf=tdf_worst, trf_worst=trf_worst,
+                    duty_err=duty_err_worst)
diff --git a/src/aib_ams/design/phase_det.py b/src/aib_ams/design/phase_det.py
new file mode 100644
index 0000000..c0243ec
--- /dev/null
+++ b/src/aib_ams/design/phase_det.py
@@ -0,0 +1,400 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""This package contains design class for PhaseDetector"""
+
+from typing import Dict, Any, Tuple, List, Mapping, Sequence, Optional
+
+import pprint
+from pathlib import Path
+
+from bag.simulation.cache import DesignInstance
+from bag.design.netlist import add_mismatch_offsets
+from bag.env import get_tech_global_info
+
+from xbase.layout.enum import MOSType
+from xbase.layout.mos.base import MOSBasePlaceInfo
+from xbase.layout.mos.top import GenericWrapper
+
+from bag3_digital.design.base import DigitalDesigner
+from bag3_digital.design.stdcells.inv.cin_match import InvCapInMatchDesigner
+from bag3_digital.layout.sampler.flop_strongarm import FlopStrongArm
+from bag3_digital.measurement.util import get_in_buffer_pin_names
+from bag3_digital.measurement.cap.delay_match import CapDelayMatch
+
+from aib_ams.design.se_to_diff_en import SingleToDiffDesigner
+from aib_ams.layout.phase_det import PhaseDetector
+from aib_ams.measurement.phase_det import PhaseDetMeasManager
+
+from bag3_digital.layout.stdcells.util import STDCellWrapper
+
+
+
+class PhaseDetectorDesigner(DigitalDesigner):
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        self._flop_params: Mapping[str, Any] = {}
+        self._td_cin_flop_specs: Dict[str, Any] = {}
+        self._inv_dsn_specs: Dict[str, Any] = {}
+        self._flop_clk_pin: str = ''
+        self._se_to_diff_dsn_params: Dict[str, Any] = {}
+        self._phase_det_mm_params = dict()
+        super().__init__(*args, **kwargs)
+
+    def commit(self) -> None:
+        super().commit()
+
+        specs = self.dsn_specs
+        tile_specs: Mapping[str, Any] = specs['tile_specs']
+        dig_tran_specs: Mapping[str, Any] = specs['dig_tran_specs']
+        sup_values: Mapping[str, Any] = specs['sup_values']
+        c_load: float = specs['c_load']
+        tiles_flop: Sequence[Mapping[str, Any]] = specs['tiles_flop']
+        flop_params: Mapping[str, Any] = specs['flop_params']
+        cin_params: Mapping[str, Any] = specs['cin_params']
+        w_min: int = specs['w_min']
+        w_res: int = specs['w_res']
+        sign_off_envs: Sequence[str] = specs['sign_off_envs']
+        se2diff_params: Mapping[str, Any] = specs['se2diff_params']
+        t_rf: float = specs['t_rf']
+
+        buf_params: Mapping[str, Any] = cin_params['buf_params']
+        search_params: Mapping[str, Any] = cin_params['search_params']
+        err_targ: float = cin_params['err_targ']
+        search_step: int = cin_params['search_step']
+
+        self._flop_params = dict(pinfo=self.make_tile_pattern(tiles_flop), **flop_params)
+
+        pwr_tup = ('VSS', 'VDD')
+        start_pin, stop_pin = get_in_buffer_pin_names('clk')
+        pwr_domain = {p_: pwr_tup for p_ in ['inp', 'inn', 'outp', 'outn', 'clk', 'rstlb']}
+        supply_map = dict(VDD='VDD', VSS='VSS')
+        pin_values = dict(inp=1, inn=0)
+        reset_list = [('rstlb', False)]
+        diff_list = [(['inp'], ['inn']), (['outp'], ['outn'])]
+        flop_tbm_specs = self.get_dig_tran_specs(pwr_domain, supply_map, pin_values=pin_values,
+                                                 reset_list=reset_list, diff_list=diff_list)
+
+        flop_tbm_specs['sim_params'] = sim_params = dict(**flop_tbm_specs['sim_params'])
+        sim_params['c_out'] = c_load
+        self._td_cin_flop_specs = dict(
+            in_pin='clk',
+            buf_params=buf_params,
+            search_params=search_params,
+            tbm_specs=flop_tbm_specs,
+            load_list=[dict(pin='outp', type='cap', value='c_out'),
+                       dict(pin='outn', type='cap', value='c_out')],
+        )
+
+        self._flop_clk_pin = stop_pin
+
+        sa_tile = self.get_tile('strongarm')
+        ridx_n = 0
+        ridx_p = -1
+        w_n = sa_tile.get_row_place_info(ridx_n).row_info.width
+        w_p = sa_tile.get_row_place_info(ridx_p).row_info.width
+        seg_dict = flop_params['sa_params']['seg_dict']
+        seg = max(seg_dict['tail'], 4 * seg_dict['sw'])
+        self._inv_dsn_specs = dict(
+            dig_tran_specs=dig_tran_specs,
+            sup_values=sup_values,
+            buf_params=buf_params,
+            ridx_n=ridx_n,
+            ridx_p=ridx_p,
+            w_min=w_min,
+            w_res=w_res,
+            c_load=0,
+            err_targ=err_targ,
+            search_step=search_step,
+            inv_params_init=dict(w_n=w_n, w_p=w_p, seg=seg),
+            tile_name='strongarm',
+            tile_specs=tile_specs,
+        )
+
+        self._se_to_diff_dsn_params = dict(
+            dig_tran_specs=dig_tran_specs,
+            sup_values=sup_values,
+            t_rf=t_rf,
+            w_min=w_min,
+            w_res=w_res,
+            tile_name='logic',
+            tile_specs=tile_specs,
+            sign_off_envs=sign_off_envs,
+            **se2diff_params,
+        )
+
+        self._phase_det_mm_params = dict(
+            out_rising=False,
+            accept_mode=False,
+            sigma_avt=0.001,
+            sim_envs=sign_off_envs,
+            **specs['meas_specs'],
+        )
+        self._phase_det_mm_params['tbm_specs']['sim_envs'] = sign_off_envs
+
+    async def async_design(self, dig_tran_specs: Mapping[str, Any], sup_values: Mapping[str, Any], c_load: float,
+                           w_min: int, w_res: int, t_rf: float, se2diff_params: Mapping[str, Any],
+                           flop_params: Mapping[str, Any], cin_params: Mapping[str, Any], meas_specs: Mapping[str, Any],
+                           sign_off_envs: Sequence[str], vm_pitch: float, tile_se_to_diff: str, tile_dummy: str,
+                           tiles_flop: Sequence[Mapping[str, Any]], tiles_phasedet: Sequence[Mapping[str, Any]],
+                           tile_specs: Mapping[str, Any], **kwargs: Mapping[str, Any]) -> Mapping[str, Any]:
+        """
+        Passed in kwargs are the same as self.dsn_specs
+
+        Parameters
+        ----------
+        dig_tran_specs : Mapping[str, Any]
+            DigitalTranTB testbench specs
+        sup_values : Mapping[str, Any]
+            The Supply Values
+        c_load : Mapping[str, Any]
+            Load Cap for this block
+        w_min : int
+            The minimum width
+        w_res : int
+            The width resolution
+        t_rf : float
+            The Rise-Fall time of the clocks
+        se2diff_params : Mapping[str, Any]
+            Design Parameters for the SE to Diff used inside this block
+        flop_params : Mapping[str, Any]
+            Layout Parameters for the Strong Arm Flops in the design
+        cin_params : Mapping[str, Any]
+            Cin measurement params
+        meas_specs : Mapping[str, Any]
+            Specs for the phase detector measurement manager
+        sign_off_envs : Sequence[str]
+            The environments used for signoff
+        vm_pitch : float
+            The pitch of the vm layer
+        tile_se_to_diff : str
+            The name of the tile that the SE to Diff is on
+        tile_dummy : str
+            The name of the tile to place dummies on
+        tiles_flop : Sequence[Mapping[str, Any]]
+            A dictionary for each of the flop tiles, containing the key "name" for the name of the tile,
+            and the key flip if the tile should be flipped
+        tiles_phasedet : Sequence[Mapping[str, Any]]
+            A List of dictionaries, containing the key "name" for the name of the tile, and a the key "flip" with the
+            value specifying if the tile should be flipped. `tiles_phasedet` should contain the order for all the tiles
+            used in the phase_det
+        tile_specs : Mapping[str, Any]
+            A dictionary of tile specification data
+        Returns
+        -------
+        ans : Mapping[str, Any]
+            Design summary
+        """
+        # Start by extracting the cap on
+        td_rise, c_clk_rise, c_in = await self.get_flop_td_cin()
+        # Design dummy inverter
+        inv_params = await self.get_inv_params(td_rise)
+        # Design the Single-ended to Diff converter
+        self._se_to_diff_dsn_params['c_load'] = c_clk_rise + c_in
+        dsn = self.new_designer(SingleToDiffDesigner, self._se_to_diff_dsn_params)
+        se2diff_summary = await dsn.async_design(**self._se_to_diff_dsn_params)
+        se2diff_params = se2diff_summary['se_params']
+        se2diff_params.pop('pinfo')
+        se2diff_params['export_pins'] = False
+        # Characterize the se2diff and the strong arm to determine the td_off
+        dut_params = dict(
+            cls_name=PhaseDetector.get_qualified_name(),
+            params=dict(
+                pinfo=self.make_tile_pattern(tiles_phasedet),
+                vm_pitch=vm_pitch,
+                se_params=se2diff_params,
+                flop_params=flop_params,
+                inv_params=inv_params
+            )
+        )
+
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+
+        results = await self.verify_design(dut_params)
+
+        if gen_specs is not None and gen_cell_args is not None:
+            gen_cell_specs = dict(
+                lay_class=STDCellWrapper.get_qualified_name(),
+                cls_name=PhaseDetector.get_qualified_name(),
+                params=dut_params,
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return dict(inv_params=inv_params, c_flop=c_in + c_clk_rise, results=results)
+
+    async def get_inv_params(self, clk_rise: float) -> Tuple[Mapping[str, Any], float, float]:
+        """
+        Parameters
+        ----------
+        clk_rise : float
+            The rise time of the clock input in the Strong arm flop
+
+        Returns
+        -------
+        inv_params : Mapping[str, Any]
+            Parameters for the Dummy Inverter
+        """
+        # Note: care only about rising edge on flop clk = falling edge on inverter input
+        self._inv_dsn_specs['td_fall'] = clk_rise
+        inv_dsn = self.new_designer(InvCapInMatchDesigner, self._inv_dsn_specs)
+        result = await inv_dsn.async_design()
+        inv_params = result['inv_params']
+        self.log(f'inv_params:\n{pprint.pformat(inv_params, width=100)}')
+        return inv_params
+
+    async def get_flop_td_cin(self) -> Tuple[float, float, float]:
+        """
+
+        Returns
+        -------
+        clk_td_rise : float
+            The clk rise time
+        c_clk_rise : float
+            The capacitance on the clock input of the flop with clock rising
+        c_in_avg : float
+            Average capacitance on the inputs of the clock
+        """
+        dut_flop = await self.async_wrapper_dut('FLOP_SA', FlopStrongArm, self._flop_params)
+
+        mm = self.make_mm(CapDelayMatch, self._td_cin_flop_specs)
+        mm_result = await self.async_simulate_mm_obj('c_clk_flop', dut_flop, mm)
+        data = mm_result.data
+        clk_td_fall = data['tf_ref']
+        clk_td_rise = data['tr_ref']
+        c_clk_rise = data['cap_rise']
+
+        mm.specs['in_pin'] = 'inp'
+        mm.commit()
+        mm_result = await self.async_simulate_mm_obj('c_in_flop', dut_flop, mm)
+        data = mm_result.data
+        c_in_rise = data['cap_rise']
+        c_in_fall = data['cap_fall']
+        c_in_avg = (c_in_fall + c_in_rise) / 2
+        self.log(f'flop cap results:\nclk_td_fall={clk_td_fall:.4g}, '
+                 f'clk_td_rise={clk_td_rise:.4g}\n'
+                 f'c_clk_rise={c_clk_rise:.4g}, c_in_fall={c_in_fall:.4g}, '
+                 f'c_in_rise={c_in_rise:.4g}, c_in_avg={c_in_avg}')
+        return clk_td_rise, c_clk_rise, c_in_avg
+
+    async def verify_design(self, dut_params: Mapping[str, Any]) -> Mapping[str, Any]:
+        dut = await self.async_new_dut('phase_det', GenericWrapper, dut_params, flat=True)
+        offset_netlist = Path(*dut.netlist_path.parts[:-1], 'netlist_with_offsets.scs')
+        v_offset_map = add_mismatch_offsets(dut.netlist_path, offset_netlist, self._sim_db._sim.netlist_type)
+        designed_dut_with_offsets = DesignInstance(dut.cell_name, dut.sch_master, dut.lay_master,
+                                                   offset_netlist, dut.cv_info_list)
+        seg_dict: Mapping[str, Any] = dut_params['params']['flop_params']['sa_params']['seg_dict']
+        global_params = get_tech_global_info("aib_ams")
+        a_vt_per_fin = global_params['A_vt_fin_n']
+        seg_in = seg_dict['in']
+        seg_tail = seg_dict['tail']
+        offset_tail = 3*(a_vt_per_fin/seg_tail)**(1/2)
+        offset_in = 3*(a_vt_per_fin/seg_in)**(1/2)
+        strong_arm_offsets = dict(
+            XFLOPD_XSA_XTAIL=-offset_tail,
+            XFLOPU_XSA_XTAIL=-offset_tail,
+            XFLOPD_XSA_XINP=offset_in,
+            XFLOPD_XSA_XINN=-offset_in,
+            XFLOPU_XSA_XINP=offset_in,
+            XFLOPU_XSA_XINN=-offset_in,
+        )
+        for mos_name, voff_name in v_offset_map.items():
+            found = False
+            for base_name, offset in strong_arm_offsets.items():
+                if mos_name.startswith(base_name):
+                    self._phase_det_mm_params['tbm_specs']['sim_params'][voff_name] = offset
+                    found = True
+            if not found:
+                self._phase_det_mm_params['tbm_specs']['sim_params'][voff_name] = 0
+        mm = self.make_mm(PhaseDetMeasManager, self._phase_det_mm_params)
+        results = await self.async_simulate_mm_obj(f'phase_det_timing_with_offset', designed_dut_with_offsets, mm)
+        return results.data
+
+    @staticmethod
+    def _get_default_width(pinfo: MOSBasePlaceInfo) -> Tuple[int, int]:
+        wn, wp = [], []
+        for row_place_info in map(pinfo.get_row_place_info, range(pinfo.num_rows)):
+            w = row_place_info.row_info.width
+            if row_place_info.row_info.row_type is MOSType.nch:
+                wn.append(w)
+            elif row_place_info.row_info.row_type is MOSType.pch:
+                wp.append(w)
+        # In the case that there are multiple NMOS or PMOS rows, this function returns the
+        # most strict constraint. Typically, the width ends up being the same anyway.
+        if len(wn) > 1:
+            wn = [min(wn)]
+        if len(wp) > 1:
+            wp = [min(wp)]
+        return wn[0], wp[0]
+
+    @classmethod
+    def _get_cap_delay_match_mm_params(cls, cap_mm_params: Mapping[str, Any], vdd: float,
+                                       freq: float, trf_in: float, row_info: Dict[str, Any]
+                                       ) -> Dict[str, Any]:
+        pins = ['in', 'out']
+        pwr_domain = {pin: ('VSS', 'VDD') for pin in pins}
+        tbm_specs = cap_mm_params['tbm_specs']
+        tbm_specs['sim_params'].update(dict(
+            t_rst=5 * trf_in,
+            t_rst_rf=trf_in,
+            t_bit=1.0 / freq,
+            t_rf=trf_in,
+        ))
+        tbm_specs['pwr_domain'] = pwr_domain
+        tbm_specs['sup_values'] = dict(VDD=vdd, VSS=0.0)
+
+        try:
+            inv_params_list = cap_mm_params['buf_params']['inv_params']
+            assert len(inv_params_list) == 2
+        except KeyError:
+            inv_params_list = [{}, {}]
+
+        load_list = [dict(pin='out', type='cap', value='c_out')]
+
+        return dict(
+            tbm_specs=tbm_specs,
+            buf_params=cls._get_buf_params(inv_params_list, row_info),
+            search_params=cap_mm_params['search_params'],
+            load_list=load_list
+        )
+
+    @classmethod
+    def _get_phase_det_mm_params(cls, phase_det_mm_params: Mapping[str, Any],
+                                 tbm_specs: Mapping[str, Any],
+                                 strongarm_offset_params: Mapping[str, Any],
+                                 res_timing_err: float, sigma_avt: float,
+                                 row_info: Dict[str, Any]) -> Dict[str, Any]:
+        return dict(
+            clk_pins=['CLKA', 'CLKB'],
+            out_pins=['t_up', 't_down'],
+            res_timing_err=res_timing_err,
+            tbm_specs=tbm_specs,
+            buf_params=cls._get_buf_params([{'seg': 8}, {'seg': 8}], row_info),
+            strongarm_offset_params=strongarm_offset_params,
+            sigma_avt=sigma_avt,
+            **phase_det_mm_params
+        )
+
+    @staticmethod
+    def _get_buf_params(inv_params_list: List[Dict[str, Any]], row_info: Dict[str, Any]):
+        for inv_params in inv_params_list:
+            for var in ['lch', 'w_p', 'w_n', 'th_n', 'th_p']:
+                if var not in inv_params:
+                    inv_params[var] = row_info[var]
+
+        return dict(
+            inv_params=inv_params_list,
+            export_pins=True
+        )
diff --git a/src/aib_ams/design/phase_interp.py b/src/aib_ams/design/phase_interp.py
new file mode 100644
index 0000000..327489b
--- /dev/null
+++ b/src/aib_ams/design/phase_interp.py
@@ -0,0 +1,525 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+from typing import Mapping, Dict, Any, Tuple, Sequence, Optional, cast
+
+import copy
+import pprint
+
+import numpy as np
+
+from aib_ams.layout.delay_line import DelayCellCore
+from bag.concurrent.util import GatherHelper
+from bag.env import get_tech_global_info
+from bag.simulation.cache import DesignInstance
+from bag.simulation.design import DesignerBase
+from bag.util.immutable import ImmutableSortedDict, Param
+from bag.util.search import BinaryIterator
+from bag.layout.util import IPMarginTemplate
+
+from aib_ams.layout.phase_interp import PhaseInterpolatorWithDelay
+from bag3_analog.layout.phase.phase_interp import PhaseInterpolator
+from bag3_digital.measurement.cap.delay_match import CapDelayMatch
+from bag3_liberty.data import parse_cdba_name
+from bag3_testbenches.measurement.data.tran import EdgeType
+from bag3_testbenches.measurement.tran.digital import DigitalTranTB
+
+from xbase.layout.mos.top import GenericWrapper
+
+
+class PhaseInterpDesigner(DesignerBase):
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.global_info = get_tech_global_info('aib_ams')
+        lch = self.global_info['lch_min']
+        w_p = self.global_info['w_minp']
+        w_n = self.global_info['w_minn']
+        th = self.global_info['thresholds'][0]
+        self._tech_dsn_base_params = dict(lch=lch, w_p=w_p, w_n=w_n, th_p=th, th_n=th)
+
+    async def async_design(self, pinfo: Mapping[str, Any], nbits: int,
+                           rtol: float, atol: float, tbit: float, trf: float, cload: float,
+                           mc_params: Param, num_cores: int, target: Mapping[str, Any],
+                           delay_cell_params: Mapping[str, Any], **kwargs: Mapping[str, Any]
+                           ) -> Mapping[str, Any]:
+        td_min = target['td_min']
+        td_max = target['td_max']
+        t_max = target['t_max']
+        td_sigma = target['td_sigma']
+        tristate_seg = kwargs.get('tristate_seg', self.global_info['seg_min'])
+        tristate_stack = kwargs.get('tristate_stack', 1)
+        seg_buf_abs_max = kwargs.get('seg_buf_abs_max', 50)
+        seg_buf_max_override = kwargs.get('seg_buf_max_override', None)
+        seg_buf_min_override = kwargs.get('seg_buf_min_override', None)
+        design_using_signoff = kwargs.get('design_using_signoff', False)
+        mc_corner = kwargs.get('mc_corner', 'tt_25')
+        mc_env_override = kwargs.get("mc_env_override", None)
+        mc_worst_corner = kwargs.get("mc_worst_corner", True)
+        plot_result: bool = kwargs.get('plot_result', False)
+        dsn_monte_carlo: bool = kwargs.get('dsn_monte_carlo', True)
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+
+        # 0. Setup design environments and the testbench manager
+        if design_using_signoff:
+            dsn_envs = self.global_info['signoff_envs']
+            dsn_env_names = dsn_envs['all_corners']['envs']
+            dsn_env_vdds = dsn_envs['all_corners']['vdd']
+        else:
+            dsn_envs = self.global_info['dsn_envs']
+            dsn_env_names = [env for dct in dsn_envs.values() for env in dct['env']]
+            dsn_env_vdds = {e: dsn_envs[c]['vdd'] for c in dsn_envs.keys()
+                            for e in dsn_envs[c]['env']}
+
+        if not mc_worst_corner and not mc_env_override:
+            raise ValueError("If not performing mc on the worst corner, specify mc_env_override!")
+
+        dut_pins = ['a_in', 'b_in', 'intout', 'VDD', 'VSS', f'sp<{nbits - 1}:0>',
+                    f'sn<{nbits - 1}:0>', 'a_in_buf']
+        tbm_dict = {}
+        for dsn_env in dsn_env_names:
+            tbm_specs = self._get_tbm_specs([dsn_env], dict(vdd={dsn_env: dsn_env_vdds[dsn_env]}),
+                                            dut_pins, tbit, trf, cload, nbits, rtol, atol)
+            tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, tbm_specs))
+            tbm_dict[dsn_env] = tbm
+        tbm_params = dict()
+
+        # 1. Setup the base phase interpolator and extract the input cap
+        pwr_domains = dict(b_in=('VSS', 'VDD'), a_in=('VSS', 'VDD'), out=('VSS', 'VDD'))
+        cin_dut_conns = dict(a_in=1)
+        for i in range(nbits):
+            for name, value in zip(['a_en', 'b_en', 'a_enb', 'b_enb'], [1, 0, 0, 1]):
+                cin_dut_conns[f'{name}<{i}>'] = value
+                pwr_domains[f'{name}<{i}>'] = ('VSS', 'VDD')
+        gen_params = dict(
+            cls_name=PhaseInterpolator.get_qualified_name(),
+            params=dict(
+                pinfo=pinfo,
+                unit_params={'seg': tristate_seg, 'stack_p': tristate_stack,
+                             'stack_n': tristate_stack},
+                inv_params={'seg': 2, 'stack_p': 1, 'stack_n': 1},
+                nbits=nbits,
+                draw_sub=True,
+                export_outb=True,
+                abut_tristates=True,
+            )
+        )
+        pi_in_cap = await self._get_input_cap(gen_params, 'b_in', cload, cin_dut_conns, pwr_domains,
+                                              [dict(pin='out', type='cap', value='c_out')],
+                                              vdd=dsn_env_vdds['tt_25'], sim_envs=['tt_25'])
+        # 2. Setup the base delay cell and extract it's input cap
+        pin_names = ['bk1', 'ci_p', 'co_p', 'in_p', 'out_p']
+        pwr_domains = {pin_name: ('VSS', 'VDD') for pin_name in pin_names}
+        cin_dut_conns = dict(bk1=1, ci_p=0)
+        load_list = [dict(pin='out_p', type='cap', value='c_out'),
+                     dict(pin='co_p', type='cap', value='c_out')]
+        gen_params = dict(
+            cls_name=DelayCellCore.get_qualified_name(),
+            params=dict(pinfo=pinfo, stand_alone=True, **delay_cell_params)
+        )
+        dc_in_cap = await self._get_input_cap(gen_params, 'ci_p', cload, cin_dut_conns, pwr_domains,
+                                              load_list, vdd=dsn_env_vdds['tt_25'],
+                                              sim_envs=['tt_25'])
+
+        # 3. Size the delay cell to be able to drive the phase interpolator
+        dc_up_scale_factor = int(round(pi_in_cap / dc_in_cap))
+        delay_cell_params['seg_dict']['in'] *= dc_up_scale_factor
+        delay_cell_params['seg_dict']['out'] *= dc_up_scale_factor
+        delay_cell_params['seg_dict']['sr'] *= dc_up_scale_factor
+        nand_seg = delay_cell_params['seg_dict']['out'] * 2
+
+        inv_in_cap = self.global_info['cin_inv']['cin_per_seg']
+        inv_seg = int(round(np.sqrt(dc_in_cap * pi_in_cap) / inv_in_cap))
+
+        # 4. Upsize the buffer inverter on the output
+        self.log('-' * 80)
+        if seg_buf_min_override:
+            self.log(f"Minimum Segments Overridden to {seg_buf_min_override}")
+            min_seg_buf = seg_buf_min_override
+        else:
+            self.log('Find the min size for all the codes to be positive')
+            seg_buf_min_iter = BinaryIterator(2, None, 2)
+            while seg_buf_min_iter.has_next():
+                _seg_buf = seg_buf_min_iter.get_next()
+                dut_params = self._update_dut_params(pinfo, nbits, tristate_seg, seg_buf=_seg_buf,
+                                                     seg_inv=inv_seg, seg_nand=nand_seg,
+                                                     num_cores=num_cores,
+                                                     dc_params=delay_cell_params)
+                results = await self._measure_times(dsn_env_names, tbm_dict, dut_params, tbm_params,
+                                                    tbit, nbits, name=f'sim_min_{_seg_buf}')
+                # find min and max delay step
+                tstep_min = results['min_step']
+                tstep_max = results['max_step']
+                self.log(f"Got min delay {tstep_min}, max delay {tstep_max}, with "
+                         f"{_seg_buf} segments")
+                if tstep_min < 0:
+                    seg_buf_min_iter.up()
+                else:
+                    seg_buf_min_iter.save()
+                    seg_buf_min_iter.down()
+            min_seg_buf = seg_buf_min_iter.get_last_save()
+
+        self.log('-' * 80)
+        if seg_buf_max_override:
+            self.log(f'Maximum Segments Overridden to {seg_buf_max_override}')
+            max_seg_buf = seg_buf_max_override
+        else:
+            self.log('Now find the maximum size for all the codes to be positive')
+            seg_buf_max_iter = BinaryIterator(10, None, 2)
+            max_reached = False
+            while seg_buf_max_iter.has_next():
+                _seg_buf = seg_buf_max_iter.get_next()
+                dut_params = self._update_dut_params(pinfo, nbits, tristate_seg, seg_buf=_seg_buf,
+                                                     seg_inv=inv_seg, seg_nand=nand_seg,
+                                                     num_cores=num_cores,
+                                                     dc_params=delay_cell_params)
+                results = await self._measure_times(dsn_env_names, tbm_dict, dut_params, tbm_params,
+                                                    tbit, nbits, name=f'sim_max_{_seg_buf}')
+                # find min and max delay step
+                tstep_min = results['min_step']
+                tstep_max = results['max_step']
+                self.log(f"Got min delay {tstep_min}, max delay {tstep_max}, with "
+                         f"{_seg_buf} segments")
+                if tstep_min < 0:
+                    seg_buf_max_iter.down()
+                elif _seg_buf > seg_buf_abs_max:
+                    max_reached = True
+                    break
+                else:
+                    seg_buf_max_iter.save()
+                    seg_buf_max_iter.up()
+            max_seg_buf = seg_buf_max_iter.get_last_save() if not max_reached else seg_buf_abs_max
+        self.log('-' * 80)
+        self.log(f'Minimum Buffer segments to keep positive delays: {min_seg_buf}')
+        self.log(f'Maximum Buffer segments to keep positive delays: {max_seg_buf}')
+
+        seg_buf_bin_iter = BinaryIterator(min_seg_buf, max_seg_buf, 2)
+        while seg_buf_bin_iter.has_next():
+            _seg_buf = seg_buf_bin_iter.get_next()
+            dut_params = self._update_dut_params(pinfo, nbits, tristate_seg, seg_buf=_seg_buf,
+                                                 seg_inv=inv_seg, seg_nand=nand_seg,
+                                                 num_cores=num_cores, dc_params=delay_cell_params)
+            results = await self._measure_times(dsn_env_names, tbm_dict, dut_params, tbm_params,
+                                                tbit, nbits, 'sim_size')
+            tdelay_max = results['max_dly']
+            tstep_min = results['min_step']
+            tstep_max = results['max_step']
+            if tdelay_max > t_max and tstep_min > td_min and tstep_max < td_max:
+                # delay constraint violated, linearity constraint met
+                seg_buf_bin_iter.down()
+            elif tdelay_max < t_max and (tstep_min < td_min or tstep_max > td_max):
+                # delay constraint met, linearity constraint violated
+                seg_buf_bin_iter.up()
+            elif tdelay_max < t_max and tstep_min > td_min and tstep_max < td_max:
+                # both constraints met
+                seg_buf_bin_iter.save_info((dut_params, results))
+                seg_buf_bin_iter.down()
+            else:
+                self.error('Both delay and linearity constraints violated, please relax specs.')
+
+        seg_buf_final = seg_buf_bin_iter.get_last_save()
+        if not seg_buf_final:
+            self.error("Design failed!, unable to meet linearity specs within range of inv sizes")
+        self.log(f'Final output buffer size is {seg_buf_final}, before Monte Carlo sim.')
+        dut_params, results = seg_buf_bin_iter.get_last_save_info()
+
+        if dsn_monte_carlo:
+            # 5. Monte Carlo simulations
+            mc_tbm_dict = {}
+            if mc_worst_corner:
+                mc_envs = [mc_corner]
+                mc_vdd = dict(vdd={mc_corner: dsn_env_vdds[mc_corner]})
+                mc_tbm_specs = self._get_tbm_specs([mc_corner], mc_vdd, dut_pins, tbit, trf, cload,
+                                                   nbits, rtol, atol)
+                mc_tbm_specs['monte_carlo_params'] = mc_params
+                mc_tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, mc_tbm_specs))
+                mc_tbm_dict[mc_corner] = mc_tbm
+            else:
+                # TODO
+                mc_envs = ...
+                ...
+
+            dut_params = self._update_dut_params(pinfo, nbits, tristate_seg, seg_buf=seg_buf_final,
+                                                 seg_inv=inv_seg, seg_nand=nand_seg,
+                                                 num_cores=num_cores, dc_params=delay_cell_params)
+
+            mc_results = await self._measure_times(mc_envs, mc_tbm_dict, dut_params, tbm_params,
+                                                   tbit, nbits, name='sim_mc_pre')
+            mc_factor, sigma_max = self._get_mc_factor(mc_results, td_sigma)
+            self.log(f'Max std. dev. is {sigma_max}')
+            self.log(f'Upscale everything by {mc_factor}')
+            self.log('-' * 80)
+
+            # 6. Final verification
+            seg_unit_final = int(np.ceil(tristate_seg * mc_factor))
+            seg_unit_final += seg_unit_final & 1  # layout constraint
+            seg_buf_final = int(np.ceil(seg_buf_final * mc_factor))
+            seg_buf_final += seg_buf_final & 1  # layout constraint
+            delay_cell_params_scale = copy.deepcopy(delay_cell_params)
+            for key in delay_cell_params['seg_dict']:
+                delay_cell_params_scale['seg_dict'][key] = int(
+                    np.ceil(delay_cell_params['seg_dict'][key] * mc_factor))
+            nand_seg = int(np.ceil(nand_seg * mc_factor))
+            inv_seg = int(np.ceil(inv_seg * mc_factor))
+            dut_params = self._update_dut_params(pinfo, nbits, seg_unit_final,
+                                                 seg_buf=seg_buf_final, seg_inv=inv_seg,
+                                                 seg_nand=nand_seg, num_cores=num_cores,
+                                                 dc_params=delay_cell_params_scale)
+
+            results = await self._measure_times(dsn_env_names, tbm_dict, dut_params, tbm_params,
+                                                tbit, nbits, name='sim_sized')
+            mc_results = await self._measure_times(mc_envs, mc_tbm_dict, dut_params, tbm_params,
+                                                   tbit, nbits, name='sim_mc_post')
+            _, sigma_max = self._get_mc_factor(mc_results, td_sigma)
+            self.log(f'Final Sigma: {sigma_max}')
+            self.log('-' * 80)
+        else:
+            seg_unit_final = tristate_seg
+            delay_cell_params_scale = delay_cell_params
+
+        self.log('-' * 80)
+        self.log(f'dsn_envs: {dsn_env_names}')
+        self.log(f'final results:\n{pprint.pformat(results, width=100)}')
+
+        if plot_result:
+            from matplotlib import pyplot as plt
+            plt.figure(1)
+            ax: Any = plt.subplot(2, 1, 1)
+            xvec = np.arange(0, results['tdr_step'].shape[1])
+            for idx, sim_env in enumerate(dsn_env_names):
+                tdr = results['tdrs'][idx, :-1].flatten()
+                plt.step(xvec, tdr, where='mid', label=sim_env)
+            ax.legend()
+            ax.set_ylabel('Rise Delay (s)')
+            ax = plt.subplot(2, 1, 2)
+            for idx, sim_env in enumerate(dsn_env_names):
+                tdr_step = results['tdr_step'][idx, :].flatten()
+                ax.scatter(xvec, tdr_step, label=sim_env)
+            ax.set_ylim(ymin=td_min, ymax=td_max)
+            ax.legend()
+            ax.set_ylabel('Rise Delay Step (s)')
+            ax.set_xlabel('Code')
+            plt.show()
+
+        if gen_specs is not None and gen_cell_args is not None:
+            gen_cell_specs = dict(
+                lay_class=IPMarginTemplate.get_qualified_name(),
+                params=dict(
+                    cls_name=GenericWrapper.get_qualified_name(),
+                    params=dict(
+                        cls_name=PhaseInterpolatorWithDelay.get_qualified_name(),
+                        params=dut_params,
+                    ),
+                ),
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return dict(
+            seg_unit=seg_unit_final,
+            seg_buf=seg_buf_final,
+            seg_dc=delay_cell_params_scale['seg_dict'],
+            nand_seg=nand_seg,
+            inv_seg=inv_seg,
+        )
+
+    @staticmethod
+    def _get_mc_factor(results: Dict[str, Any], td_sigma: float) -> Tuple[float, float]:
+        tdr_step = results['tdr_step']
+        tdf_step = results['tdf_step']
+        tdr_dc = results['tdrs_dc']
+        tdf_dc = results['tdfs_dc']
+        var_r = np.var(tdr_step, axis=-1)
+        var_f = np.var(tdf_step, axis=-1)
+        # Correct the variance of the last code
+        var_dcr = np.var(tdr_dc, axis=-1)
+        var_dcf = np.var(tdf_dc, axis=-1)
+        # TODO: figure out a better implementation for the following nested loop
+        cov_r = np.zeros(var_dcr.shape)
+        cov_f = np.zeros(var_dcf.shape)
+        for cor_idx in range(tdr_dc.shape[0]):
+            for trf_idx in range(tdr_dc.shape[1]):
+                cov_r = np.cov(tdr_step[cor_idx, -1, trf_idx], tdr_dc[cor_idx, trf_idx])[0, 1]
+                cov_f = np.cov(tdf_step[cor_idx, -1, trf_idx], tdf_dc[cor_idx, trf_idx])[0, 1]
+        var_r[:, -1] += var_dcr - 2 * cov_r
+        var_f[:, -1] += var_dcf - 2 * cov_f
+        sigma_r = np.sqrt(var_r)
+        sigma_f = np.sqrt(var_f)
+        sigma_max = max(np.max(sigma_r), np.max(sigma_f))
+        mc_upscale_factor = (sigma_max / td_sigma) ** 2
+        return max(1, mc_upscale_factor), sigma_max
+
+    async def _measure_times(self, sim_envs: Sequence[str], tbm_dict: Dict[str, DigitalTranTB],
+                             dut_params: Param, tbm_params: Mapping[str, Any], tbit: float,
+                             nbits: int, name: str) -> Dict[str, Any]:
+        gen_params = dict(
+            cls_name=PhaseInterpolatorWithDelay.get_qualified_name(),
+            params=dut_params,
+        )
+        dut = await self.async_new_dut('phase_interp', GenericWrapper, gen_params)
+
+        helper = GatherHelper()
+        for corner in sim_envs:
+            helper.append(self._measure_times_at_corner(tbm_dict[corner], dut, tbm_params, tbit,
+                                                        nbits, f'{name}_{corner}'))
+        results = await helper.gather_err()
+
+        dct = {k: [] for k in ['tdrs', 'tdfs', 'tdrs_dc', 'tdfs_dc', 'tdr_step', 'tdf_step']}
+        max_steps, min_steps, max_dly = [], [], []
+        for idx, corner in enumerate(sim_envs):
+            tdr, tdf, tdr_dc, tdf_dc = results[idx]
+            max_dly.append(max(np.min(tdr), np.min(tdf)))
+            tdr = np.vstack((tdr, (tdr[0] + tdr_dc)[None, ...]))
+            tdf = np.vstack((tdf, (tdf[0] + tdf_dc)[None, ...]))
+            tdr_step = np.diff(tdr, axis=0)
+            tdf_step = np.diff(tdf, axis=0)
+            dct['tdr_step'].append(tdr_step)
+            dct['tdf_step'].append(tdf_step)
+            dct['tdrs'].append(tdr)
+            dct['tdfs'].append(tdf)
+            dct['tdrs_dc'].append(tdr_dc)
+            dct['tdfs_dc'].append(tdf_dc)
+            max_steps.append(max(np.max(tdr_step), np.max(tdf_step)))
+            min_steps.append(min(np.min(tdr_step), np.min(tdf_step)))
+        for k in ['tdrs', 'tdfs', 'tdrs_dc', 'tdfs_dc', 'tdr_step', 'tdf_step']:
+            dct[k] = np.array(dct[k])
+        max_idx = cast(int, np.argmax(np.array(max_steps)))
+        min_idx = cast(int, np.argmin(np.array(min_steps)))
+        dct['max_corner'] = sim_envs[max_idx]
+        dct['min_corner'] = sim_envs[min_idx]
+        dct['max_step'] = max_steps[max_idx]
+        dct['min_step'] = min_steps[min_idx]
+        dct['max_dly'] = max(max_dly)
+        return dct
+
+    async def _measure_times_at_corner(self, tbm: DigitalTranTB, dut: DesignInstance,
+                                       tbm_params: Mapping[str, Any], tbit: float, nbits: int,
+                                       name: str
+                                       ) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:
+        sim_results = await self.async_simulate_tbm_obj(name, dut, tbm, tbm_params)
+        tdrs, tdfs, tdrs_dc, tdfs_dc = [], [], [], []
+        for i in range(0, nbits + 1):
+            tdrs.append(tbm.calc_delay(sim_results.data, 'a_in', 'intout', in_edge=EdgeType.RISE,
+                                       out_edge=EdgeType.RISE, t_start=(2 * i + 1 + 0.25) * tbit,
+                                       t_stop=(2 * i + 1 + 1.25) * tbit))
+            tdfs.append(tbm.calc_delay(sim_results.data, 'a_in', 'intout', in_edge=EdgeType.FALL,
+                                       out_edge=EdgeType.FALL, t_start=(2 * i + 1 + 0.5) * tbit,
+                                       t_stop=(2 * i + 1 + 2) * tbit))
+            tdrs_dc.append(tbm.calc_delay(sim_results.data, 'a_in_buf', 'b_in',
+                                          in_edge=EdgeType.RISE, out_edge=EdgeType.RISE,
+                                          t_start=(2 * i + 1 + 0.25) * tbit,
+                                          t_stop=(2 * i + 1 + 1.5) * tbit))
+            tdfs_dc.append(tbm.calc_delay(sim_results.data, 'a_in_buf', 'b_in',
+                                          in_edge=EdgeType.FALL, out_edge=EdgeType.FALL,
+                                          t_start=(2 * i + 1 + 0.25) * tbit,
+                                          t_stop=(2 * i + 1 + 1.5) * tbit))
+        return np.array(tdrs), np.array(tdfs), np.mean(tdrs_dc, axis=0), np.mean(tdfs_dc, axis=0)
+
+    async def _get_input_cap(self, gen_params: Mapping[str, Any], in_pin: str, cload: float,
+                             pin_values: Mapping[str, int],
+                             pwr_domain: Mapping[str, Tuple[str, str]],
+                             load_list: Sequence[Mapping[str, str]],
+                             sim_envs: Sequence[str], vdd: float,
+                             seg_inv_1: int = 2, seg_inv_2: int = 8) -> float:
+        # First setup base inverter params from technology specs
+        inv_params_base = self._tech_dsn_base_params
+        bparams = dict(inv_params=[dict(seg=seg_inv_1, **inv_params_base),
+                                   dict(seg=seg_inv_2, **inv_params_base)],
+                       export_pins=True)
+
+        # Set the tbm_specs
+        sim_params = dict(t_bit=1.0e-9, t_rst=0, t_rst_rf=0, t_rf=self.global_info['trf_nom'],
+                          c_out=cload)
+        sup_values = dict(VDD=vdd, VSS=0.0)
+        tbm_specs = dict(sim_envs=sim_envs, sim_params=sim_params, pwr_domain=pwr_domain,
+                         sup_values=sup_values, pin_values=pin_values, reset_list=[], diff_list=[],
+                         thres_lo=0.1, thres_hi=0.9, rtol=1.0e-9, atol=1.0e-22,
+                         tran_options=dict(maxstep=1.0e-12, errpreset='conservative'))
+
+        # Set the meas params
+        search_params = dict(low=1.0e-18, high=None, step=1.0e-16, tol=1.0e-17, max_err=1.0e-9,
+                             overhead_factor=5)
+        meas_params = dict(tbm_specs=tbm_specs,
+                           in_pin=in_pin,
+                           buf_params=bparams,
+                           search_params=search_params,
+                           load_list=load_list)
+
+        dut = await self.async_new_dut('cin_inv_dut', GenericWrapper, gen_params)
+        mm = self.make_mm(CapDelayMatch, meas_params)
+        mm_results = await self.async_simulate_mm_obj(f'sim_obj', dut, mm)
+        data = mm_results.data
+        return (data['cap_rise'] + data['cap_fall']) / 2
+
+    @staticmethod
+    def _get_tbm_specs(sim_envs: Sequence[str], env_params: Mapping[str, Any],
+                       dut_pins: Sequence[str], tbit: float, trf: float, cload: float, nbits: int,
+                       rtol: float, atol: float
+                       ) -> Dict[str, Any]:
+        tsim = tbit * (2 * nbits + 2) + tbit / 2
+        pulse_list = [dict(pin='a_in', tper=tbit, tpw=tbit / 2, trf=trf, td=tbit / 2)]
+        for i in range(nbits):
+            pulse_list.append(dict(pin=f'sn<{i}>', tper=2 * tsim, tpw=tsim, trf=trf,
+                                   td=(2 * i + 2) * tbit + tbit / 4, pos=False))
+            pulse_list.append(dict(pin=f'sp<{i}>', tper=2 * tsim, tpw=tsim, trf=trf,
+                                   td=(2 * i + 2) * tbit + tbit / 4, pos=True))
+
+        pin_values = {}
+        load_list = [dict(pin='intout', type='cap', value=cload)]
+        pwr_domains = {parse_cdba_name(pin)[0]: ('VSS', 'VDD') for pin in dut_pins}
+        sim_params = dict(
+            t_sim=tsim,
+            t_rst=0,
+            t_rst_rf=trf,
+        )
+        sup_values = dict(VSS=0, VDD=env_params['vdd'])
+        return dict(
+            sim_params=sim_params,
+            dut_pins=dut_pins,
+            pulse_list=pulse_list,
+            load_list=load_list,
+            pwr_domain=pwr_domains,
+            sup_values=sup_values,
+            pin_values=pin_values,
+            reset_list=[],
+            diff_list=[],
+            rtol=rtol,
+            atol=atol,
+            sim_envs=sim_envs,
+            env_params=env_params,
+            save_outputs=['a_in', 'a_in_buf', 'intout', 'b_in']
+        )
+
+    @staticmethod
+    def _update_dut_params(pinfo: Mapping[str, Any], nbits: int, seg_unit: int, seg_buf: int,
+                           seg_nand: int, seg_inv: int, num_cores: int,
+                           dc_params: Mapping[str, Any]) -> Param:
+        return ImmutableSortedDict(dict(
+            pinfo=pinfo,
+            pi_params=dict(
+                unit_params={'seg': seg_unit, 'stack_p': 1, 'stack_n': 1},
+                inv_params={'seg': seg_buf, 'stack_p': 1, 'stack_n': 1},
+                abut_tristates=True,
+            ),
+            dc_params=dc_params,
+            inv_params=dict(seg=seg_inv),
+            nand_params=dict(seg=seg_nand),
+            num_core=num_cores,
+            nbits=nbits,
+            export_dc_out=True,
+            export_dc_in=True,
+            draw_sub=True,
+            # export_outb=True,
+        ))
diff --git a/src/aib_ams/design/rxanlg.py b/src/aib_ams/design/rxanlg.py
new file mode 100644
index 0000000..c7302db
--- /dev/null
+++ b/src/aib_ams/design/rxanlg.py
@@ -0,0 +1,337 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any, Mapping, Optional, Type
+
+import math
+
+from bag.layout.template import TemplateBase
+from bag.io.file import write_yaml
+
+from bag3_digital.design.base import DigitalDesigner
+from bag3_digital.design.lvl_shift_de import LvlShiftDEDesigner
+from bag3_digital.design.lvl_shift_ctrl import LvlShiftCtrlDesigner
+
+from bag.layout.util import IPMarginTemplate
+
+from .se_to_diff_en import SingleToDiffEnableDesigner
+from ..layout.rxanlg import RXAnalog
+
+from bag3_digital.layout.stdcells.util import STDCellWrapper
+
+from xbase.layout.mos.top import GenericWrapper
+
+class RXAnalogDesigner(DigitalDesigner):
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+
+        self._por_lv_specs: Optional[Dict[str, Any]] = None
+        self._data_lv_specs: Optional[Dict[str, Any]] = None
+        self._se_en_specs: Optional[Dict[str, Any]] = None
+        self._ctrl_lv_specs: Optional[Dict[str, Any]] = None
+
+        super().__init__(*args, **kwargs)
+
+    @classmethod
+    def get_dut_lay_class(cls) -> Optional[Type[TemplateBase]]:
+        return RXAnalog
+
+    def commit(self) -> None:
+        """Updates object design parameters
+        """
+        super().commit()
+
+        specs = self.dsn_specs
+        sup_values: Mapping[str, Any] = specs['sup_values']
+        data_lv_results: Optional[Mapping[str, Any]] = specs.get('data_lv_results', None)
+        se_en_results: Optional[Mapping[str, Any]] = specs.get('se_en_results', None)
+        ctrl_lv_results: Optional[Mapping[str, Any]] = specs.get('ctrl_lv_results', None)
+        por_lv_results: Optional[Mapping[str, Any]] = specs.get('por_lv_results', None)
+
+        if data_lv_results is None:
+            sup_values_data_lv = dict(
+                VDDI=sup_values['VDDIO'], VDD=sup_values['VDDCore'], VSS=sup_values['VSS']
+            )
+            self._data_lv_specs = dict(**specs['data_lv_specs'])
+            for key in ['c_load', 'w_min', 'w_res', 'ridx_n', 'ridx_p', 'c_unit_p',
+                        'c_unit_n', 'search_step', 'buf_config', 'search_params', 'tile_name',
+                        'tile_specs', 'dig_tran_specs']:
+                self._data_lv_specs[key] = specs[key]
+            self._data_lv_specs['sup_values'] = sup_values_data_lv
+            self._data_lv_specs['lv_params'] = lv_params = dict(**self._data_lv_specs['lv_params'])
+            lv_params['has_rst'] = lv_params['in_upper'] = lv_params['dual_output'] = True
+            lv_params['stack_p'] = 2
+        else:
+            self._data_lv_specs = None
+
+        if se_en_results is None:
+            sup_values_se_en = dict(VDD=sup_values['VDDIO'], VSS=sup_values['VSS'])
+            self._se_en_specs = dict(**specs['se_en_specs'])
+            for key in ['w_min', 'w_res', 'ridx_n', 'ridx_p', 'c_unit_p',
+                        'c_unit_n', 'max_iter', 'search_step', 'buf_config', 'search_params',
+                        'sign_off_envs', 'tile_name', 'tile_specs', 'dig_tran_specs']:
+                self._se_en_specs[key] = specs[key]
+            self._se_en_specs['sup_values'] = sup_values_se_en
+        else:
+            self._se_en_specs = None
+
+        if ctrl_lv_results is None:
+            sup_values_ctrl_lv = dict(
+                VDDI=sup_values['VDDCore'], VDD=sup_values['VDDIO'], VSS=sup_values['VSS']
+            )
+            self._ctrl_lv_specs = dict(**specs['ctrl_lv_specs'])
+            for key in ['buf_config', 'search_params', 'tile_name', 'tile_specs',
+                        'dig_tran_specs']:
+                self._ctrl_lv_specs[key] = specs[key]
+            self._ctrl_lv_specs['sup_values'] = sup_values_ctrl_lv
+            self._ctrl_lv_specs['has_rst'] = self._ctrl_lv_specs['is_ctrl'] = True
+            self._ctrl_lv_specs['dual_output'] = True
+        else:
+            self._ctrl_lv_specs = None
+
+        if por_lv_results is None:
+            sup_values_por_lv = dict(
+                VDDI=sup_values['VDDCore'], VDD=sup_values['VDDIO'], VSS=sup_values['VSS']
+            )
+            self._por_lv_specs = dict(**specs['por_lv_specs'])
+            for key in ['w_min', 'w_res', 'ridx_n', 'ridx_p', 'c_unit_p',
+                        'c_unit_n', 'search_step', 'buf_config', 'search_params', 'tile_name',
+                        'tile_specs', 'dig_tran_specs']:
+                self._por_lv_specs[key] = specs[key]
+            self._por_lv_specs['sup_values'] = sup_values_por_lv
+            self._por_lv_specs['lv_params'] = dict(
+                has_rst=False,
+                in_upper=True,
+                dual_output=True,
+                stack_p=1,
+            )
+        else:
+            self._por_lv_specs = None
+
+    async def async_design(self, **kwargs: Any) -> Mapping[str, Any]:
+        """This function extracts design parameters and calls sub-hierarchy design functions.
+        It passes parameters between the results of each sub-hierarchy design to accomplish
+        logical-effort based design. If layout parameters are passed in through the design
+        specs, they will be returned instead of running the design procedures.
+
+        Passed in kwargs are the same as self.dsn_specs.
+
+        Parameters
+        ----------
+        kwargs: Any
+            data_lv_specs: Mapping[str, Any]
+                Data Level Shifter design parameters
+            se_en_specs: Mapping[str, Any]
+                Single Ended to Differential design parameters
+            ctrl_lv_specs: Mapping[str, Any]
+                Control / Enable Level Shifters design parameters
+            por_lv_specs: Mapping[str, Any]
+                POR Level Shifter design parameters
+            c_load: float
+                Target load capacitance on odat
+            c_odat_async: float
+                Target load capacitance on odat_async
+            c_por_vccl_tx: float
+                Target load capacitance from the TX on por_vccl
+            fanout_odat_async: float
+                Target fanout for odat_async output inverter
+            w_n_inv: Union[int, float]
+                NMOS width for POR Level Shifter input buffer
+            w_p_inv: Union[int, float]
+                PMOS width for POR Level Shifter input buffer
+            yaml_file: str
+                Output file location to write designed generator parameters
+            data_lv_results: Optional[Mapping[str, Any]]
+                If provided, return these generator parameters instead of running the design
+                procedures
+            se_en_results: Optional[Mapping[str, Any]]
+                If provided, return these generator parameters instead of running the design
+                procedures
+            ctrl_lv_results: Optional[Mapping[str, Any]]
+                If provided, return these generator parameters instead of running the design
+                procedures
+            por_lv_results: Optional[Mapping[str, Any]]
+                If provided, return these generator parameters instead of running the design
+                procedures
+
+            Below are global specs shared and passed to each of the designers
+            w_min: Union[int, float]
+                Minimum width
+            w_res: Union[int, float]
+                Width resolution
+            c_unit_n: float
+                Unit NMOS transistor capacitance for w=1, seg=1
+            c_unit_p: float
+                Unit PMOS transistor capacitance for w=1, seg=1
+            dig_tran_specs: Mapping[str, Any]
+                DigitalTranTB testbench specs
+            search_params: Mapping[str, Any]
+                Parameters used for capacitor size binary search
+            search_step: int
+                Binary search step size
+            max_iter: int
+                Maximum allowed iterations to search for converge in binary search
+            buf_config: Mapping[str, Any]
+                Buffer parameters, used in DigitalTranTB and capacitor size search
+            sign_off_envs: Sequence[str]
+                Corners used for sign off
+            sup_values: Mapping[str, Any]
+                Per-corner supply values
+            tile_name: str
+                Tile name for layout.
+            tile_specs: Mapping[str, Any]
+                Tile specifications for layout.
+            ridx_n: int
+                NMOS transistor row
+            ridx_p: int
+                PMOS transistor Row
+
+        Returns
+        -------
+        ans: Mapping[str, Any]
+            Design summary
+        """
+        specs = self.dsn_specs
+        yaml_file: str = specs.get('yaml_file', '')
+
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+
+        data_lv_results = await self.design_data_lv()
+        se_en_results = await self.design_se_en(data_lv_results['c_in'])
+
+        c_en = max(se_en_results['c_en_se'], se_en_results['c_en_match'])
+        ctrl_lv_results = await self.design_ctrl_lv(c_en)
+
+        c_por_vccl = max(ctrl_lv_results['c_rst_out'], ctrl_lv_results['c_rst_casc']) * 2
+        c_por_vccl += self.dsn_specs['c_por_vccl_tx']
+
+        por_lv_results = await self.design_por_lv(c_por_vccl)
+
+        c_por_core = max(data_lv_results['c_rst_out'], data_lv_results['c_rst_casc']) * 2
+        c_por_core += por_lv_results['c_in']
+        buf_por_lv_params = self.get_buf_params(c_por_core)
+
+        inv_params = self.get_inv_params(self.dsn_specs['c_odat_async'],
+                                         self.dsn_specs['fanout_odat_async'])
+
+        se_params = se_en_results['se_params']
+        match_params = se_en_results['match_params']
+        data_lv_params = data_lv_results['lv_params']
+        por_lv_params = por_lv_results['lv_params']
+
+        for table in [se_params, match_params, data_lv_params, por_lv_params]:
+            table.pop('pinfo', None)
+            table.pop('ridx_n', None)
+            table.pop('ridx_p', None)
+
+        rx_params = dict(
+            se_params=se_params,
+            match_params=match_params,
+            inv_params=inv_params,
+            data_lv_params=data_lv_params,
+            ctrl_lv_params=ctrl_lv_results['dut_params']['lv_params'],
+            por_lv_params=por_lv_params,
+            buf_ctrl_lv_params=ctrl_lv_results['dut_params']['in_buf_params'],
+            buf_por_lv_params=buf_por_lv_params,
+        )
+        ans = dict(
+            rx_params=rx_params,
+        )
+
+        if yaml_file:
+            write_yaml(self.work_dir / yaml_file, ans)
+        if gen_specs is not None and gen_cell_args is not None:
+            pinfo = dict(
+                name=specs['tile_name'],
+                tile_specs=specs['tile_specs'],
+            )
+            rx_params['pinfo'] = pinfo
+            gen_cell_specs = dict(
+                lay_class=IPMarginTemplate.get_qualified_name(),
+                params=dict(
+                    cls_name=GenericWrapper.get_qualified_name(),
+                    params=dict(
+                        cls_name=RXAnalog.get_qualified_name(),
+                        params=rx_params,
+                    ),
+                ),
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return ans
+
+    async def design_data_lv(self) -> Mapping[str, Any]:
+        if self._data_lv_specs is None:
+            return self.dsn_specs['data_lv_results']
+
+        dsn = self.new_designer(LvlShiftDEDesigner, self._data_lv_specs)
+        return await dsn.async_design()
+
+    async def design_se_en(self, c_load: float) -> Mapping[str, Any]:
+        if self._se_en_specs is None:
+            return self.dsn_specs['se_en_results']
+
+        self._se_en_specs['c_load'] = c_load
+        dsn = self.new_designer(SingleToDiffEnableDesigner, self._se_en_specs)
+        return await dsn.async_design()
+
+    async def design_ctrl_lv(self, c_load: float) -> Mapping[str, Any]:
+        if self._ctrl_lv_specs is None:
+            return self.dsn_specs['ctrl_lv_results']
+
+        self._ctrl_lv_specs['cload'] = c_load
+        dsn = self.new_designer(LvlShiftCtrlDesigner, self._ctrl_lv_specs)
+        return await dsn.async_design(**dsn.dsn_specs)
+
+    async def design_por_lv(self, c_load: float) -> Mapping[str, Any]:
+        if self._por_lv_specs is None:
+            return self.dsn_specs['por_lv_results']
+
+        self._por_lv_specs['c_load'] = c_load
+        dsn = self.new_designer(LvlShiftDEDesigner, self._por_lv_specs)
+        return await dsn.async_design()
+
+    def get_buf_params(self, c_load: float) -> Mapping[str, Any]:
+        specs = self.dsn_specs
+        c_unit_p: float = specs['c_unit_p']
+        c_unit_n: float = specs['c_unit_n']
+
+        if self._por_lv_specs is not None:
+            fanout = self._por_lv_specs['fanout_inv']
+        else:
+            fanout = min(10.0, specs['fanout_odat_async'] * 2)
+
+        inv1_params = self.get_inv_params(c_load, fanout)
+        c_inv1 = (c_unit_p * inv1_params['seg_p'] * inv1_params['w_p'] +
+                  c_unit_n * inv1_params['seg_n'] * inv1_params['w_n'])
+        inv0_params = self.get_inv_params(c_inv1 + c_load, fanout)
+        return dict(
+            segp_list=[inv0_params['seg_p'], inv1_params['seg_p']],
+            segn_list=[inv0_params['seg_n'], inv1_params['seg_n']],
+            w_p=[inv0_params['w_p'], inv1_params['w_p']],
+            w_n=[inv0_params['w_n'], inv1_params['w_n']],
+        )
+
+    def get_inv_params(self, c_load: float, fanout: float) -> Mapping[str, Any]:
+        specs = self.dsn_specs
+        c_unit_p: float = specs['c_unit_p']
+        c_unit_n: float = specs['c_unit_n']
+        w_p: int = specs['w_p_inv']
+        w_n: int = specs['w_n_inv']
+
+        c_unit = c_unit_p * w_p + c_unit_n
+        seg = max(1, int(math.ceil(c_load / c_unit / fanout)))
+        return dict(seg_p=seg, seg_n=seg, w_p=w_p, w_n=w_n)
diff --git a/src/aib_ams/design/se_to_diff_en.py b/src/aib_ams/design/se_to_diff_en.py
new file mode 100644
index 0000000..bb2731e
--- /dev/null
+++ b/src/aib_ams/design/se_to_diff_en.py
@@ -0,0 +1,575 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from __future__ import annotations
+
+from typing import Dict, Any, Mapping, Optional, Tuple, Sequence
+
+import math
+import pprint
+from dataclasses import dataclass
+
+from bag.concurrent.util import GatherHelper
+from bag.simulation.cache import DesignInstance
+
+from xbase.layout.mos.base import MOSBasePlaceInfo
+
+from bag3_testbenches.measurement.digital.comb import CombLogicTimingMM
+
+from bag3_digital.measurement.cap.delay_match import CapDelayMatch
+from bag3_digital.design.base import DigitalDesigner, BinSearchSegWidth
+from bag3_digital.design.stdcells.se_to_diff import SingleToDiffDesigner
+
+from ..layout.se_to_diff import SingleToDiffEnable, DiffBufferEnable
+
+
+@dataclass(frozen=True, eq=True)
+class DelayData:
+    outp: Tuple[float, float]
+    outn: Tuple[float, float]
+
+    def __repr__(self) -> str:
+        return (f'{self.__class__.__name__}(outp=({self.outp[0]:.4g}, {self.outp[1]:.4g}), '
+                f'outn=({self.outn[0]:.4g}, {self.outn[1]:.4g}), '
+                f'td_fall={self.td_fall_avg}, td_rise={self.td_rise_avg})')
+
+    @property
+    def td_rise_avg(self) -> float:
+        return (self.outp[1] + self.outn[0]) / 2
+
+    @property
+    def td_fall_avg(self) -> float:
+        return (self.outp[0] + self.outn[1]) / 2
+
+
+class DelayBalanceSearch(BinSearchSegWidth):
+    def __init__(self, dsn: SingleToDiffEnableDesigner, dut_params: Dict[str, Any], size_p: bool,
+                 w_list: Sequence[int], err_targ: float, search_step: int = 1) -> None:
+        super().__init__(w_list, err_targ, search_step=search_step)
+
+        self._dsn = dsn
+        self._params = dut_params
+        self._size_p = size_p
+
+    def get_bin_search_info(self, data: DelayData) -> Tuple[float, bool]:
+        val = data.td_rise_avg - data.td_fall_avg
+        return val, (val > 0) ^ self._size_p
+
+    def get_error(self, data: DelayData) -> float:
+        td_rise_avg = data.td_rise_avg
+        td_fall_avg = data.td_fall_avg
+        td_avg = (td_rise_avg + td_fall_avg) / 2
+        return abs(td_rise_avg - td_fall_avg) / td_avg
+
+    def set_size(self, seg: int, w: int) -> None:
+        nand_params = self._params['nand_params']
+        if self._size_p:
+            nand_params['seg_p'] = seg
+            nand_params['w_p'] = w
+        else:
+            nand_params['seg_n'] = seg
+            nand_params['w_n'] = w
+
+    async def get_data(self, seg: int, w: int) -> DelayData:
+        self.set_size(seg, w)
+        return await self._dsn.get_delays(self._params, False)
+
+
+class DelayMatchSearch(BinSearchSegWidth):
+    def __init__(self, dsn: SingleToDiffEnableDesigner, dut_params: Dict[str, Any],
+                 td_targ: float, size_p: bool, size_nand: bool, w_list: Sequence[int],
+                 err_targ: float, search_step: int = 1) -> None:
+        super().__init__(w_list, err_targ, search_step=search_step)
+
+        self._dsn = dsn
+        self._params = dut_params
+        self._size_p = size_p
+        self._size_nand = size_nand
+        self._td_targ = td_targ
+
+    def get_bin_search_val(self, data: DelayData) -> float:
+        td_data = data.outp if self._size_nand else data.outn
+        td_cur = td_data[0] if self._size_p else td_data[1]
+        return self._td_targ - td_cur
+
+    def get_bin_search_info(self, data: DelayData) -> Tuple[float, bool]:
+        val = self.get_bin_search_val(data)
+        return val, val < 0
+
+    def get_error(self, data: DelayData) -> float:
+        val = self.get_bin_search_val(data)
+        return abs(val) / self._td_targ
+
+    def set_size(self, seg: int, w: int) -> None:
+        table = self._params['nand_params' if self._size_nand else 'nor_params']
+        if self._size_p:
+            table['seg_p'] = seg
+            table['w_p'] = w
+        else:
+            table['seg_n'] = seg
+            table['w_n'] = w
+
+    async def get_data(self, seg: int, w: int) -> DelayData:
+        self.set_size(seg, w)
+        return await self._dsn.get_delays(self._params, True)
+
+    async def get_seg_width_wrapper(self, data: DelayData) -> DelayData:
+        table = self._params['nand_params' if self._size_nand else 'nor_params']
+        if self._size_p:
+            seg = table['seg_p']
+            w = table['w_p']
+        else:
+            seg = table['seg_n']
+            w = table['w_n']
+
+        up = self.get_bin_search_info(data)[1]
+        if up:
+            seg_min = seg
+            seg_max = None
+            data_min = data
+            data_max = None
+        else:
+            seg_min = 1
+            seg_max = seg
+            data_min = None
+            data_max = data
+
+        return (await self.get_seg_width(w, seg_min, seg_max, data_min, data_max))[0]
+
+
+class SingleToDiffEnableDesigner(DigitalDesigner):
+    """Designs se_to_diff_en and se_to_diff_match.
+
+    1) Size the se_to_diff_en NAND for fanout. Adjust P/N ratio for equal rise/fall delay.
+    2) copy inverter chain parameters to se_to_diff_match, size input NAND for se_to_diff_match
+       for equal rise/fall delay to se_to_diff.
+    3) size input NOR for se_to_diff_match for equal rise/fall delay.  Copy to se_to_diff_en.
+    4) Sign off
+    """
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        self._pinfo: Optional[MOSBasePlaceInfo] = None
+        self._se_dsn_specs: Optional[Dict[str, Any]] = None
+        self._td_se_en_specs: Dict[str, Any] = {}
+        self._td_match_specs: Dict[str, Any] = {}
+        self._cin_se_en_specs: Dict[str, Any] = {}
+        self._cin_match_specs: Dict[str, Any] = {}
+        self._w_p_list: Sequence[int] = []
+        self._w_n_list: Sequence[int] = []
+
+        super().__init__(*args, **kwargs)
+
+    def commit(self) -> None:
+        super().commit()
+
+        specs = self.dsn_specs
+        ridx_n: int = specs['ridx_n']
+        ridx_p: int = specs['ridx_p']
+        w_min: int = specs['w_min']
+        w_res: int = specs['w_res']
+        tile_name: str = specs['tile_name']
+        c_load: float = specs['c_load']
+        buf_config: Mapping[str, Any] = specs['buf_config']
+        search_params: Mapping[str, Any] = specs['search_params']
+        se_to_diff_results: Optional[Mapping[str, Any]] = specs.get('se_to_diff_results', None)
+
+        if se_to_diff_results is None:
+            self._se_dsn_specs = dict(**specs['se_to_diff_specs'])
+            for key in ['c_load', 'max_iter', 'search_step', 'w_min', 'w_res', 'ridx_n',
+                        'buf_config', 'search_params', 'sign_off_envs', 'tile_name', 'tile_specs',
+                        'dig_tran_specs', 'sup_values']:
+                self._se_dsn_specs[key] = specs[key]
+        else:
+            self._se_dsn_specs = None
+
+        self._pinfo = self.get_tile(tile_name)
+        w_p_max = self._pinfo.get_row_place_info(ridx_p).row_info.width
+        w_n_max = self._pinfo.get_row_place_info(ridx_n).row_info.width
+        self._w_p_list = list(range(w_min, w_p_max + 1, w_res))
+        self._w_n_list = list(range(w_min, w_n_max + 1, w_res))
+
+        pwr_tup = ('VSS', 'VDD')
+        supply_map = dict(VDD='VDD', VSS='VSS')
+        se_en_pwr_domain = {p_: pwr_tup for p_ in ['in', 'outp', 'outn', 'en', 'enb']}
+        se_en_diff_list = [(['outp'], ['outn']), (['en'], ['enb'])]
+        pin_values = dict(en=1)
+        se_en_tbm_specs = self.get_dig_tran_specs(se_en_pwr_domain, supply_map,
+                                                  diff_list=se_en_diff_list,
+                                                  pin_values=pin_values)
+        se_en_tbm_specs['sim_params'] = se_en_sim_params = dict(**se_en_tbm_specs['sim_params'])
+        se_en_sim_params['c_load'] = c_load
+        self._td_se_en_specs = dict(
+            in_pin='in',
+            out_pin='outp',
+            tbm_specs=se_en_tbm_specs,
+            out_invert=False,
+            add_src_res=False,
+        )
+
+        self._cin_se_en_specs = dict(
+            in_pin='en',
+            buf_config=dict(**buf_config),
+            search_params=search_params,
+            tbm_specs=se_en_tbm_specs,
+            load_list=[dict(pin='outp', type='cap', value='c_load')],
+        )
+
+        match_pwr_domain = {p_: pwr_tup for p_ in ['inp', 'inn', 'outp', 'outn', 'en', 'enb']}
+        match_diff_list = [(['outp'], ['outn']), (['en'], ['enb']), (['inp'], ['inn'])]
+        pin_values = dict(en=1)
+        match_tbm_specs = self.get_dig_tran_specs(match_pwr_domain, supply_map,
+                                                  diff_list=match_diff_list,
+                                                  pin_values=pin_values)
+        match_tbm_specs['sim_params'] = match_sim_params = dict(**match_tbm_specs['sim_params'])
+        match_sim_params['c_load'] = c_load
+
+        self._td_match_specs = dict(
+            in_pin='inp',
+            out_pin='outp',
+            tbm_specs=match_tbm_specs,
+            out_invert=False,
+            add_src_res=False,
+        )
+
+        self._cin_match_specs = dict(
+            in_pin='en',
+            buf_config=dict(**buf_config),
+            search_params=search_params,
+            tbm_specs=match_tbm_specs,
+            load_list=[dict(pin='outp', type='cap', value='c_load')],
+        )
+
+    async def async_design(self, **kwargs: Any) -> Mapping[str, Any]:
+        """
+        Passed in kwargs are the same as self.dsn_specs.
+
+        Parameters
+        ----------
+        kwargs: Any
+            se_to_diff_specs: Mapping[str, Any]
+                Single Ended to Differential design parameters
+            nand_init_params: Mapping[str, Any]
+                Initial NAND generator parameters
+            c_load: float
+                Target load capacitance
+            err_targ: float
+                Target error tolerance, for matching NAND rise and fall times
+            se_to_diff_results: Optional[Mapping[str, Any]]
+                If provided, return these generator parameters instead of running the design
+                procedures
+            Below are global specs shared and passed to each of the designers
+            w_min: Union[int, float]
+                Minimum width
+            w_res: Union[int, float]
+                Width resolution
+            c_unit_n: float
+                Unit NMOS transistor capacitance for w=1, seg=1
+            c_unit_p: float
+                Unit PMOS transistor capacitance for w=1, seg=1
+            dig_tran_specs: Mapping[str, Any]
+                DigitalTranTB testbench specs
+            search_params: Mapping[str, Any]
+                Parameters used for capacitor size binary search
+            search_step: int
+                Binary search step size
+            max_iter: int
+                Maximum allowed iterations to search for converge in binary search
+            buf_config: Mapping[str, Any]
+                Buffer parameters, used in DigitalTranTB and capacitor size search
+            sign_off_envs: Sequence[str]
+                Corners used for sign off
+            sup_values: Mapping[str, Any]
+                Per-corner supply values
+            tile_name: str
+                Name of the layout tile to use
+            tile_specs: Mapping[str, Any]
+                Tile Info Specs
+            ridx_n: int
+                NMOS transistor row
+            ridx_p: int
+                PMOS transistor Row
+
+        Returns
+        -------
+        ans: Mapping[str, Any]
+            Design summary
+        """
+        se_en_params = await self.get_init_se_en_params()
+        match_params, td_se_en = await self.size_se_en_nand(se_en_params)
+        await self.size_match(match_params, td_se_en, True)
+        await self.size_match(match_params, td_se_en, False)
+
+        se_en_params['nor_params'] = match_params['nor_params']
+
+        td_data = await self.sign_off(se_en_params, match_params)
+        c_en_se = await self.get_enable_cin(se_en_params, False)
+        c_en_match = await self.get_enable_cin(match_params, True)
+
+        return dict(se_params=se_en_params, match_params=match_params, td_data=td_data,
+                    c_en_se=c_en_se, c_en_match=c_en_match)
+
+    async def get_init_se_en_params(self) -> Dict[str, Any]:
+        specs = self.dsn_specs
+        nand_init_params: Mapping[str, Any] = specs['nand_init_params']
+        ridx_p: int = specs['ridx_p']
+        ridx_n: int = specs['ridx_n']
+
+        w_p: int = nand_init_params['w_p']
+        w_n: int = nand_init_params['w_n']
+        fanout: float = nand_init_params['fanout']
+        seg_min: int = nand_init_params['seg_min']
+
+        if self._se_dsn_specs is None:
+            se_results = specs['se_to_diff_results']
+        else:
+            se_dsn = self.new_designer(SingleToDiffDesigner, self._se_dsn_specs)
+            se_results = await se_dsn.async_design()
+
+        c_load = se_results['c_in']
+        se_params = se_results['se_params']
+        se_params.pop('pinfo', None)
+        se_params.pop('export_pins', None)
+
+        c_unit = self._get_c_in_guess(1, 1, w_p, w_n)
+        seg = max(seg_min, int(math.ceil(c_load / fanout / c_unit)))
+
+        nand_params = dict(seg_p=seg, seg_n=seg, w_p=w_p, w_n=w_n)
+        dut_params = dict(
+            pinfo=self._pinfo,
+            nand_params=nand_params,
+            nor_params=nand_params.copy(),
+            core_params=se_params,
+            ridx_p=ridx_p,
+            ridx_n=ridx_n,
+        )
+
+        return dut_params
+
+    async def get_enable_cin(self, dut_params: Mapping[str, Any], match: bool) -> float:
+        if match:
+            mm_specs = self._cin_match_specs
+        else:
+            mm_specs = self._cin_se_en_specs
+
+        table = dut_params['nand_params']
+        cin_guess = self._get_c_in_guess(table['seg_p'], table['seg_n'], table['w_p'], table['w_n'])
+        mm_specs['in_pin'] = 'en'
+        mm_specs['buf_config']['cin_guess'] = cin_guess
+        mm = self.make_mm(CapDelayMatch, mm_specs)
+        dut = await self.get_dut(dut_params, match)
+        en_data = (await self.async_simulate_mm_obj(f'c_en_{dut.cache_name}', dut, mm)).data
+        en_cap_fall = en_data['cap_fall']
+        en_cap_rise = en_data['cap_rise']
+        en_cap_avg = (en_cap_fall + en_cap_rise) / 2
+
+        table = dut_params['nor_params']
+        cin_guess = self._get_c_in_guess(table['seg_p'], table['seg_n'], table['w_p'], table['w_n'])
+        mm.specs['in_pin'] = 'enb'
+        mm_specs['buf_config']['cin_guess'] = cin_guess
+        mm.commit()
+        enb_data = (await self.async_simulate_mm_obj(f'c_enb_{dut.cache_name}', dut, mm)).data
+        enb_cap_fall = enb_data['cap_fall']
+        enb_cap_rise = enb_data['cap_rise']
+        enb_cap_avg = (enb_cap_fall + enb_cap_rise) / 2
+
+        self.log(f'en_cap_fall={en_cap_fall:.4g}, en_cap_rise={en_cap_rise:.4g}, '
+                 f'en_cap_avg={en_cap_avg:.4g}')
+        self.log(f'enb_cap_fall={enb_cap_fall:.4g}, enb_cap_rise={enb_cap_rise:.4g}, '
+                 f'enb_cap_avg={enb_cap_avg:.4g}')
+
+        ans = max(en_cap_avg, enb_cap_avg)
+        return ans
+
+    async def size_se_en_nand(self, dut_params: Dict[str, Any]) -> Tuple[Dict[str, Any], DelayData]:
+        specs = self.dsn_specs
+        err_targ: float = specs['err_targ']
+        search_step: int = specs['search_step']
+
+        td = await self.get_delays(dut_params, False)
+
+        td_rise = td.td_rise_avg
+        td_fall = td.td_fall_avg
+        nand_params = dut_params['nand_params']
+        if td_rise < td_fall:
+            size_p = True
+            w_list = self._w_p_list
+            w = nand_params['w_p']
+            seg = nand_params['seg_p']
+        else:
+            size_p = False
+            w_list = self._w_n_list
+            w = nand_params['w_n']
+            seg = nand_params['seg_n']
+        search = DelayBalanceSearch(self, dut_params, size_p, w_list, err_targ, search_step)
+
+        td = (await search.get_seg_width(w, seg, None, td, None))[0]
+        self.log('se_en nand design done.  se_en params:\n'
+                 f'{pprint.pformat(dut_params, width=100)}\n'
+                 f'td_outp={td.outp}\ntd_outn={td.outn}')
+
+        # create se_to_diff_match parameters
+        dut = await self.get_dut(dut_params, False)
+        se_en_master = dut.lay_master.core
+        seg_p_list = []
+        seg_n_list = []
+        w_p_list = []
+        w_n_list = []
+        for table in dut_params['core_params']['invn_params_list']:
+            seg_p_list.append(table['seg_p'])
+            seg_n_list.append(table['seg_n'])
+            w_p_list.append(table['w_p'])
+            w_n_list.append(table['w_n'])
+        match_params = dict(
+            pinfo=self._pinfo,
+            nand_params=dut_params['nand_params'].copy(),
+            nor_params=dut_params['nor_params'].copy(),
+            core_params=dict(
+                segp_list=seg_p_list,
+                segn_list=seg_n_list,
+                w_p=w_p_list,
+                w_n=w_n_list,
+            ),
+            ridx_p=dut_params['ridx_p'],
+            ridx_n=dut_params['ridx_n'],
+            en_ncol_min=se_en_master.en_ncol,
+            buf_col_list=se_en_master.buf_col_list,
+        )
+        return match_params, td
+
+    async def size_match(self, dut_params: Dict[str, Any], td_targ: DelayData, size_nand: bool
+                         ) -> None:
+        specs = self.dsn_specs
+        err_targ: float = specs['err_targ']
+        search_step: int = specs['search_step']
+        max_iter: int = specs['max_iter']
+
+        td = await self.get_delays(dut_params, True)
+
+        modified = False
+        rise_search = DelayMatchSearch(self, dut_params, td_targ.td_rise_avg, False, size_nand,
+                                       self._w_n_list, err_targ, search_step)
+        fall_search = DelayMatchSearch(self, dut_params, td_targ.td_fall_avg, True, size_nand,
+                                       self._w_p_list, err_targ, search_step)
+        for iter_idx in range(max_iter):
+            modified = False
+            # match rise delay
+            if rise_search.get_error(td) > err_targ:
+                td = await rise_search.get_seg_width_wrapper(td)
+                modified = True
+
+            # match fall delay
+            if fall_search.get_error(td) > err_targ:
+                td = await fall_search.get_seg_width_wrapper(td)
+                modified = True
+
+            if not modified:
+                break
+
+        if modified:
+            rise_err = rise_search.get_error(td)
+            fall_err = fall_search.get_error(td)
+            raise ValueError('Cannot match both rise and fall delay, '
+                             f'rise_err={rise_err:.4g}, fall_err={fall_err:.4g}')
+
+        self.log(f'match sizing done, size_nand={size_nand} design done.  match params:\n'
+                 f'{pprint.pformat(dut_params, width=100)}\n'
+                 f'td_outp={td.outp}\ntd_outn={td.outn}')
+
+    async def sign_off(self, se_params: Mapping[str, Any], match_params: Mapping[str, Any]
+                       ) -> Mapping[str, Any]:
+        sign_off_envs: Sequence[str] = self.dsn_specs['sign_off_envs']
+
+        gatherer = GatherHelper()
+        dut_se = await self.get_dut(se_params, False)
+        dut_match = await self.get_dut(match_params, True)
+        for sim_env in sign_off_envs:
+            gatherer.append(self.get_delays_dut(dut_se, False, sim_env))
+            gatherer.append(self.get_delays_dut(dut_match, True, sim_env))
+
+        result_list = await gatherer.gather_err()
+
+        ans = {}
+        for idx, sim_env in enumerate(sign_off_envs):
+            se_data = result_list[2 * idx]
+            match_data = result_list[2 * idx + 1]
+            ans[sim_env] = cur_result = {}
+            for name, td_data in [('se_en', se_data), ('match', match_data)]:
+                td_outp = td_data.outp
+                td_outn = td_data.outn
+                td_rise_avg = td_data.td_rise_avg
+                td_fall_avg = td_data.td_fall_avg
+                err_rise = abs(td_outp[1] - td_outn[0]) / 2 / td_rise_avg
+                err_fall = abs(td_outp[0] - td_outn[1]) / 2 / td_fall_avg
+                cur_result[name] = dict(
+                    td_outp=td_outp,
+                    td_outn=td_outn,
+                    td_avg=(td_fall_avg, td_rise_avg),
+                    td_err=(err_fall, err_rise),
+                )
+
+        return ans
+
+    async def get_dut(self, dut_params: Mapping[str, Any], match: bool) -> DesignInstance:
+        if match:
+            dut_cls = DiffBufferEnable
+            log_name = 'match'
+            impl_cell = 'SE_TO_DIFF_MATCH'
+        else:
+            dut_cls = SingleToDiffEnable
+            log_name = 'se_en'
+            impl_cell = 'SE_TO_DIFF_EN'
+
+        self.log(f'{log_name} params:\n{pprint.pformat(dut_params, width=100)}')
+        return await self.async_wrapper_dut(impl_cell, dut_cls, dut_params)
+
+    async def get_delays(self, dut_params: Mapping[str, Any], match: bool, sim_env: str = ''
+                         ) -> DelayData:
+        dut = await self.get_dut(dut_params, match)
+        return await self.get_delays_dut(dut, match, sim_env=sim_env)
+
+    async def get_delays_dut(self, dut: DesignInstance, match: bool, sim_env: str = ''
+                             ) -> DelayData:
+        if match:
+            log_name = 'match'
+            mm_specs = self._td_match_specs
+        else:
+            log_name = 'se_en'
+            mm_specs = self._td_se_en_specs
+
+        if sim_env:
+            mm_specs = mm_specs.copy()
+            mm_specs['tbm_specs'] = tbm_specs = mm_specs['tbm_specs'].copy()
+            tbm_specs['sim_envs'] = [sim_env]
+
+        mm = self.make_mm(CombLogicTimingMM, mm_specs)
+        sim_id = f'td_{dut.cache_name}'
+        if sim_env:
+            sim_id = sim_id + f'_{sim_env}'
+        data = (await self.async_simulate_mm_obj(sim_id, dut, mm)).data
+        outp_data = data['timing_data']['outp']
+        outn_data = data['timing_data']['outn']
+        ans = DelayData((outp_data['cell_fall'].item(), outp_data['cell_rise'].item()),
+                        (outn_data['cell_fall'].item(), outn_data['cell_rise'].item()))
+        self.log(f'{log_name} delays:\ntd_outp={ans.outp}\ntd_outp={ans.outn}\n'
+                 f'td_fall_avg={ans.td_fall_avg:.4g}, td_rise_avg={ans.td_rise_avg:.4g}')
+
+        return ans
+
+    def _get_c_in_guess(self, seg_p: int, seg_n: int, w_p: int, w_n: int) -> float:
+        specs = self.dsn_specs
+        c_unit_p: float = specs['c_unit_p']
+        c_unit_n: float = specs['c_unit_n']
+
+        return seg_p * w_p * c_unit_p + seg_n * w_n * c_unit_n
diff --git a/src/aib_ams/design/txanlg.py b/src/aib_ams/design/txanlg.py
new file mode 100755
index 0000000..d26c8e8
--- /dev/null
+++ b/src/aib_ams/design/txanlg.py
@@ -0,0 +1,664 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Mapping, Dict, Any, Optional, cast, Type
+
+import numpy as np
+
+from bag.layout.template import TemplateBase
+from bag.simulation.design import DesignerBase
+from bag.concurrent.util import GatherHelper
+from bag.env import get_tech_global_info
+
+from xbase.layout.mos.placement.data import TileInfoTable
+
+from bag3_testbenches.measurement.tran.digital import DigitalTranTB
+from bag3_testbenches.measurement.data.tran import EdgeType
+
+from bag3_digital.design.lvl_shift import LvlShiftDesigner
+from bag3_digital.layout.stdcells.util import STDCellWrapper
+from bag3_digital.measurement.cap.delay_match import CapDelayMatch
+
+from .output_driver import OutputDriverDesigner
+from ..layout.txanlg import TXAnalog
+
+
+class TXAnalogCoreDesigner(DesignerBase):
+    """ Design the TX Analog Cell """
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        DesignerBase.__init__(self, *args, **kwargs)
+        self.dsn_tech_info = get_tech_global_info('aib_ams')
+
+    @classmethod
+    def get_dut_lay_class(cls) -> Optional[Type[TemplateBase]]:
+        return TXAnalog
+
+    async def async_design(self,
+                           num_units: int,
+                           num_units_nom: int,
+                           num_units_min: int,
+                           r_targ: float,
+                           r_min_weak: float,
+                           c_ext: float,
+                           freq: float,
+                           trf_max: float,
+                           trf_in: float,
+                           trst: float,
+                           k_ratio_ctrl: float,
+                           k_ratio_data: float,
+                           rel_err: float,
+                           del_err: float,
+                           td_max: float,
+                           stack_max: int,
+                           tile_name: str,
+                           tile_specs: Mapping[str, Any],
+                           dig_tbm_specs: Dict[str, Any],
+                           dig_buf_params: Dict[str, Any],
+                           cap_in_search_params: Dict[str, Any],
+                           res_mm_specs: Dict[str, Any],
+                           ridx_p: int = 1,
+                           ridx_n: int = 1,
+                           tran_options: Optional[Mapping[str, Any]] = None,
+                           inv_input_cap_meas_seg: Optional[int] = 16,
+                           sim_options: Optional[Mapping[str, Any]] = None,
+                           mc_params: Optional[Dict[str, Any]] = None,
+                           mc_corner: Optional[str] = '',
+                           specs_yaml_fname: Optional[str] = 'txanlg_specs.yaml',
+                           **kwargs: Any
+                           ) -> Mapping[str, Any]:
+
+        """This function runs top level design on the TX.
+        1) Call OutputDriverDesigner to design driver
+        2) Use CapDelayMatch to determine output driver input capacitance
+        3) Design data and control level shifters
+        4) Sign off
+
+        Parameters
+        ----------
+        num_units: int
+            Max. number of units.
+        num_units_nom: int
+            Number of units used in nominal case.
+        num_units_min:
+            Min. number of units used.
+        r_targ: float
+            Target nominal (strong) output resistance.
+        r_min_weak: float
+            Target (weak) output resistance.
+        c_ext: float
+            Nominal Loading Cap.
+        freq: float
+            The data frequency.
+        trf_max: float
+            Max. rise/fall time requirement.
+        trf_in: float
+            Rise/fall time at input.
+        trst: float
+            Reset signal arrival time compared to data edge.
+        k_ratio_ctrl: float
+            The strength ratio of nmos to pmos in control signal level shifters.
+        k_ratio_data: float
+            The strength ratio of nmos to pmos in data signal level shifters.
+        rel_err: float
+            Output resistance error tolerance, used in DriverPullUpDownDesigner
+        del_err: float
+            Delay mismatch tolerance, used in DriverUnitCellDesigner for sizing NAND + NOR
+        td_max: float
+            Max. delay on data path.
+        stack_max: int
+            Max. number of stacks possible for pull up / pull down driver
+        tile_name: str
+            Tile name for layout.
+        tile_specs: Mapping[str, Any]
+            Tile specifications for layout.
+        dig_tbm_specs: Mapping[str, Any]
+            DigitalTranTB params
+        dig_buf_params: Mapping[str, Any]
+            Digital buffer params
+        cap_in_search_params: Mapping[str, Any]
+            Search parameters for finding cin of blocks
+        res_mm_specs: Mapping[str, Any]
+            Specs for DriverPullUpDownMM, used in DriverPullUpDownDesigner
+        ridx_n: int
+            NMOS transistor row
+        ridx_p: int
+            PMOS transistor row
+        inv_input_cap_meas_seg: Optional[int]
+            When determining inverter input capacitance, use this size inverter as reference
+        tran_options: Optional[Mapping[str, Any]]
+            Additional transient simulation options dictionary, used in DriverPullUpDownDesigner
+        sim_options: Optional[Mapping[str, Any]]
+            Simulator-specific simulation options
+        mc_params: Optional[Dict[str, Any]]
+            Monte Carlo simulation parameters
+        mc_corner: Optional[str]
+            Corner to run Monte Carlo simulations
+        specs_yaml_fname:
+            Output file location to write designed generator parameters
+
+        Returns
+        -------
+        summary: Mapping[str, Any]
+            Design summary
+
+        """
+
+        # Get and set max widths of final drivers from tech defaults; set this in tile info
+        tech_info = self.dsn_tech_info
+        w_p = tech_info['w_maxp']
+        w_n = tech_info['w_maxn']
+        if 'lch' not in tile_specs['arr_info']:
+            tile_specs['arr_info']['lch'] = tech_info['lch_min']
+        tile_specs['place_info'][tile_name]['row_specs'][0]['width'] = w_n
+        tile_specs['place_info'][tile_name]['row_specs'][1]['width'] = w_p
+        tinfo_table = TileInfoTable.make_tiles(self.grid, tile_specs)
+        pinfo = tinfo_table[tile_name]
+
+        # Design the TX Output Driver and get its nominal delay
+        driver_design_specs = dict(
+            num_units=num_units, num_units_nom=num_units_nom, num_units_min=num_units_min,
+            r_targ=r_targ, r_min_weak=r_min_weak, c_ext=c_ext, trf_max=trf_max,
+            stack_max=stack_max, freq=freq, trf_in=trf_in, rel_err=rel_err,
+            del_err=del_err, tile_name=tile_name, tile_specs=tile_specs,
+            tran_options=tran_options, res_mm_specs=res_mm_specs)
+        driver_designer = OutputDriverDesigner(self._root_dir, self._sim_db, self._dsn_specs)
+        driver_designer.set_dsn_specs(driver_design_specs)
+        driver_summary = await driver_designer.async_design(**driver_design_specs)
+        print('-------')
+        print('Driver design complete.')
+        print(driver_summary)
+
+        td_driver = np.max([driver_summary['tdr'], driver_summary['tdf']])
+        td_lv_shift = td_max - np.max(td_driver)
+        print('Required level shift delay is: ', td_lv_shift)
+        if td_lv_shift < 0:
+            raise ValueError("Output driver delay exceeds maximum allowed for entire circuit.")
+
+        # Calculate the input cap of a 1 segment inverter (Required for lvlshifters)
+        # sim_env_params = tech_info['dsn_envs']['center']
+        sim_env_params = tech_info['dsn_envs']['slow_io']
+        vdd_out = sim_env_params['vddio']
+        dig_tbm_specs['sim_envs'] = sim_env_params['env']
+        inv_input_cap = await self._get_inv_input_cap(pinfo, vdd_out,
+                                                      inv_input_cap_meas_seg,
+                                                      dig_tbm_specs, dig_buf_params,
+                                                      cap_in_search_params)
+
+        inv_input_cap_per_seg = inv_input_cap / inv_input_cap_meas_seg
+        print(f'Inverter input capacitance per segment is {inv_input_cap_per_seg}')
+        input_cap_per_fin = inv_input_cap_per_seg / (dig_buf_params['inv_params'][0]['w_p'] +
+                                                     dig_buf_params['inv_params'][0]['w_n'])
+
+        # Get input cap of all driver pins
+        driver_cdict = await self.get_driver_cin(driver_summary, vdd_out, c_ext,
+                                                 cap_in_search_params,
+                                                 dig_buf_params, dig_tbm_specs, num_units)
+        print(f'Driver input capacitance is {driver_cdict["data"]}')
+
+        # Design level shifters
+        extra_lv_params = kwargs.get('extra_lv_params', {})
+        lv_params = dict(trf_in=trf_in, tile_specs=tile_specs, k_ratio_ctrl=k_ratio_ctrl,
+                         k_ratio_data=k_ratio_data, tile_name=tile_name,
+                         inv_input_cap_per_seg=inv_input_cap_per_seg,
+                         inv_input_cap_per_fin=input_cap_per_fin, has_rst=True, **extra_lv_params)
+        lvshift_summary = {}
+        for key, cload in driver_cdict.items():
+            # td_lv_shift will be ignored in ctrl level shifters and max_fanout in tech_info will
+            # be used as a design objective
+            summ = await self._iter_dsn_lvshift(cload, td_lv_shift, is_ctrl=(key == 'ctrl'),
+                                                dual_output=(key == 'ctrl'), **lv_params)
+            lvshift_summary[key] = summ
+
+        summary = dict(
+            driver=driver_summary,
+            data_lvshift=lvshift_summary['data'],
+            ctrl_lvshift=lvshift_summary['ctrl']
+        )
+
+        lay_params = self.get_layout_params(summary, pinfo)
+        dut = await self.async_new_dut('aib_txanlg', STDCellWrapper, lay_params)
+        print("=" * 80)
+        print("TX: Running signoff...")
+        await self.signoff_dut(dut, c_ext, freq, trf_in, trst, td_max, trf_max,
+                               mc_params=mc_params, mc_corner=mc_corner)
+
+        self.write_out_specs_yaml(summary, specs_yaml_fname)
+
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+
+
+        if gen_specs is not None and gen_cell_args is not None:
+            gen_cell_specs = dict(
+                lay_class=STDCellWrapper.get_qualified_name(),
+                params=dict(
+                    cls_name=TXAnalog.get_qualified_name(),
+                    params=lay_params,
+                ),
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return summary
+
+    def write_out_specs_yaml(self, summary_in: Dict[str, Any], yaml_fname: str) -> None:
+        from bag.io.file import write_yaml
+
+        dict_to_write = summary_in.copy()
+        self.prep_lvshift_dict(dict_to_write, 'ctrl_lvshift')
+        self.prep_lvshift_dict(dict_to_write, 'data_lvshift')
+        self.prep_driver_dict(dict_to_write, 'driver')
+
+        write_yaml(yaml_fname, dict_to_write)
+        self.log(f'Wrote final layout specifications to {yaml_fname}.')
+
+    @staticmethod
+    def prep_driver_dict(dict_to_write: Dict[str, Any], drvname: str) -> None:
+        TXAnalogCoreDesigner.prep_dicts_common_params(dict_to_write, drvname)
+        dict_to_write[drvname].pop('duty_err')
+        dict_to_write[drvname].pop('tdf')
+        dict_to_write[drvname].pop('tdr')
+        dict_to_write[drvname].pop('trf_worst')
+
+    @staticmethod
+    def prep_lvshift_dict(dict_to_write: Dict[str, Any], lvname: str) -> None:
+        TXAnalogCoreDesigner.prep_dicts_common_params(dict_to_write, lvname)
+        dict_to_write[lvname]['dut_params'].pop('pwr_gnd_list')
+        dict_to_write[lvname].pop('tdf')
+        dict_to_write[lvname].pop('tdr')
+        dict_to_write[lvname].pop('tint')
+        dict_to_write[lvname].pop('worst_var')
+
+    @staticmethod
+    def prep_dicts_common_params(dict_to_write, subblock_name: str) -> None:
+        dict_to_write[subblock_name]['dut_params'].pop('draw_taps')
+        dict_to_write[subblock_name]['dut_params']['params'].pop('pinfo')
+
+    @staticmethod
+    def get_layout_params(summary_dict, pinfo):
+        driver_params = summary_dict['driver']['dut_params']['params']
+        data_lvshift_params = summary_dict['data_lvshift']['dut_params']['params']
+        ctrl_lvshift_params = summary_dict['ctrl_lvshift']['dut_params']['params']
+        lay_params = dict(
+            cls_name=TXAnalog.get_qualified_name(),
+            draw_taps=False,
+            params=dict(
+                pinfo=pinfo,
+                drv_params=dict(
+                    pupd_params=driver_params['pupd_params'],
+                    unit_params=driver_params['unit_params'],
+                ),
+                data_lv_params=data_lvshift_params['lv_params'],
+                ctrl_lv_params=ctrl_lvshift_params['lv_params'],
+                buf_ctrl_lv_params=ctrl_lvshift_params['in_buf_params'],
+                buf_data_lv_params=data_lvshift_params['in_buf_params'],
+            )
+        )
+        return lay_params
+
+    @staticmethod
+    def get_tbm_specs(c_ext, freq, trf, trst, vdd_core, vdd_io, sim_envs, sim_options=None):
+        tbm_specs = dict(
+            dut_pins=['din', 'indrv_buf<1:0>', 'ipdrv_buf<1:0>', 'itx_en_buf', 'por_vccl',
+                      'porb_vccl', 'weak_pulldownen', 'weak_pullupenb', 'txpadout', 'VDDCore',
+                      'VDDIO', 'VSS'],
+            pulse_list=[dict(pin='din',
+                             tper='tbit',
+                             tpw='tbit/2',
+                             trf='trf',
+                             pos=True
+                             ),
+                        ],
+            load_list=[dict(pin='txpadout',
+                            type='cap',
+                            value=c_ext)],
+            sup_values=dict(VSS=0,
+                            VDDCore=vdd_core,
+                            VDDIO=vdd_io,
+                            ),
+            pwr_domain={'din': ('VSS', 'VDDCore'),
+                        'txpadout': ('VSS', 'VDDIO'),
+                        'indrv_buf': ('VSS', 'VDDCore'),
+                        'ipdrv_buf': ('VSS', 'VDDCore'),
+                        'itx_en_buf': ('VSS', 'VDDCore'),
+                        'por_vccl': ('VSS', 'VDDIO'),
+                        'porb_vccl': ('VSS', 'VDDIO'),
+                        'weak_pulldownen': ('VSS', 'VDDCore'),
+                        'weak_pullupenb': ('VSS', 'VDDCore'),
+                        },
+            pin_values={'indrv_buf<1:0>': 3,
+                        'ipdrv_buf<1:0>': 3,
+                        'itx_en_buf': 1,
+                        'weak_pulldownen': 0,
+                        'weak_pullupenb': 1,
+                        },
+            reset_list=[('por_vccl', True), ('porb_vccl', False)],
+            sim_envs=sim_envs,
+            sim_params=dict(
+                freq=freq,
+                tbit=1/freq,
+                trf=trf,
+                t_rst=trst,
+                t_rst_rf=trf,
+                t_sim=2/freq,
+            ),
+            save_outputs=['din', 'txpadout']
+        )
+        if sim_options:
+            tbm_specs['sim_options'] = sim_options
+
+        return tbm_specs
+
+    async def signoff_dut(self, dut, c_ext, freq, trf_in, trst, td_max, trf_max, sim_options=None,
+                          run_lvl_extreme: bool = False, rel_err: float = 10e-2,
+                          mc_params: dict = None, mc_corner: str = '') -> None:
+        tech_info = self.dsn_tech_info
+        all_corners = tech_info['signoff_envs']['all_corners']
+
+        # Run level shifter extreme signoff
+        if run_lvl_extreme:
+            env = tech_info['signoff_envs']['lvl_func']['env']
+            vdd_io = tech_info['signoff_envs']['lvl_func']['vddo']
+            vdd_core = tech_info['signoff_envs']['lvl_func']['vddi']
+            tbm_specs = self.get_tbm_specs(c_ext, freq, trf_in, trst, vdd_core, vdd_io, env,
+                                           sim_options)
+            tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, tbm_specs))
+            sim_results = await self.async_simulate_tbm_obj(f'signoff_txanlg_{env}', dut,
+                                                            tbm, tbm_specs)
+            td_in_hh = tbm.calc_delay(sim_results.data, 'din', 'txpadout',
+                                      in_edge=EdgeType.RISE, out_edge=EdgeType.RISE, t_start=1/freq)
+            td_in_ll = tbm.calc_delay(sim_results.data, 'din', 'txpadout',
+                                      in_edge=EdgeType.FALL, out_edge=EdgeType.FALL, t_start=1/freq)
+            td = max(td_in_hh, td_in_ll)
+            if td < float('inf'):
+                self.log('Design passed level shifter extreme signoff.')
+            else:
+                raise ValueError('Level shifter functionality signoff failed.')
+
+        # Run all corners
+        envs = all_corners['envs']
+        worst_td = -float('inf')
+        worst_duty_err = 0
+        trf_worst = -float('inf')
+        worst_env = ''
+        trf_worst_env = ''
+        worst_duty_env = ''
+        sim_worst = None
+        tbm_worst = None
+        tbm = None
+        for env in envs:
+            vdd_io = all_corners['vddio'][env]
+            vdd_core = all_corners['vdd'][env]
+            tbm_specs = self.get_tbm_specs(c_ext, freq, trf_in, trst, vdd_core, vdd_io, [env],
+                                           sim_options)
+
+            tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, tbm_specs))
+            sim_results = await self.async_simulate_tbm_obj(f'signoff_txanlg_{env}', dut,
+                                                            tbm, tbm_specs)
+
+            td_in_hh: np.ndarray = tbm.calc_delay(sim_results.data, 'din', 'txpadout',
+                                                  in_edge=EdgeType.RISE, out_edge=EdgeType.RISE,
+                                                  t_start=1/freq)
+            td_in_ll: np.ndarray = tbm.calc_delay(sim_results.data, 'din', 'txpadout',
+                                                  in_edge=EdgeType.FALL, out_edge=EdgeType.FALL,
+                                                  t_start=1/freq)
+            td = max(td_in_hh, td_in_ll)
+            if td[0] > worst_td:
+                worst_td = td[0]
+                worst_env = env
+                sim_worst = sim_results
+                tbm_worst = tbm
+
+            td_duty_err = td_in_hh[0] - td_in_ll[0]
+            if np.abs(td_duty_err) > np.abs(worst_duty_err):
+                worst_duty_err = td_duty_err
+                worst_duty_env = env
+
+            trf_r = tbm_worst.calc_trf(sim_worst.data, 'txpadout', True)
+            trf_f = tbm_worst.calc_trf(sim_worst.data, 'txpadout', False)
+            trf = max(trf_r[0], trf_f[0])
+            if trf > trf_worst:
+                trf_worst = trf
+                trf_worst_env = env
+
+        msg = f'td_target = {td_max}, td_worst= {worst_td}, worst_env = {worst_env}'
+        if worst_td > td_max:
+            self.warn(msg)
+        else:
+            self.log(msg)
+        self.log(f'Worst duty cycle error = {worst_duty_err} in corner {worst_duty_env}')
+        self.log(f'Worst rise/fall time = {trf_worst}')
+        if worst_td > td_max*(1+rel_err):
+            import matplotlib.pyplot as plt
+            plt.figure()
+            plt.plot(sim_worst.data['time'].flatten(), sim_worst.data['din'].flatten(), 'b')
+            plt.plot(sim_worst.data['time'].flatten(), sim_worst.data['txpadout'].flatten(), 'r')
+            plt.title(f'Corner: {worst_env}')
+            plt.show(block=False)
+            raise RuntimeError(f'TX total delay exceeded target by more than {rel_err*100:.2f}%.')
+
+        if trf_worst > trf_max*(1+rel_err):
+            msg = f'TX rise/fall time exceeded specification by more than {rel_err*100:.2f}.\n' + \
+                  f'Worst rise/fall corner: {trf_worst_env}'
+            raise RuntimeError(msg)
+
+        if mc_params and mc_corner:
+            vdd_io = tech_info['dsn_envs'][mc_corner]['vddio']
+            vdd_core = tech_info['dsn_envs'][mc_corner]['vdd']
+            sim_envs = tech_info['dsn_envs'][mc_corner]['env']
+            mc_tbm_specs = self.get_tbm_specs(c_ext, freq, trf_in, trst, vdd_core, vdd_io, sim_envs,
+                                              sim_options)
+            mc_tbm_specs['monte_carlo_params'] = mc_params
+            mc_tbm = cast(DigitalTranTB, self.make_tbm(DigitalTranTB, mc_tbm_specs))
+            sim_results = await self.async_simulate_tbm_obj(f'signoff_txanlg_monte', dut,
+                                                            mc_tbm, mc_tbm_specs)
+
+            td_in_hh = tbm.calc_delay(sim_results.data, 'din', 'txpadout',
+                                      in_edge=EdgeType.RISE, out_edge=EdgeType.RISE,
+                                      t_start=1 / freq)
+            td_in_ll = tbm.calc_delay(sim_results.data, 'din', 'txpadout',
+                                      in_edge=EdgeType.FALL, out_edge=EdgeType.FALL,
+                                      t_start=1 / freq)
+
+            sigma_td_hh = np.sqrt(np.var(td_in_hh))
+            sigma_td_ll = np.sqrt(np.var(td_in_ll))
+            sigma_rf_mismatch = np.sqrt(np.var(td_in_hh - td_in_ll))
+
+            self.log(f'Sigma rise: {sigma_td_hh}, Sigma fall: {sigma_td_ll}, ' +
+                     f'Sigma r/f mismatch: {sigma_rf_mismatch}')
+
+    async def _iter_dsn_lvshift(self, cload, d_targ, trf_in, tile_specs, k_ratio_data,
+                                k_ratio_ctrl, tile_name,
+                                inv_input_cap_per_seg, inv_input_cap_per_fin, is_ctrl: bool = False,
+                                dual_output=False, has_rst=False) -> Dict[str, Any]:
+        # Designs level shifter, if is_ctrl = True treats it as a ctrl lvshift
+        fanout = 4 if not is_ctrl else self.dsn_tech_info['max_fanout']
+        lv_shift_params = dict(
+            cload=cload, dmax=d_targ, trf_in=trf_in, tile_specs=tile_specs,
+            k_ratio=k_ratio_ctrl if is_ctrl else k_ratio_data, tile_name=tile_name,
+            inv_input_cap=inv_input_cap_per_seg, inv_input_cap_per_fin=inv_input_cap_per_fin,
+            fanout=fanout, dual_output=dual_output,
+            has_rst=has_rst, vin='vdd', vout='vddio', is_ctrl=is_ctrl)
+        lvshift_designer = LvlShiftDesigner(self._root_dir, self._sim_db, self._dsn_specs)
+        lvshift_designer.set_dsn_specs(lv_shift_params)
+        summary = await lvshift_designer.async_design(**lv_shift_params, exception_on_dmax=False)
+        summary = cast(Dict[str, Any], summary)
+        if is_ctrl:
+            return summary
+        td = max(max(summary['tdr']), max(summary['tdf']))
+        self.log(f'Level shifter delay with fanout of {fanout} was {td}, wanted {d_targ}.')
+
+        lvl_del_dict = dict(
+            fanout=[],
+            delay=[],
+            tint=[],
+        )
+
+        while td > d_targ:
+            tint = summary['tint']
+            lvl_del_dict['fanout'].append(fanout)
+            lvl_del_dict['delay'].append(td)
+            lvl_del_dict['tint'].append(tint)
+            self.log(f'Iterating on fanout of level shifter.')
+
+            slope = (td - tint)/fanout
+            fanout = 0.95*(d_targ - tint)/slope
+
+            if fanout < 0:
+                msg = f'ERROR: Level shifter\'s intrinsic delay is greater than the required' \
+                      f' delay. d_targ = {d_targ}, t_int = {tint}'
+                self.error(msg)
+
+            if fanout <= 1:
+                msg = 'Level shifter delay is too low and can not be achieved with fanout > 1.'
+                self.error(msg)
+
+            self.log(f'New fanout is {fanout}.')
+
+            lv_shift_params['fanout'] = fanout
+            lvshift_designer.set_dsn_specs(lv_shift_params)
+            summary = await lvshift_designer.async_design(**lv_shift_params,
+                                                          exception_on_dmax=False)
+            td = max(max(summary['tdr']), max(summary['tdf']))
+            self.log(f'Level shifter delay with fanout of {fanout} was {td}, wanted {d_targ}.')
+
+        return summary
+
+    async def get_driver_cin(self, driver_summary, vdd_out, c_ext, cap_in_search_params,
+                             dig_buf_params, dig_tbm_specs, num_units) -> dict:
+
+        pin_names = ['din', 'tristate', 'tristateb', 'weak_pden', 'weak_puenb',
+                     'n_enb_drv<0>', 'n_enb_drv<1>', 'p_en_drv<0>', 'p_en_drv<1>']
+
+        helper = GatherHelper()
+        dut = await self.async_new_dut('cin_driver_dut', STDCellWrapper,
+                                       driver_summary['dut_params'])
+        for pin in pin_names:
+            helper.append(self._get_driver_input_cap(pin, driver_summary['dut_params'], vdd_out,
+                                                     c_ext, num_units, dig_tbm_specs,
+                                                     dig_buf_params, cap_in_search_params,
+                                                     dut))
+        results = await helper.gather_err()
+        cdict = {}
+        for idx, pin in enumerate(pin_names):
+            # extract data cap and max of all ctrl pin caps
+            cin = results[idx]
+            if pin == 'din':
+                cdict['data'] = cin
+            else:
+                c_cur = cdict.get('ctrl', -float('inf'))
+                if cin > c_cur:
+                    cdict['ctrl'] = cin
+        return cdict
+
+    async def _get_inv_input_cap(self, pinfo: Any, vdd: float, seg: int,
+                                 tbm_specs, buf_params, search_params) -> float:
+        """
+        Return the input cap of an inverter with `seg` segments using simulation
+        """
+        cload = seg*1e-15
+        buf_params['inv_params'][0]['seg'] = int(np.round(seg/16))
+        buf_params['inv_params'][1]['seg'] = int(np.round(seg/4))
+        dut_params = dict(cls_name='bag3_digital.layout.stdcells.gates.InvCore', draw_taps=True,
+                          params=dict(pinfo=pinfo, seg=seg))
+        pwr_domain = {'in': ('VSS', 'VDD'), 'out': ('VSS', 'VDD')}
+        sup_values = dict(VDD=vdd, VSS=0.0)
+        pin_values = {}
+        reset_list = []
+        diff_list = []
+        load_list = [dict(pin='out', type='cap', value=cload)]
+
+        dut = await self.async_new_dut('cin_inv_dut', STDCellWrapper, dut_params)
+        return await self._get_input_cap('in', dut, pwr_domain, sup_values, pin_values, reset_list,
+                                         diff_list, tbm_specs, buf_params, search_params,
+                                         load_list)
+
+    async def _get_driver_input_cap(self, pin: str, dut_params: dict, vdd: float, cload: float,
+                                    nsegs: int, tbm_specs, buf_params, search_params, dut) -> float:
+        """
+        Return the input cap of the output driver
+        """
+
+        driver_unit_info = dut_params['params']['unit_params']
+        seg_nand = driver_unit_info['seg_nand']
+        seg_nor = driver_unit_info['seg_nor']
+        if pin == 'din':
+            driver_segs_tot = nsegs * (seg_nand + seg_nor)
+        elif pin == 'n_enb_drv<0>':
+            driver_segs_tot = seg_nor
+        elif pin == 'n_enb_drv<1>':
+            driver_segs_tot = 2 * seg_nor
+        elif pin == 'tristate':
+            driver_segs_tot = 3 * seg_nor
+        elif pin == 'p_en_drv<0>':
+            driver_segs_tot = seg_nand
+        elif pin == 'p_en_drv<1>':
+            driver_segs_tot = 2 * seg_nand
+        elif pin == 'tristateb':
+            driver_segs_tot = 3 * seg_nand
+        else:
+            driver_segs_tot = dut_params['params']['pupd_params']['stack']
+
+        inv1_segs = int(np.round(driver_segs_tot/16))
+        inv1_segs = 1 if inv1_segs == 0 else inv1_segs
+        inv2_segs = int(np.round(driver_segs_tot/4))
+        inv2_segs = 1 if inv2_segs == 0 else inv2_segs
+        buf_params['inv_params'][0]['seg'] = inv1_segs
+        buf_params['inv_params'][1]['seg'] = inv2_segs
+
+        sup_tuple = ('VSS', 'VDD')
+        pwr_domain = {'din': sup_tuple, 'txpadout': sup_tuple, 'n_enb_drv': sup_tuple,
+                      'p_en_drv': sup_tuple, 'tristate': sup_tuple, 'tristateb': sup_tuple,
+                      'weak_puenb': sup_tuple, 'weak_pden': sup_tuple}
+        sup_values = dict(VDD=vdd, VSS=0.0)
+        if pin == 'din':
+            pin_values = {'n_enb_drv<1:0>': 6-nsegs, 'p_en_drv<1:0>': nsegs-3,
+                          'tristate': 0, 'trsistateb': 1, 'weak_puenb': 1, 'weak_pden': 0}
+        elif pin.startswith('n_enb_drv') or pin == 'tristate':
+            pin_values = {'din': 0}
+        elif pin.startswith('p_en_drv') or pin == 'tristateb':
+            pin_values = {'din': 1}
+        elif pin == 'weak_puenb':
+            pin_values = {'n_enb_drv<1:0>': 3, 'p_en_drv<1:0>': 0, 'tristate': 1, 'tristateb': 0,
+                          'weak_pden': 0}
+        elif pin == 'weak_pden':
+            pin_values = {'n_enb_drv<1:0>': 3, 'p_en_drv<1:0>': 0, 'tristate': 1, 'tristateb': 0,
+                          'weak_puenb': 1}
+        else:
+            raise self.error('pin name not valid')
+
+        reset_list = []
+        diff_list = []
+        load_list = [dict(pin='txpadout', type='cap', value=cload)]
+
+        return await self._get_input_cap(pin, dut, pwr_domain, sup_values, pin_values, reset_list,
+                                         diff_list, tbm_specs, buf_params, search_params,
+                                         load_list)
+
+    async def _get_input_cap(self, in_pin, dut, pwr_domain, sup_values, pin_values, reset_list,
+                             diff_list, tbm_specs, buf_params, search_params,
+                             load_list) -> float:
+        tbm_specs = dict(pwr_domain=pwr_domain, sup_values=sup_values, pin_values=pin_values,
+                         reset_list=reset_list, diff_list=diff_list, **tbm_specs)
+        mm_specs = dict(tbm_specs=tbm_specs, in_pin=in_pin, buf_params=buf_params,
+                        search_params=search_params, load_list=load_list)
+        mm = self.make_mm(CapDelayMatch, mm_specs)
+        in_pin_dir = in_pin.replace('<', '_').replace('>', '_')
+        mm_results = await self.async_simulate_mm_obj(f'{dut.cell_name}_{in_pin_dir}', dut, mm)
+        data = mm_results.data
+        cap_rise = data['cap_rise']
+        cap_fall = data['cap_fall']
+        return (cap_rise + cap_fall) / 2
diff --git a/src/aib_ams/design/unit_cell.py b/src/aib_ams/design/unit_cell.py
new file mode 100644
index 0000000..b98f099
--- /dev/null
+++ b/src/aib_ams/design/unit_cell.py
@@ -0,0 +1,825 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""This package contains designer classes for DriverUnitCellDesigner and DriverPullUpDownDesigner"""
+
+from typing import Mapping, Dict, Any, Tuple, Optional, cast, Type
+from pathlib import Path
+import math
+import numpy as np
+from copy import deepcopy
+
+from pybag.enum import DesignOutput
+
+from bag.design.netlist import add_internal_sources
+from bag.simulation.design import DesignerBase
+from bag.simulation.cache import DesignInstance
+from bag.layout.template import TemplateBase
+from bag.util.search import BinaryIterator
+from bag.env import get_tech_global_info
+from bag.concurrent.util import GatherHelper
+
+from xbase.layout.mos.placement.data import TileInfoTable
+
+from bag3_testbenches.measurement.digital.timing import CombLogicTimingTB
+
+from bag3_digital.layout.stdcells.util import STDCellWrapper
+
+from ..layout.driver import PullUpDown, OutputDriverCore
+from ..measurement.driver_pu_pd import DriverPullUpDownMM
+
+
+class DriverUnitCellDesigner(DesignerBase):
+    """ Design the output driver unit cell"""
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        DesignerBase.__init__(self, *args, **kwargs)
+        self.out_w_p = None
+        self.out_w_n = None
+        self.pinfo = None
+        self._tb_params = dict(
+            load_list=[('out', 'cload')],
+            dut_conns={'out': 'out', 'in': 'in', 'nand_pu': 'nand_pu', 'nor_pd': 'nor_pd',
+                       'enb': 'VSS', 'en': 'VDD', 'VDD': 'VDD', 'VSS': 'VSS'},
+        )
+
+    @classmethod
+    def get_dut_lay_class(cls) -> Optional[Type[TemplateBase]]:
+        return OutputDriverCore
+
+    async def async_design(self,
+                           c_max: float,
+                           trf_in: float,
+                           w_p: int,
+                           w_n: int,
+                           r_targ: float,
+                           tile_specs: Mapping[str, Any],
+                           del_err: float,
+                           tile_name: str,
+                           seg_even: Optional[bool] = False,
+                           **kwargs: Any
+                           ) -> Mapping[str, Any]:
+        """This function designs the main output driver unit cell
+        1) Calls DriverPullUpDownDesigner to design output pull up / pull down
+        2) Design input NAND and NOR
+        3) Characterize and sign off
+
+        Parameters
+        ----------
+        c_max: float
+            Target load capacitance
+        trf_in: float
+            Input rise / fall time in simulation
+        w_p: int
+            Initial output PMOS width
+        w_n: int
+            Initial output NMOS width
+        r_targ: float:
+            Target nominal (strong) output resistance.
+        tile_name: str
+            Tile name for layout.
+        del_err: float
+            Delay mismatch tolerance, for sizing NAND + NOR
+        tile_specs: Mapping[str, Any]
+            Tile specifications for layout.
+        seg_even: Optional[bool]
+            True to force segments to be even
+        kwargs: Any
+            Additional keyword arguments. Unused here
+
+        Returns
+        -------
+        ans: Mapping[str, Any]
+            Design summary, including performance specs and generator parameters
+        """
+        tinfo_table = TileInfoTable.make_tiles(self.grid, tile_specs)
+        self.pinfo = tinfo_table[tile_name]
+
+        self.out_w_p = w_p
+        self.out_w_n = w_n
+
+        self.dsn_specs['w_p'] = self.out_w_p
+        self.dsn_specs['w_n'] = self.out_w_n
+
+        driver_designer = DriverPullUpDownDesigner(self._root_dir, self._sim_db, self.dsn_specs)
+        summary = await driver_designer.async_design(**driver_designer.dsn_specs)
+
+        seg_p: int = summary['seg_p']
+        seg_n: int = summary['seg_n']
+        self.out_w_p = summary['w_p']
+        self.out_w_n = summary['w_n']
+
+        tbm_specs: dict = dict(
+                         sim_envs=get_tech_global_info('aib_ams')['dsn_envs']['slow_io']['env'],
+                         thres_lo=0.1,
+                         thres_hi=0.9,
+                         tstep=None,
+                         sim_params=dict(
+                             vdd=get_tech_global_info('aib_ams')['dsn_envs']['slow_io']['vddio'],
+                             cload=c_max,
+                             tbit=20 * r_targ * c_max,
+                             trf=trf_in,
+                         ),
+                         rtol=1e-8,
+                         atol=1e-22,
+                         save_outputs=['out', 'nand_pu', 'nor_pd', 'in'])
+        gate_sizes = await self._size_nand_nor(seg_p, seg_n, trf_in, tbm_specs, del_err, seg_even)
+        nand_seg, nor_seg, nand_p_w_del, nor_n_w_del, w_nom = gate_sizes
+
+        # Characterize Final design
+        dut_params = self._get_unit_cell_params(self.pinfo, seg_p, seg_n, nand_seg, nor_seg,
+                                                nand_p_w_del, nor_n_w_del, w_min=w_nom)
+        dut = await self.async_new_dut('unit_cell', STDCellWrapper, dut_params)
+
+        all_corners = get_tech_global_info('aib_ams')['signoff_envs']['all_corners']
+        tdr_worst = -float('inf')
+        tdf_worst = -float('inf')
+        pu_tr_worst = -float('inf')
+        pu_tf_worst = -float('inf')
+        pd_tr_worst = -float('inf')
+        pd_tf_worst = -float('inf')
+        duty_err_worst = 0
+        for env in all_corners['envs']:
+            tbm_specs['sim_envs'] = [env]
+            tbm_specs['sim_params']['vdd'] = all_corners['vddio'][env]
+            tbm = cast(CombLogicTimingTB, self.make_tbm(CombLogicTimingTB, tbm_specs))
+            sim_results = await self.async_simulate_tbm_obj(f'sim_final_{env}', dut, tbm,
+                                                            self._tb_params)
+
+            tdr, tdf = CombLogicTimingTB.get_output_delay(sim_results.data, tbm_specs, 'in', 'out',
+                                                          False)
+            pu_tr, pu_tf = CombLogicTimingTB.get_output_trf(sim_results.data, tbm_specs, 'nand_pu')
+            pd_tr, pd_tf = CombLogicTimingTB.get_output_trf(sim_results.data, tbm_specs, 'nor_pd')
+
+            tdr_worst = self.set_worst_spec(tdr, tdr_worst)
+            tdf_worst = self.set_worst_spec(tdf, tdf_worst)
+            pu_tr_worst = self.set_worst_spec(pu_tr, pu_tr_worst)
+            pu_tf_worst = self.set_worst_spec(pu_tf, pu_tf_worst)
+            pd_tr_worst = self.set_worst_spec(pd_tr, pd_tr_worst)
+            pd_tf_worst = self.set_worst_spec(pd_tf, pd_tf_worst)
+
+            duty_err = tdr - tdf
+            if np.abs(duty_err) > np.abs(duty_err_worst):
+                duty_err_worst = duty_err
+
+        return dict(tdr=tdr_worst, tdf=tdf_worst, pu_tr=pu_tr_worst, pu_tf=pu_tf_worst,
+                    pd_tr=pd_tr_worst, pd_tf=pd_tf_worst, duty_err=duty_err_worst,
+                    dut_params=dut_params)
+
+    @staticmethod
+    def set_worst_spec(spec_in, spec_cur):
+        if spec_in > spec_cur:
+            spec_cur = spec_in
+
+        return spec_cur
+
+    async def _size_nand_nor(self, seg_p: int, seg_n: int, trf: float, tbm_specs: dict,
+                             del_err: float,
+                             seg_even: Optional[bool] = False,
+                             nand_p_w_del: Optional[int] = None,
+                             nor_n_w_del: Optional[int] = None,
+                             w_nom: Optional[int] = -1) -> Tuple[int, int, int, int, int]:
+
+        # Check for defaults and set them if needed.
+        tech_globals = get_tech_global_info('aib_ams')
+        if nand_p_w_del is None:
+            nand_p_w_del = 0
+        if nor_n_w_del is None:
+            nor_n_w_del = 0
+
+        if w_nom == -1:
+            w_nom = max(tech_globals['w_nomp'], tech_globals['w_nomn'])
+
+        # binary search: up size both nand and nor to meet the slope rate trf
+        nand_seg = nor_seg = 1
+        max_nand_seg = int(np.round(seg_p/tech_globals['min_fanout']))
+        max_nor_seg = int(np.round(seg_n/tech_globals['min_fanout']))
+        dut_params = self._get_unit_cell_params(self.pinfo, seg_p, seg_n, nand_seg, nor_seg,
+                                                nand_p_w_del, nor_n_w_del, w_min=w_nom)
+
+        tbm_specs['sim_envs'] = tech_globals['dsn_envs']['slow_io']['env']
+        tbm_specs['sim_params']['vdd'] = tech_globals['dsn_envs']['slow_io']['vddio']
+        tbm = cast(CombLogicTimingTB, self.make_tbm(CombLogicTimingTB, tbm_specs))
+        nand_seg, _, tf = await self._upsize_gate_for_trf(dut_params, trf, nand_seg, True, tbm,
+                                                          seg_even, max_nand_seg)
+        nor_seg, tr, _ = await self._upsize_gate_for_trf(dut_params, trf, nor_seg, False, tbm,
+                                                         seg_even, max_nor_seg)
+
+        # Change tbm_spec to design for delay matching in tt corner
+        dut_params_new = self._get_unit_cell_params(self.pinfo, seg_p, seg_n, nand_seg, nor_seg,
+                                                    nand_p_w_del, nor_n_w_del, w_min=w_nom)
+        tbm_specs['sim_envs'] = tech_globals['dsn_envs']['center']['env']
+        tbm_specs['sim_params']['vdd'] = tech_globals['dsn_envs']['center']['vddio']
+        tbm = cast(CombLogicTimingTB, self.make_tbm(CombLogicTimingTB, tbm_specs))
+        dut = await self.async_new_dut('nand_nor_check_delay', STDCellWrapper,
+                                       dut_params_new)
+        sim_results = await self.async_simulate_tbm_obj('check_delay', dut, tbm,
+                                                        self._tb_params)
+
+        nand_tdf, nand_tdr = CombLogicTimingTB.get_output_delay(sim_results.data, tbm.specs,
+                                                                'in', 'nand_pu',
+                                                                out_invert=True, out_pwr='vdd')
+        nor_tdf, nor_tdr = CombLogicTimingTB.get_output_delay(sim_results.data, tbm.specs,
+                                                              'in', 'nor_pd',
+                                                              out_invert=True, out_pwr='vdd')
+
+        err_cur = np.abs(nand_tdf - nor_tdr)
+        if np.max(err_cur) > del_err:
+            # up_size the slower side to make it faster
+            if np.max(nor_tdr) < np.max(nand_tdf):
+                nand_seg, nand_tdr, nand_tdf = await self._upsize_gate_for_delay(dut_params,
+                                                                                 np.max(nor_tdr),
+                                                                                 nand_seg,
+                                                                                 True, tbm,
+                                                                                 seg_even,
+                                                                                 max_nand_seg)
+            else:
+                nor_seg, nor_tdr, nor_tdf = await self._upsize_gate_for_delay(dut_params,
+                                                                              np.max(nand_tdf),
+                                                                              nor_seg,
+                                                                              False, tbm,
+                                                                              seg_even,
+                                                                              max_nor_seg)
+
+        # check if t_rise_nand < t_rise_nor and t_fall_nor < t_fall_nand
+        rerun = False
+        if not np.all(nand_tdr < nor_tdr):
+            rerun = nand_p_w_del + 1 + w_nom <= tech_globals['w_maxp']
+            new_nand_p_w_del = nand_p_w_del + 1 if rerun else nand_p_w_del
+        else:
+            new_nand_p_w_del = nand_p_w_del
+
+        if not np.all(nor_tdf < nand_tdf):
+            rerun = nor_n_w_del + 1 + w_nom <= tech_globals['w_maxn']
+            new_nor_n_w_del = nor_n_w_del + 1 if rerun else nor_n_w_del
+        else:
+            new_nor_n_w_del = nor_n_w_del
+
+        if rerun:
+            await self._size_nand_nor(seg_p, seg_n, trf, tbm_specs, del_err, seg_even,
+                                      new_nand_p_w_del, new_nor_n_w_del, w_nom)
+
+        await self.run_nand_nor_signoff(dut, del_err, tbm_specs, tech_globals)
+
+        return nand_seg, nor_seg, nand_p_w_del, nor_n_w_del, w_nom
+
+    async def run_nand_nor_signoff(self, dut, del_err, tbm_specs, tech_globals):
+        tbm_specs['env_params'] = dict(vdd=dict())
+        tbm_specs['env_params']['vdd'] = tech_globals['signoff_envs']['all_corners']['vddio']
+        nand_tdf = []
+        nand_tdr = []
+        nor_tdf = []
+        nor_tdr = []
+        for env in tech_globals['signoff_envs']['all_corners']['envs']:
+            tbm_specs['sim_envs'] = [env]
+            tbm_specs['sim_params']['vdd'] = tbm_specs['env_params']['vdd'][env]
+            tbm = cast(CombLogicTimingTB, self.make_tbm(CombLogicTimingTB, tbm_specs))
+            sim_results = await self.async_simulate_tbm_obj(f'signoff_delay_match_{env}', dut, tbm,
+                                                            self._tb_params)
+            pu_tdf, pu_tdr = CombLogicTimingTB.get_output_delay(sim_results.data,
+                                                                tbm.specs,
+                                                                'in', 'nand_pu',
+                                                                out_invert=True,
+                                                                out_pwr='vdd')
+            pd_tdf, pd_tdr = CombLogicTimingTB.get_output_delay(sim_results.data,
+                                                                tbm.specs,
+                                                                'in', 'nor_pd',
+                                                                out_invert=True,
+                                                                out_pwr='vdd')
+            nand_tdf.append(pu_tdf)
+            nand_tdr.append(pu_tdr)
+            nor_tdf.append(pd_tdf)
+            nor_tdr.append(pd_tdr)
+
+        err_cur = np.abs(np.subtract(nand_tdf, nor_tdr))
+        msg = f'del_err: {np.max(err_cur)} [wanted: {del_err}]'
+        if np.any(err_cur > del_err):
+            self.error(f'Unable to match NAND/NOR gate delays to within target, {msg}')
+        self.log(msg)
+
+    async def _upsize_gate_for_delay(self, dut_params: Dict[str, Any], td_targ: float,
+                                     seg_cur: int, is_nand: bool,
+                                     tbm: CombLogicTimingTB,
+                                     seg_even: bool,
+                                     seg_max: Optional[int] = None,
+                                     ) -> Tuple[int, np.ndarray, np.ndarray]:
+        return await self._upsize_gate_for_del_spec(dut_params, td_targ, seg_cur, is_nand,
+                                                    tbm, seg_even, 'delay', seg_max)
+
+    async def _upsize_gate_for_trf(self, dut_params: Dict[str, Any], trf: float,
+                                   seg_cur: int, is_nand: bool,
+                                   tbm: CombLogicTimingTB,
+                                   seg_even: bool,
+                                   seg_max: Optional[int] = None,
+                                   ) -> Tuple[int, np.ndarray, np.ndarray]:
+        return await self._upsize_gate_for_del_spec(dut_params, trf, seg_cur, is_nand, tbm,
+                                                    seg_even, 'slope', seg_max)
+
+    async def _upsize_gate_for_del_spec(self, dut_params: Dict[str, Any], tspec: float,
+                                        seg_cur: int, is_nand: bool,
+                                        tbm: CombLogicTimingTB,
+                                        seg_even: bool,
+                                        spec_type: str,
+                                        seg_max: Optional[int] = None,
+                                        ) -> Tuple[int, np.ndarray, np.ndarray]:
+        if spec_type != 'delay' and spec_type != 'slope':
+            raise ValueError("spec_type must be either 'delay' or 'slope'.")
+
+        bin_iter = BinaryIterator(seg_cur, seg_max, step=1 << seg_even)
+        while bin_iter.has_next():
+            new_seg = bin_iter.get_next()
+            dut_params['params']['seg_nand' if is_nand else 'seg_nor'] = new_seg
+            dut = await self.async_new_dut('nand_nor_upsize', STDCellWrapper, dut_params)
+            sim_results = await self.async_simulate_tbm_obj('nand_nor_upsize_sim', dut, tbm,
+                                                            self._tb_params)
+            if spec_type == 'slope':
+                ans = CombLogicTimingTB.get_output_trf(sim_results.data, tbm.specs,
+                                                       'nand_pu' if is_nand else 'nor_pd')
+                gate_tr, gate_tf = ans
+            else:
+                ans = CombLogicTimingTB.get_output_delay(sim_results.data, tbm.specs,
+                                                         'in',
+                                                         'nand_pu' if is_nand else 'nor_pd',
+                                                         out_invert=True)
+                gate_tf, gate_tr = ans
+
+            trf_metric = gate_tf if is_nand else gate_tr
+            if np.max(trf_metric) > tspec:
+                bin_iter.up(np.max(trf_metric)-tspec)
+            else:
+                bin_iter.down(np.max(trf_metric)-tspec)
+                bin_iter.save_info((new_seg, gate_tr, gate_tf))
+
+        info = bin_iter.get_last_save_info()
+        if info is None:
+            gate_str = "nand" if is_nand else "nor"
+            err_str = f'Could not find a size for {gate_str} to meet the target spec of {tspec}.'
+            self.error(err_str)
+        seg, tr, tf = info
+
+        return seg, tr, tf
+
+    def _get_unit_cell_params(self, pinfo: Any, seg_p: int, seg_n: int,
+                              seg_nand: int, seg_nor: int,
+                              nand_p_w_del: int, nor_n_w_del: int,
+                              beta_ratio: Optional[float] = None,
+                              w_min: Optional[int] = None) -> Dict[str, Any]:
+        if w_min is None:
+            w_n = get_tech_global_info('aib_ams')['w_minn']
+        else:
+            w_n = w_min
+
+        if beta_ratio is None:
+            beta_ratio = get_tech_global_info('aib_ams')['inv_beta']
+
+        return dict(
+            cls_name='aib_ams.layout.driver.OutputDriverCore',
+            draw_taps=True,
+            params=dict(
+                pinfo=pinfo,
+                seg_p=seg_p,
+                seg_n=seg_n,
+                seg_nand=seg_nand,
+                seg_nor=seg_nor,
+                w_p=self.out_w_p,
+                w_n=self.out_w_n,
+                w_p_nand=int(beta_ratio * w_n) + nand_p_w_del,
+                w_n_nand=w_n,
+                w_p_nor=int(beta_ratio * w_n),
+                w_n_nor=w_n + nor_n_w_del,
+                export_pins=True,
+            )
+        )
+
+
+class DriverPullUpDownDesigner(DesignerBase):
+    """Design the output driver pull up/ pull down
+
+    NOTE: Assumes output cap is much larger than device.
+    """
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        DesignerBase.__init__(self, *args, **kwargs)
+        self._tb_params = dict(
+            load_list=[('out', 'cload')],
+            dut_conns=dict(
+                out='out',
+                pden='in',
+                puenb='in',
+                VDD='VDD',
+                VSS='VSS',
+            ),
+        )
+
+    @classmethod
+    def get_dut_lay_class(cls) -> Optional[Type[TemplateBase]]:
+        return PullUpDown
+
+    async def async_design(self, r_targ: float, c_max: float, freq: float, trf_in: float,
+                           rel_err: float, tile_specs: Mapping[str, Any], tile_name: str,
+                           w_p: int, w_n: int, res_mm_specs: Dict[str, Any],
+                           is_weak: Optional[bool] = False, stack_max: Optional[int] = 10,
+                           seg_even: bool = True, em_options: Optional[Mapping[str, Any]] = None,
+                           ridx_p: int = -1, ridx_n: int = 0,
+                           max_iter: int = 10, **kwargs: Any) -> Mapping[str, Any]:
+        """Design a driver unit cell.
+        will try to achieve the given maximum trf and meet EM specs at c_max.
+        The main driver increases the segments and width to achieve small output resistance
+        The weak driver uses stacking to achieve large output resistance.
+
+        1) Determines minimum transistor segments for output current for given load cap and
+        frequency
+        2) For weak driver, determines transistor stacking to meet output resistance spec
+        3) For main driver, determines transistor segments and width to meet output resistance spec
+
+        Parameters
+        ----------
+        r_targ: float
+            Target unit cell output resistance
+        c_max: float
+            Load capacitance
+        freq: float
+            Operating switching frequency
+        trf_in: float
+            Input rise / fall time
+        rel_err: float
+            Output resistance error tolerance
+        tile_name: str
+            Tile name for layout.
+        tile_specs: Mapping[str, Any]
+            Tile specifications for layout.
+        w_p: int
+            Initial output PMOS width
+        w_n: int
+            Initial output NMOS width
+        res_mm_specs: Dict[str, Any]
+            Specs for DriverPullUpDownMM
+        is_weak: Optional[bool]
+            True if designing weak driver
+        stack_max: int
+            Maximum allowed transistor stack size
+        seg_even: bool
+            True to force number of segments to be even
+        em_options: Optional[Mapping[str, Any]]
+            Additional arguments for calculating minimum segments based on EM specs
+        ridx_n: int
+            NMOS transistor row
+        ridx_p: int
+            PMOS transistor row
+        max_iter: int
+            Maximum allowed number of iteration
+        kwargs: Any
+            Additional keyword arguments. Unused here
+
+        Returns
+        -------
+        ans: Mapping[str, Any]
+            Design summary, including generator parameters and performance summary
+        """
+        gen_specs: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_specs', None)
+        gen_cell_args: Optional[Mapping[str, Any]] = kwargs.get('gen_cell_args', None)
+
+        if em_options is None:
+            em_options = {}
+
+        tinfo_table = TileInfoTable.make_tiles(self.grid, tile_specs)
+        arr_info = tinfo_table.arr_info
+        pinfo = tinfo_table[tile_name]
+        mos_tech = arr_info.tech_cls
+
+        # get transistor parameters
+        vdd_max = get_tech_global_info('aib_ams')['signoff_envs']['vmax']['vddio']
+        iac_peak = c_max * vdd_max * freq
+        iac_rms = iac_peak / math.sqrt(2)
+        seg_min = mos_tech.get_segments_from_em(arr_info.conn_layer, 0, iac_rms, iac_peak,
+                                                even=True, **em_options) if not is_weak else 1
+        self.log(f'seg_min = {seg_min}')
+
+        dut_params = dict(
+            pinfo=pinfo,
+            seg_p=seg_min,
+            seg_n=seg_min,
+            w_p=w_p,
+            w_n=w_n,
+            stack=1,
+            ridx_p=ridx_p,
+            ridx_n=ridx_n,
+            export_pins=True,
+        )
+
+        # get number of stacks
+        # Modified to set effectively skip stacking for main driver in order to improve run time
+        r_pu, r_pd = await self._get_stack(dut_params, res_mm_specs, r_targ,
+                                           stack_max if is_weak else None)
+        self.log(f'stack = {dut_params["stack"]}')
+
+        if is_weak:
+            if gen_specs is not None and gen_cell_args is not None:
+                gen_cell_specs = dict(
+                    lay_class=STDCellWrapper.get_qualified_name(),
+                    params=dict(
+                        cls_name=PullUpDown.get_qualified_name(),
+                        params=dut_params,
+                    ),
+                    **gen_specs,
+                )
+                return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+            return dict(
+                stack=dut_params['stack'],
+                r_targ=r_targ,
+                r_pu=r_pu,
+                r_pd=r_pd,
+                seg_p=seg_min,
+                seg_n=seg_min,
+                w_p=w_p,
+                w_n=w_n,
+            )
+
+        # get widths/number of segments
+        ans = await self._resize_transistors(dut_params, res_mm_specs, r_targ, r_pu, r_pd,
+                                             seg_min, seg_even, rel_err, max_iter=6)
+
+        if gen_specs is not None and gen_cell_args is not None:
+            gen_cell_specs = dict(
+                lay_class=STDCellWrapper.get_qualified_name(),
+                cls_name=PullUpDown.get_qualified_name(),
+                params=dut_params,
+                **gen_specs,
+            )
+            return dict(gen_specs=gen_cell_specs, gen_args=gen_cell_args)
+
+        return ans
+
+    # TODO: deprecate is_weak
+    # TODO: Code seems to confuse max_iter with seg_max
+    async def _resize_transistors(self,
+                                  dut_params: Dict[str, Any],
+                                  mm_specs: Dict[str, Any],
+                                  r_targ: float,
+                                  r_pu: np.ndarray,
+                                  r_pd: np.ndarray,
+                                  seg_min: int,
+                                  seg_even: bool,
+                                  rel_err: float,
+                                  max_iter: int = 4,
+                                  is_weak: Optional[bool] = False,
+                                  seg_p: int = 0,
+                                  seg_n: int = 0,
+                                  seg_max: int = 20) -> Dict[str, Any]:
+        """Iteratively searches transistor segments and width to hit target r_targ output
+        resistance. If no result is found up to seg_max, width is adjusted, and then this
+        function is recursively called.
+
+        Parameters
+        ----------
+        dut_params: Mapping[str, Any]
+            Driver generator parameters
+        mm_specs: Dict[str, Any]
+            Specs for DriverPullUpDownMM
+        r_targ: float
+            Target output resistance
+        r_pu: np.ndarray
+            Measured pull-up output resistance across given corners, from previous search
+        r_pd: np.ndarray
+            Measured pull-down output resistance across given corners, from previous search
+        seg_min: int
+            Min. allowed segments
+        seg_even: bool
+            True to force number of segments to be even
+        rel_err: float
+            Output resistance error tolerance
+        max_iter: int
+            Maximum allowed number of iteration
+        is_weak: Optional[bool]
+            Deprecated: True if sizing weak driver
+        seg_p: int
+            If given, used as initial number of PMOS segments instead of seg_min
+        seg_n: int
+            If given, used as initial number of NMOS segments instead of seg_min
+        seg_max: int
+            Max. allowed segments
+
+        Returns
+        -------
+        ans: Mapping[str, Any]
+            Design summary, including generator parameters and performance summary
+        """
+        seg_p = seg_min if seg_p == 0 else seg_p
+        seg_n = seg_min if seg_n == 0 else seg_n
+        seg_p_best = seg_p
+        seg_n_best = seg_n
+        err_best_p = float('inf')
+        err_best_n = float('inf')
+        visited = set()
+        cnt = 0
+        r_pu_best = float('inf')
+        r_pd_best = float('inf')
+
+        for cnt in range(seg_max):
+            if np.max(r_pu) > (1+rel_err)*r_targ:
+                seg_p += 1
+            elif np.max(r_pu) < (1-rel_err)*r_targ and seg_p >= 2:
+                seg_p -= 1
+
+            if np.max(r_pd) > (1+rel_err) * r_targ:
+                seg_n += 1
+            elif np.max(r_pd) < (1-rel_err) * r_targ and seg_n >= 2:
+                seg_n -= 1
+
+            new_tuple = (seg_p, seg_n)
+            if new_tuple in visited:
+                break
+            else:
+                visited.add(new_tuple)
+
+            dut_params['seg_p'] = seg_p
+            dut_params['seg_n'] = seg_n
+            r_pu, r_pd = await self._get_resistance(f'resize_{cnt}', dut_params, mm_specs)
+
+            err_p = np.abs(np.max(r_pu) - r_targ) / r_targ
+            err_n = np.abs(np.max(r_pd) - r_targ) / r_targ
+
+            self.log(f'Iter = {cnt}, err_p={err_p:.4g}, err_n={err_n:.4g}.')
+            self.log(f'Iter = {cnt}, seg_p={seg_p:.4g}, seg_n={seg_n:.4g}.')
+
+            if err_p < err_best_p:
+                err_best_p = err_p
+                seg_p_best = seg_p
+                r_pu_best = np.max(r_pu)
+
+            if err_n < err_best_n:
+                err_best_n = err_n
+                seg_n_best = seg_n
+                r_pd_best = np.max(r_pd)
+
+            if err_p <= rel_err and err_n <= rel_err:
+                break
+
+        if cnt == max_iter-1 or err_best_n > rel_err or err_best_p > rel_err:
+            tech_globals = get_tech_global_info('aib_ams')
+            dut_params['seg_p'] = seg_p_best
+            dut_params['seg_n'] = seg_n_best
+            # TODO: below code needs to be updated to reflect width selection
+            if err_best_p > rel_err:
+                dut_params['w_p'] = dut_params['w_p'] - 1
+            if err_best_n > rel_err:
+                dut_params['w_n'] = dut_params['w_n'] - 1
+            if dut_params['w_p'] >= tech_globals['w_minp'] and \
+               dut_params['w_n'] >= tech_globals['w_minn']:
+                msg = f'Recursing through resize transistors with w_p: {dut_params["w_p"]} and ' \
+                      f'w_n: {dut_params["w_n"]}'
+                self.log(msg)
+                r_pu, r_pd = await self._get_resistance(f'get_res_for_new_w', dut_params, mm_specs)
+                return await self._resize_transistors(dut_params, mm_specs, r_targ, r_pu, r_pd,
+                                                      seg_min, seg_even, rel_err, max_iter, is_weak,
+                                                      seg_p_best, seg_n_best)
+            else:
+                msg = f'Unable to find sizing for output driver ' + \
+                      f'that meets {rel_err*100:.2f}% error.'
+                raise RuntimeError(msg)
+
+        return dict(
+            stack=dut_params['stack'],
+            r_targ=r_targ,
+            r_pu=r_pu_best,
+            r_pd=r_pd_best,
+            w_p=dut_params['w_p'],
+            w_n=dut_params['w_n'],
+            seg_p=seg_p_best,
+            seg_n=seg_n_best,
+            err_p=err_best_p,
+            err_n=err_best_n,
+        )
+
+    async def _get_stack(self,
+                         dut_params: Dict[str, Any],
+                         mm_specs: Dict[str, Any],
+                         r_targ: float,
+                         stack_max: Optional[int] = None) -> Tuple[np.ndarray, np.ndarray]:
+        """Binary searches the stack size to hit target r_targ output resistance.
+        If stack_max is None, we skip sizing. This is set when sizing the main driver.
+
+        NOTE: this function modifies dut_params and tbm_specs.
+
+        Parameters
+        ----------
+        dut_params: Dict[str, Any]
+            Driver generator parameters
+        mm_specs: Dict[str, Any]
+            Specs for DriverPullUpDownMM
+        r_targ:
+            Target output resistance
+        stack_max:
+            Maximum allowed transistor stack size
+
+        Returns
+        -------
+        r_pu, r_pd: Tuple[np.ndarray, np.ndarray]
+            Measured pull-up / pull-down output resistance across given corners
+        """
+
+        if not stack_max:
+            dut_params['stack'] = 1
+            sim_id = f'stack_1'
+            r_pu, r_pd = await self._get_resistance(sim_id, dut_params, mm_specs)
+            return r_pu, r_pd
+
+        r_best = 0.0
+        bin_iter = BinaryIterator(1, None)
+        while bin_iter.has_next():
+            cur_stack = bin_iter.get_next()
+            while bin_iter.has_next() and cur_stack > stack_max:
+                bin_iter.down(float('inf'))
+                cur_stack = bin_iter.get_next()
+            if cur_stack > stack_max:
+                break
+            dut_params['stack'] = cur_stack
+            sim_id = f'stack_{cur_stack}'
+            r_pu, r_pd = await self._get_resistance(sim_id, dut_params, mm_specs)
+
+            r_test = min(np.min(r_pu), np.min(r_pd))
+            r_best = max(r_test, r_best)
+            if r_targ > min(np.min(r_pu), np.min(r_pd)):
+                bin_iter.up(r_targ - min(np.min(r_pu), np.min(r_pd)))
+            else:
+                bin_iter.save_info((cur_stack, r_pu, r_pd))
+                bin_iter.down(r_targ - min(np.min(r_pu), np.min(r_pd)))
+
+        save_info = bin_iter.get_last_save_info()
+        if save_info is None:
+            self.error(f'Cannot meet spec with stack_max = {stack_max}, '
+                       f'r_best = {r_best:.4g}')
+        stack, r_pu, r_pd = bin_iter.get_last_save_info()
+
+        dut_params['stack'] = stack
+        return r_pu, r_pd
+
+    async def _get_resistance(self, sim_id: str, dut_params: Mapping[str, Any],
+                              mm_specs: Dict[str, Any]) -> Tuple[np.ndarray, np.ndarray]:
+        """Compute resistance from DC I-V measurements.
+        """
+        gen_params = dict(
+            cls_name=PullUpDown.get_qualified_name(),
+            draw_taps=True,
+            params=dut_params,
+        )
+        dut = await self.async_new_dut('unit_cell', STDCellWrapper, gen_params, flat=True)
+
+        extract = self._sim_db.extract
+        netlist_type = DesignOutput.CDL if extract else self._sim_db.prj.sim_access.netlist_type
+
+        # Create a new netlist that allows for the insertion of dc sources
+        offset_netlist = Path(*dut.netlist_path.parts[:-1],
+                              f'netlist_with_sources.{netlist_type.extension}')
+        v_offset_map = add_internal_sources(dut.netlist_path, offset_netlist, netlist_type, ['d'])
+
+        mm_specs['v_offset_map'] = v_offset_map
+        mm_specs['extract'] = extract
+
+        # Create a DesignInstance with the newly created netlist
+        new_dut = DesignInstance(dut.cell_name, dut.sch_master, dut.lay_master,
+                                 offset_netlist, dut.cv_info_list)
+
+        all_corners = get_tech_global_info('aib_ams')['signoff_envs']['all_corners']
+        res_pd = np.array([])
+        res_pu = np.array([])
+
+        helper = GatherHelper()
+        for env in all_corners['envs']:
+            helper.append(self._run_get_resistance(env, sim_id, new_dut, mm_specs, all_corners))
+
+        results = await helper.gather_err()
+        for idx in range(len(results)):
+            res_pu = np.append(res_pu, results[idx][0])
+            res_pd = np.append(res_pd, results[idx][1])
+
+        return res_pu, res_pd
+
+    async def _run_get_resistance(self, env: str, sim_id: str, dut, mm_specs: Dict[str, Any],
+                                  all_corners: Dict[str, Any]) -> Tuple[float, float]:
+        new_specs = deepcopy(mm_specs)
+        new_specs.update(dict(
+            tbm_specs=dict(
+                sim_envs=[env],
+            ),
+            vdd=all_corners['vddio'][env]
+        ))
+        mm = cast(DriverPullUpDownMM, self.make_mm(DriverPullUpDownMM, new_specs))
+
+        sim_results = await self.async_simulate_mm_obj(f'{sim_id}_{env}', dut, mm)
+        sim_data = sim_results.data
+
+        return sim_data['res_pu'][0], sim_data['res_pd'][0]
diff --git a/src/aib_ams/enum.py b/src/aib_ams/enum.py
new file mode 100644
index 0000000..cd46264
--- /dev/null
+++ b/src/aib_ams/enum.py
@@ -0,0 +1,23 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from enum import IntFlag
+
+
+class DrawTaps(IntFlag):
+    LEFT = 1
+    RIGHT = 2
+    NONE = ~(LEFT | RIGHT)
+    BOTH = LEFT & RIGHT
\ No newline at end of file
diff --git a/src/aib_ams/layout/__init__.py b/src/aib_ams/layout/__init__.py
new file mode 100644
index 0000000..5573caf
--- /dev/null
+++ b/src/aib_ams/layout/__init__.py
@@ -0,0 +1,14 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
diff --git a/src/aib_ams/layout/dcc_helper.py b/src/aib_ams/layout/dcc_helper.py
new file mode 100644
index 0000000..1b0ec16
--- /dev/null
+++ b/src/aib_ams/layout/dcc_helper.py
@@ -0,0 +1,391 @@
+# SPDX-License-Identifier: BSD-3-Clause AND Apache-2.0
+# Copyright 2018 Regents of the University of California
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+# * Redistributions of source code must retain the above copyright notice, this
+#   list of conditions and the following disclaimer.
+#
+# * Redistributions in binary form must reproduce the above copyright notice,
+#   this list of conditions and the following disclaimer in the documentation
+#   and/or other materials provided with the distribution.
+#
+# * Neither the name of the copyright holder nor the names of its
+#   contributors may be used to endorse or promote products derived from
+#   this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Optional, Type, List, Union
+
+from pybag.enum import RoundMode, MinLenMode
+
+from bag.util.math import HalfInt
+from bag.util.immutable import Param
+from bag.layout.template import TemplateDB
+from bag.layout.routing.base import TrackID, WireArray
+from bag.design.database import Module
+
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase
+
+from bag3_digital.layout.stdcells.gates import InvChainCore
+from bag3_digital.layout.sampler.flop_strongarm import FlopStrongArm
+
+from ..schematic.aib_dcc_helper import aib_ams__aib_dcc_helper
+from .dcc_helper_core import DCCHelperCore
+
+
+class SyncChain(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+        self._buf_ncol = 0
+
+    @property
+    def buf_ncol(self) -> int:
+        return self._buf_ncol
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            sync_params='synchronizer flop parameters.',
+            buf_params='clock buffer parameters.',
+            nsync='Number of synchronizer flops.',
+        )
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo)
+
+        sync_params: Param = self.params['sync_params']
+        buf_params: Param = self.params['buf_params']
+        nsync: int = self.params['nsync']
+
+        if nsync < 1:
+            raise ValueError('nsync must be positive.')
+        if nsync & 1:
+            raise ValueError('nsync must be even.')
+        nsync2 = nsync // 2
+
+        # create masters
+        sync_params = sync_params.copy(append=dict(pinfo=pinfo, has_rstlb=True))
+        buf_params = buf_params.copy(append=dict(pinfo=pinfo))
+
+        sync_master: FlopStrongArm = self.new_template(FlopStrongArm, params=sync_params)
+        buf_master: InvChainCore = self.new_template(InvChainCore, params=buf_params)
+
+        # placement
+        conn_layer = self.conn_layer
+        hm_layer = conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+        grid = self.grid
+        tr_manager = self.tr_manager
+        xm_w = tr_manager.get_width(xm_layer, 'sig')
+        xm_w_clk = tr_manager.get_width(xm_layer, 'clk')
+
+        min_sep = self.min_sep_col
+        min_sep += (min_sep & 1)
+        sub_sep = self.sub_sep_col
+        sub_sep2 = sub_sep // 2
+        sync_ncol = sync_master.num_cols
+        self._buf_ncol = buf_master.num_cols
+        sup_info = self.get_supply_column_info(xm_layer)
+        tap_ncol = sup_info.ncol
+        tap_off = self._buf_ncol + sub_sep2
+        sync_off = tap_off + tap_ncol + sub_sep2 + sync_ncol
+        sync_delta = sync_ncol + min_sep
+        ncol_tot = sync_off + (nsync2 - 1) * sync_delta
+
+        # add buffer and set sized
+        buf = self.add_tile(buf_master, 0, 0)
+        self.set_mos_size(num_cols=ncol_tot, num_tiles=5)
+
+        # add flops
+        bot_pins = self._draw_sync_row(sync_master, 0, nsync2, sync_off, sync_delta, True)
+        top_pins = self._draw_sync_row(sync_master, 2, nsync2, ncol_tot, -sync_delta, False)
+
+        # add supply connections
+        lay_range = range(conn_layer, xm_layer + 1)
+        vdd_table: Dict[int, List[WireArray]] = {lay: [] for lay in lay_range}
+        vss_table: Dict[int, List[WireArray]] = {lay: [] for lay in lay_range}
+        for tile_idx in range(self.num_tile_rows):
+            self.add_supply_column(sup_info, tap_off, vdd_table, vss_table, ridx_p=-1,
+                                   ridx_n=0, tile_idx=tile_idx)
+
+        # routing
+        # supplies
+        vdd_hm_list = bot_pins['VDD']
+        vdd_hm_list.extend(top_pins['VDD'])
+        vss_hm_list = bot_pins['VSS']
+        vss_hm_list.extend(top_pins['VSS'])
+        vdd_hm_list.extend(buf.port_pins_iter('VDD'))
+        vss_hm_list.extend(buf.port_pins_iter('VSS'))
+        vdd_hm_list = self.connect_wires(vdd_hm_list)
+        vss_hm_list = self.connect_wires(vss_hm_list)
+        for lay in range(hm_layer, xm_layer + 1, 2):
+            vss = vss_table[lay]
+            vdd = vdd_table[lay]
+            if lay == hm_layer:
+                vss.extend(vss_hm_list)
+                vdd.extend(vdd_hm_list)
+            vdd = self.connect_wires(vdd)
+            vss = self.connect_wires(vss)
+            self.add_pin(f'VDD_{lay}', vdd)
+            self.add_pin(f'VSS_{lay}', vss)
+
+        # datapath
+        self.connect_to_track_wires(bot_pins['outp'], top_pins['inp'])
+        self.connect_to_track_wires(bot_pins['outn'], top_pins['inn'])
+        self.connect_to_track_wires(bot_pins['inp'], vdd_hm_list[0])
+        self.connect_to_track_wires(bot_pins['inn'], vss_hm_list[0])
+        self.add_pin('VSS_bot', vss_hm_list[0])
+        outp = top_pins['outp']
+        xm_tidx = grid.coord_to_track(xm_layer, outp.middle, mode=RoundMode.NEAREST)
+        out = self.connect_to_tracks(outp, TrackID(xm_layer, xm_tidx, width=xm_w),
+                                     min_len_mode=MinLenMode.UPPER)
+        self.add_pin('out', out)
+
+        # clk
+        clk_list = bot_pins['clk']
+        clk_list.extend(top_pins['clk'])
+        clk = self.connect_wires(clk_list)
+        buf_out = buf.get_pin('out')
+        xm_tidx = grid.coord_to_track(xm_layer, buf_out.middle, mode=RoundMode.NEAREST)
+        buf_out = self.connect_to_tracks(buf_out, TrackID(xm_layer, xm_tidx, width=xm_w_clk),
+                                         min_len_mode=MinLenMode.UPPER)
+        self.add_pin('clk_buf', buf_out)
+        self.add_pin('clk_sync', clk)
+        self.reexport(buf.get_port('in'), net_name='clk_in')
+
+        # rstlb
+        rstlb_list = [bot_pins['rstlb'], top_pins['rstlb']]
+        self.add_pin('rstlb', rstlb_list)
+
+        self.sch_params = dict(
+            sync_params=sync_master.sch_params,
+            buf_params=buf_master.sch_params.copy(remove=['dual_output']),
+            nsync=nsync,
+        )
+
+    def _draw_sync_row(self, master: FlopStrongArm, tile: int, num: int, cur_col: int, delta: int,
+                       in_vm: bool) -> Dict[str, Union[WireArray, List[WireArray]]]:
+        vm_layer = self.conn_layer + 2
+        xm_layer = vm_layer + 1
+        grid = self.grid
+        tr_manager = self.tr_manager
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+        xm_w = tr_manager.get_width(xm_layer, 'sig')
+
+        outp_prev = outn_prev = None
+        ans = {}
+        rstlb_list = []
+        clk_list = []
+        vdd_list = []
+        vss_list = []
+        xmt = xmb = 0
+        for col in range(cur_col, cur_col + num * delta, delta):
+            inst = self.add_tile(master, tile, col, flip_lr=True)
+            rstlb_list.append(inst.get_pin('rstlb'))
+            vdd_list.extend(inst.port_pins_iter('VDD'))
+            vss_list.extend(inst.port_pins_iter('VSS'))
+            clk = inst.get_pin('clk')
+            vm_tidx = grid.coord_to_track(vm_layer, clk.middle, mode=RoundMode.NEAREST)
+            clk_list.append(self.connect_to_tracks(clk, TrackID(vm_layer, vm_tidx, width=vm_w)))
+            rstlbr = inst.get_pin('rstlb_vm_l')
+            rstlbl = inst.get_pin('rsthb')
+            if outp_prev is None:
+                outp_prev = inst.get_pin('outp')
+                outn_prev = inst.get_pin('outn')
+                loc_list = tr_manager.place_wires(xm_layer, ['sig', 'sig', 'sig'],
+                                                  center_coord=outp_prev.middle)[1]
+                xmb = loc_list[0]
+                xmt = loc_list[2]
+                if in_vm:
+                    vml = tr_manager.get_next_track(vm_layer, rstlbl.track_id.base_index,
+                                                    'sig', 'sig', up=-2)
+                    vmr = tr_manager.get_next_track(vm_layer, rstlbr.track_id.base_index,
+                                                    'sig', 'sig', up=2)
+                    inp = self.connect_to_tracks(inst.get_pin('inp'),
+                                                 TrackID(vm_layer, vml, width=vm_w))
+                    inn = self.connect_to_tracks(inst.get_pin('inn'),
+                                                 TrackID(vm_layer, vmr, width=vm_w))
+                    ans['inp'] = inp
+                    ans['inn'] = inn
+                else:
+                    ans['inp'] = inst.get_pin('inp')
+                    ans['inn'] = inst.get_pin('inn')
+            else:
+                inp = inst.get_pin('inp')
+                inn = inst.get_pin('inn')
+                vml = tr_manager.get_next_track(vm_layer, rstlbl.track_id.base_index,
+                                                'sig', 'sig', up=False)
+                vmr = tr_manager.get_next_track(vm_layer, rstlbr.track_id.base_index,
+                                                'sig', 'sig', up=True)
+                inp = self.connect_to_tracks(inp, TrackID(vm_layer, vml, width=vm_w))
+                inn = self.connect_to_tracks(inn, TrackID(vm_layer, vmr, width=vm_w))
+                inp, inn = self.connect_differential_tracks(inp, inn, xm_layer, xmt, xmb,
+                                                            width=xm_w)
+                self.connect_differential_wires(outp_prev, outn_prev, inp, inn)
+
+                outp_prev = inst.get_pin('outp')
+                outn_prev = inst.get_pin('outn')
+
+        ans['outp'] = outp_prev
+        ans['outn'] = outn_prev
+        ans['clk'] = clk_list
+        ans['rstlb'] = self.connect_wires(rstlb_list)[0]
+        ans['VDD'] = self.connect_wires(vdd_list)
+        ans['VSS'] = self.connect_wires(vss_list)
+        return ans
+
+
+class DCCHelper(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_dcc_helper
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            core_params='DCCHelperCore parameters.',
+            sync_params='synchronizer flop parameters.',
+            buf_params='clock buffer parameters.',
+            nsync='Number of synchronizer flops.',
+            vm_pitch='vm_layer pin pitch',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(vm_pitch=0.5)
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo)
+
+        core_params: Param = self.params['core_params']
+        sync_params: Param = self.params['sync_params']
+        buf_params: Param = self.params['buf_params']
+        nsync: int = self.params['nsync']
+        vm_pitch: HalfInt = HalfInt.convert(self.params['vm_pitch'])
+
+        # create masters
+        core_params = core_params.copy(append=dict(pinfo=pinfo, vm_pitch=vm_pitch))
+        half_params = dict(pinfo=pinfo, sync_params=sync_params, buf_params=buf_params,
+                           nsync=nsync)
+
+        core_master: DCCHelperCore = self.new_template(DCCHelperCore, params=core_params)
+        sync_master: SyncChain = self.new_template(SyncChain, params=half_params)
+        buf_ncol = sync_master.buf_ncol
+
+        # placement
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+        vm_w = self.tr_manager.get_width(vm_layer, 'sig')
+
+        min_sep = self.min_sep_col
+        min_sep += (min_sep & 1)
+        core_ncol = core_master.num_cols
+        sync_ncol = sync_master.num_cols
+        center_ncol = max(2 * buf_ncol + min_sep, core_ncol)
+        half_sep = center_ncol - 2 * buf_ncol
+        core_off = sync_ncol - buf_ncol + (center_ncol - core_ncol) // 2
+
+        # add masters
+        core = self.add_tile(core_master, 1, core_off)
+        syncl = self.add_tile(sync_master, 0, sync_ncol, flip_lr=True)
+        syncr = self.add_tile(sync_master, 0, sync_ncol + half_sep)
+        self.set_mos_size(num_cols=2 * sync_ncol + half_sep)
+        bbox = self.bound_box
+        xl = bbox.xl
+        xh = bbox.xh
+        xm = (xl + xh) // 2
+
+        # routing
+        # supplies
+        for lay in [hm_layer, xm_layer]:
+            for name in ['VDD', 'VSS']:
+                cur_name = f'{name}_{lay}'
+                warrs = syncl.get_all_port_pins(cur_name)
+                warrs.extend(syncr.port_pins_iter(cur_name))
+                warrs = self.connect_wires(warrs, lower=xl, upper=xh)
+                if lay == xm_layer:
+                    self.add_pin(name, warrs)
+
+        # rstb for synchronizers
+        grid = self.grid
+        vm_p_htr = vm_pitch.dbl_value
+        vm_center = grid.coord_to_track(vm_layer, xm)
+        vm_delta = grid.coord_to_track(vm_layer, xh, mode=RoundMode.LESS_EQ) - vm_center
+        vm_dhtr = -(-vm_delta.dbl_value // vm_p_htr) * vm_p_htr
+        vm_delta = HalfInt(vm_dhtr)
+        rstlb_r_tidx = vm_center + vm_delta
+        rstlb_l_tidx = vm_center - vm_delta
+        rstlbr_list = syncr.get_all_port_pins('rstlb')
+        vss_bot = syncr.get_pin('VSS_bot')
+        rstlbr_list.append(vss_bot)
+        rstb_ref = self.connect_to_tracks(rstlbr_list, TrackID(vm_layer, rstlb_r_tidx, width=vm_w))
+        rstlbl_list = syncl.get_all_port_pins('rstlb')
+        rstb = self.connect_to_tracks(rstlbl_list, TrackID(vm_layer, rstlb_l_tidx, width=vm_w),
+                                      track_lower=rstb_ref.lower)
+        self.add_pin('rstb', rstb)
+
+        # clk for synchronizers
+        clk_ref = self.connect_to_track_wires(vss_bot, syncr.get_pin('clk_sync'))
+        clkl = self.extend_wires(syncl.get_pin('clk_sync'), lower=clk_ref.lower)
+        clk_ref = self.connect_to_track_wires(clkl, syncl.get_pin('clk_buf'))
+        self.extend_wires(syncr.get_pin('clk_buf'), upper=2 * xm - clk_ref.lower)
+
+        # rstb_sync
+        warr_list = []
+        rstb_sync = syncl.get_pin('out')
+        rstb_ref = self.connect_to_tracks(core.get_pin('rstlb_vm_l'), rstb_sync.track_id,
+                                          ret_wire_list=warr_list)
+        self.extend_wires(core.get_pin('rsthb'), upper=warr_list[0].upper)
+        rstb_ref = self.connect_wires([rstb_ref, syncl.get_pin('out')])[0]
+        self.extend_wires(syncr.get_pin('out'), lower=2 * xm - rstb_ref.upper)
+
+        # input clocks
+        launch = self.connect_to_track_wires(syncl.get_pin('clk_in'), core.get_pin('launch'))
+        measure = self.connect_to_track_wires(syncr.get_pin('clk_in'), core.get_pin('measure'))
+
+        self.add_pin('launch', self.extend_wires(launch, lower=0))
+        self.add_pin('measure', self.extend_wires(measure, lower=0))
+
+        # reexports
+        self.reexport(core.get_port('clk_out'), net_name='ckout')
+        self.reexport(core.get_port('clk_dcd'))
+        self.reexport(core.get_port('dcc_byp'))
+
+        self.sch_params = sync_master.sch_params.copy(append=dict(
+            core_params=core_master.sch_params))
diff --git a/src/aib_ams/layout/dcc_helper_core.py b/src/aib_ams/layout/dcc_helper_core.py
new file mode 100644
index 0000000..608b5b9
--- /dev/null
+++ b/src/aib_ams/layout/dcc_helper_core.py
@@ -0,0 +1,186 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Optional, Type
+
+from pybag.enum import MinLenMode
+
+from bag.util.math import HalfInt
+from bag.util.immutable import Param
+from bag.layout.template import TemplateDB
+from bag.layout.routing.base import TrackID
+from bag.design.database import Module
+
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase
+
+from bag3_digital.layout.stdcells.gates import InvCore
+from bag3_digital.layout.sampler.flop_strongarm import FlopStrongArm
+from bag3_digital.layout.stdcells.mux import Mux2to1Matched
+
+from ..schematic.aib_dcc_helper_core import aib_ams__aib_dcc_helper_core
+
+
+class DCCHelperCore(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_dcc_helper_core
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            mux_params='clock mux parameters.',
+            flop_params='divider flop parameters.',
+            inv_params='inverter parameters.',
+            vm_pitch='vm_layer pin pitch',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(vm_pitch=0.5)
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo, flip_tile=True)
+
+        mux_params: Param = self.params['mux_params']
+        flop_params: Param = self.params['flop_params']
+        inv_params: Param = self.params['inv_params']
+        vm_pitch: HalfInt = HalfInt.convert(self.params['vm_pitch'])
+
+        vm_pitch_htr = vm_pitch.dbl_value
+        # create masters
+        mux_params = mux_params.copy(append=dict(pinfo=pinfo, vertical_sel=False))
+        flop_params = flop_params.copy(append=dict(pinfo=pinfo, has_rstlb=True,
+                                                   swap_outbuf=True, out_pitch=vm_pitch))
+        mux_master: Mux2to1Matched = self.new_template(Mux2to1Matched, params=mux_params)
+        flop_master: FlopStrongArm = self.new_template(FlopStrongArm, params=flop_params)
+
+        inv_in_tidx = mux_master.get_port('in<0>').get_pins()[0].track_id.base_index
+        inv_params = inv_params.copy(append=dict(pinfo=pinfo, sig_locs={'in': inv_in_tidx}))
+        inv_master: InvCore = self.new_template(InvCore, params=inv_params)
+
+        # placement
+        min_sep = self.min_sep_col
+        min_sep += (min_sep & 1)
+        buf_ncol = inv_master.num_cols
+        mux_ncol = mux_master.num_cols
+        flop_ncol = flop_master.num_cols
+        ncol_tot = max(flop_ncol, mux_ncol + 2 * min_sep + 2 * buf_ncol)
+        mux_off = (ncol_tot - mux_ncol) // 2
+        flop_off = (ncol_tot - flop_ncol) // 2
+
+        mux_in = self.add_tile(mux_master, 0, mux_off)
+        flop = self.add_tile(flop_master, 1, flop_off)
+        mux_out = self.add_tile(mux_master, 3, mux_off)
+        invl = self.add_tile(inv_master, 3, 0)
+        invr = self.add_tile(inv_master, 3, ncol_tot, flip_lr=True)
+        self.set_mos_size()
+        yh = self.bound_box.yh
+        xm = self.bound_box.xm
+
+        # routing
+        vm_layer = self.conn_layer + 2
+        grid = self.grid
+        tr_manager = self.tr_manager
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+        vm_w_ck = tr_manager.get_width(vm_layer, 'clk')
+
+        # supplies
+        vdd_list = []
+        vss_list = []
+        for inst in [mux_in, flop, mux_out, invl, invr]:
+            vdd_list.extend(inst.port_pins_iter('VDD'))
+            vss_list.extend(inst.port_pins_iter('VSS'))
+        self.add_pin('VDD', self.connect_wires(vdd_list), connect=True)
+        self.add_pin('VSS', self.connect_wires(vss_list), connect=True)
+
+        # input mux
+        flop_clk = mux_in.get_pin('out')
+        self.connect_to_track_wires(flop_clk, flop.get_pin('clk'))
+        in0 = mux_in.get_pin('in<0>')
+        in1 = mux_in.get_pin('in<1>')
+        clk_vm_tidx = flop_clk.track_id.base_index
+        in_vm_test = tr_manager.get_next_track(vm_layer, clk_vm_tidx, 'sig', 'clk', up=True)
+        in_dhtr = (-(in_vm_test - clk_vm_tidx).dbl_value // vm_pitch_htr) * vm_pitch_htr
+        in_delta = HalfInt(in_dhtr)
+        in0 = self.connect_to_tracks(in0, TrackID(vm_layer, clk_vm_tidx + in_delta, width=vm_w_ck),
+                                     min_len_mode=MinLenMode.LOWER)
+        in1 = self.connect_to_tracks(in1, TrackID(vm_layer, clk_vm_tidx - in_delta, width=vm_w_ck),
+                                     min_len_mode=MinLenMode.LOWER)
+        self.add_pin('launch', in0)
+        self.add_pin('measure', in1)
+
+        # divider flop
+        clkp = flop.get_pin('outp')
+        clkn = flop.get_pin('outn')
+        self.connect_differential_wires(mux_in.get_pin('nsel'), mux_in.get_pin('nselb'),
+                                        clkp, clkn)
+        self.connect_to_track_wires(clkp, mux_in.get_pin('psel'))
+        self.connect_to_track_wires(clkn, mux_in.get_pin('pselb'))
+        self.connect_to_track_wires(flop.get_pin('inn'), clkp)
+        self.connect_to_track_wires(flop.get_pin('inp'), clkn)
+        self.connect_to_tracks(mux_out.get_pin('in<0>'), clkp.track_id, track_upper=yh,
+                               track_lower=clkp.lower)
+        self.reexport(flop.get_port('rstlb'))
+        self.reexport(flop.get_port('rstlb_vm_l'))
+        self.reexport(flop.get_port('rsthb'))
+
+        # output mux
+        clkn_tid = clkn.track_id
+        vm_sp_le = grid.get_line_end_space(vm_layer, clkn_tid.width)
+        clk_dcd = self.connect_to_tracks(mux_out.get_pin('in<1>'), clkn_tid,
+                                         track_lower=clkn.upper + vm_sp_le, track_upper=yh)
+        clk_out = self.extend_wires(mux_out.get_pin('out'), upper=yh)
+        self.add_pin('clk_dcd', clk_dcd)
+        self.add_pin('clk_out', clk_out)
+
+        # output mux select signals
+        out_sel = invl.get_pin('out')
+        out_selb = invr.get_pin('out')
+        dcc_byp_delta = tr_manager.get_next_track(vm_layer, out_selb.track_id.base_index,
+                                                  'sig', 'sig', up=True) - clk_vm_tidx
+        dcc_byp_dhtr = -(-dcc_byp_delta.dbl_value // vm_pitch_htr) * vm_pitch_htr
+        dcc_byp_delta = HalfInt(dcc_byp_dhtr)
+        dcc_byp_tidx = clk_vm_tidx + dcc_byp_delta
+        out_selb_vm_tidx = clk_vm_tidx - dcc_byp_delta
+
+        self.connect_to_track_wires(mux_out.get_pin('psel'), out_sel)
+        self.connect_to_track_wires(mux_out.get_pin('pselb'), out_selb)
+        nsel, nselb = self.connect_differential_wires(out_sel, out_selb,
+                                                      mux_out.get_pin('nsel'),
+                                                      mux_out.get_pin('nselb'))
+        sel_hm_list = []
+        selb_vm = self.connect_to_tracks([nselb, invl.get_pin('in')],
+                                         TrackID(vm_layer, out_selb_vm_tidx, width=vm_w),
+                                         track_upper=yh, ret_wire_list=sel_hm_list)
+        # get differential matching
+        xl = min((wire.lower for wire in sel_hm_list))
+        xh = 2 * xm - xl
+        self.extend_wires([nsel, nselb], lower=xl, upper=xh)
+
+        dcc_byp = self.connect_to_tracks(invr.get_pin('in'),
+                                         TrackID(vm_layer, dcc_byp_tidx, width=vm_w),
+                                         track_lower=selb_vm.lower, track_upper=yh)
+        self.add_pin('dcc_byp', dcc_byp)
+
+        self.sch_params = dict(
+            mux_params=mux_master.sch_params,
+            flop_params=flop_master.sch_params,
+            inv_params=inv_master.sch_params,
+        )
diff --git a/src/aib_ams/layout/delay_line.py b/src/aib_ams/layout/delay_line.py
new file mode 100644
index 0000000..e1f16f8
--- /dev/null
+++ b/src/aib_ams/layout/delay_line.py
@@ -0,0 +1,1473 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Optional, Type, List, Union, Mapping, Tuple
+
+from pybag.enum import RoundMode, MinLenMode, Direction
+from ..enum import DrawTaps
+
+from bag.layout.core import PyLayInstance
+from bag.util.immutable import Param
+from bag.layout.template import TemplateDB
+from bag.layout.routing.base import TrackID, WireArray
+from bag.design.module import Module
+from bag.util.math import HalfInt
+
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase
+from xbase.layout.enum import MOSWireType, MOSType
+from xbase.layout.mos.placement.data import TilePatternElement
+
+from bag3_digital.layout.stdcells.gates import NAND2Core, InvCore
+from bag3_digital.layout.stdcells.memory import FlopScanRstlbTwoTile
+
+from ..schematic.aib_dlyline import aib_ams__aib_dlyline
+from ..schematic.aib_dlycell import aib_ams__aib_dlycell
+from ..schematic.aib_dlycell_core import aib_ams__aib_dlycell_core
+from ..schematic.aib_dlycell_no_flop import aib_ams__aib_dlycell_no_flop
+
+
+class DelayCellCore(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+        self._left_vm_margin = 0
+        self._right_vm_margin = 0
+
+    @property
+    def left_vm_margin(self) -> int:
+        return self._left_vm_margin
+
+    @property
+    def right_vm_margin(self) -> int:
+        return self._right_vm_margin
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_dlycell_core
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            seg_dict='Dictionary of NAND segments',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            draw_taps='LEFT or RIGHT or BOTH or NONE',
+            vertical_out='True to have output on vertical metal',
+            flip_vm='Flip vm_layer tracks used for routing in_p and co_p, and ci_p and out_p',
+            sig_locs='Dictionary of signal locations',
+            substrate_row='True to have dedicated substrate row.',
+            draw_substrate_row='If substrate row, draw taps at this level of hierarchy',
+            tile0='Tile index of logic tile 0',
+            tile1='Tile index of logic tile 1',
+            stack_nand='Number of stacks in NAND gates of DelayCellCore',
+            feedback='True to connect ci_p and co_p',
+            output_sr_pins='True to output measurement pins.',
+            stand_alone=('True to make this block LVS clean by itself.  '
+                         'Used only if substrate_row is True, and this will add an '
+                         'extra substrate row.'),
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_n=0,
+            ridx_p=-1,
+            draw_taps='NONE',
+            vertical_out=True,
+            flip_vm=False,
+            sig_locs={},
+            substrate_row=False,
+            draw_substrate_row=True,
+            tile0=0,
+            tile1=1,
+            stack_nand=1,
+            feedback=False,
+            output_sr_pins=False,
+            stand_alone=False,
+        )
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo)
+
+        seg_dict: Dict[str, Any] = self.params['seg_dict']
+        ridx_n: int = self.params['ridx_n']
+        ridx_p: int = self.params['ridx_p']
+        draw_taps: DrawTaps = DrawTaps[self.params['draw_taps']]
+        vertical_out: bool = self.params['vertical_out']
+        flip_vm: bool = self.params['flip_vm']
+        sig_locs: Mapping[str, Union[float, HalfInt]] = self.params['sig_locs']
+        substrate_row: bool = self.params['substrate_row']
+        draw_substrate_row: bool = self.params['draw_substrate_row']
+        tile0: int = self.params['tile0']
+        tile1: int = self.params['tile1']
+        stack_nand: int = self.params['stack_nand']
+        feedback: bool = self.params['feedback']
+        output_sr_pins: bool = self.params['output_sr_pins']
+        stand_alone: bool = self.params['stand_alone']
+
+        if feedback and not vertical_out:
+            raise ValueError('cannot connect ci_pand co_p if vertical_out=False')
+
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+
+        _pinfo = self.get_tile_pinfo(tile0)
+        nand_params = dict(
+            pinfo=_pinfo,
+            ridx_n=ridx_n,
+            ridx_p=ridx_p,
+            show_pins=False,
+            vertical_sup=substrate_row,
+            stack_p=stack_nand,
+            stack_n=stack_nand,
+        )
+
+        nand_in_params = dict(
+            seg=seg_dict['in'],
+            vertical_out=False,
+            **nand_params,
+        )
+        nand_in_master = self.new_template(NAND2Core, params=nand_in_params)
+
+        nd0 = nand_in_master.get_track_index(ridx_n, MOSWireType.DS_GATE, wire_name='sig',
+                                             wire_idx=0)
+        pd1 = nand_in_master.get_track_index(ridx_p, MOSWireType.DS_GATE, wire_name='sig',
+                                             wire_idx=-1)
+
+        ng1 = nand_in_master.get_track_index(ridx_n, MOSWireType.G, wire_name='sig', wire_idx=1)
+        pg0 = nand_in_master.get_track_index(ridx_p, MOSWireType.G, wire_name='sig', wire_idx=-1)
+        pg1 = nand_in_master.get_track_index(ridx_p, MOSWireType.G, wire_name='sig', wire_idx=-2)
+
+        bk_idx = sig_locs.get('bk', pg1)
+        sr1_in1_idx = ng1 if bk_idx == pg1 else pg1
+        nand_in_params = dict(
+            seg=seg_dict['in'],
+            sig_locs={'nin0': pg0, 'nin1': bk_idx},
+            vertical_out=False,
+            **nand_params,
+        )
+        nand_in_master = self.new_template(NAND2Core, params=nand_in_params)
+
+        nand_out_params = dict(
+            seg=seg_dict['out'],
+            sig_locs={},
+            vertical_out=False,
+            **nand_params,
+        )
+        nand_out_master = self.new_template(NAND2Core, params=nand_out_params)
+
+        nand_sr0_params = dict(
+            seg=seg_dict['sr'],
+            sig_locs={'nin0': pg1, 'nin1': ng1, 'nout': nd0, 'pout': pd1},
+            vertical_out=False,
+            **nand_params,
+        )
+        nand_sr0_master = self.new_template(NAND2Core, params=nand_sr0_params)
+
+        nand_sr1_params = dict(
+            seg=seg_dict['sr'],
+            sig_locs={'nin0': pg0, 'nin1': sr1_in1_idx, 'nout': nd0, 'pout': pd1},
+            vertical_out=False,
+            **nand_params,
+        )
+        nand_sr1_master = self.new_template(NAND2Core, params=nand_sr1_params)
+
+        # --- Placement --- #
+        # 1. Compute number of columns for taps
+        tap_n_cols = self.get_tap_ncol()
+        tap_sep_col = self.sub_sep_col
+        l_offset = tap_sep_col + tap_n_cols if draw_taps in DrawTaps.LEFT | DrawTaps.BOTH else 0
+        r_offset = tap_sep_col + tap_n_cols if draw_taps in DrawTaps.RIGHT | DrawTaps.BOTH else 0
+
+        tr_manager = _pinfo.tr_manager
+
+        # 2. place output NAND on row 0 and input NAND above it on row 1
+        cur_col = l_offset
+        nand_out_inst = self.add_tile(nand_out_master, tile0, cur_col)
+        nand_in_inst = self.add_tile(nand_in_master, tile1, cur_col)
+
+        # 3. place sr NANDs
+        tr_w_h = tr_manager.get_width(hm_layer, 'sig')
+        sep = max(self.min_sep_col, self.get_hm_sp_le_sep_col(tr_w_h))
+        sep += sep & 1
+        cur_col += max(nand_out_master.num_cols, nand_in_master.num_cols) + sep
+        nand_sr0_inst = self.add_tile(nand_sr0_master, tile0, cur_col)
+        nand_sr1_inst = self.add_tile(nand_sr1_master, tile1, cur_col)
+
+        # 4. set size
+        cur_col += max(nand_sr0_master.num_cols, nand_sr1_master.num_cols) + r_offset
+        if stand_alone and substrate_row:
+            self.set_mos_size(num_cols=cur_col, num_tiles=self.num_tile_rows + 1)
+        else:
+            self.set_mos_size(cur_col)
+
+        # 5. add taps
+        tap_vdd_list, tap_vss_list = [], []
+        if draw_taps in DrawTaps.LEFT | DrawTaps.BOTH:
+            for i in range(self.num_tile_rows):
+                self.add_tap(0, tap_vdd_list, tap_vss_list, tile_idx=i)
+        if draw_taps in DrawTaps.RIGHT | DrawTaps.BOTH:
+            for i in range(self.num_tile_rows):
+                self.add_tap(cur_col, tap_vdd_list, tap_vss_list, flip_lr=True, tile_idx=i)
+
+        # --- Routing --- #
+        # 1. vdd/vss
+        vdd_list, vss0_list, vss1_list = [], [], []
+        for inst in [nand_in_inst, nand_sr1_inst]:
+            vdd_list += inst.get_all_port_pins('VDD')
+            vss1_list += inst.get_all_port_pins('VSS')
+        for inst in [nand_out_inst, nand_sr0_inst]:
+            vdd_list += inst.get_all_port_pins('VDD')
+            vss0_list += inst.get_all_port_pins('VSS')
+
+        if substrate_row:
+            if draw_substrate_row:
+                for _tidx in range(self.num_tile_rows):
+                    _pinfo = self.get_tile_pinfo(_tidx)
+                    for _ridx in range(_pinfo.num_rows):
+                        rtype = _pinfo.get_row_place_info(_ridx).row_info.row_type
+                        if rtype.is_substrate:
+                            warrs = self.add_substrate_contact(_ridx, 0, tile_idx=_tidx,
+                                                               seg=self.num_cols)
+                            sup_name = 'VDD' if rtype is MOSType.ntap else 'VSS'
+                            self.add_pin(f'{sup_name}_sub', warrs, label=f'{sup_name}:')
+            self.add_pin('VDD', vdd_list, label='VDD:')
+            self.add_pin('VSS0', vss0_list, label='VSS:')
+            self.add_pin('VSS1', vss1_list, label='VSS:')
+        else:
+            vdd = self.connect_wires(vdd_list)
+            vss = self.connect_wires(vss0_list + vss1_list)
+
+            self.connect_to_track_wires(tap_vdd_list, vdd)
+            self.connect_to_track_wires(tap_vss_list, vss)
+
+            self.add_pin('VDD', vdd, label='VDD:')
+            self.add_pin('VSS', vss, label='VSS:')
+
+        # 2. connect in_p to input of nand_in and nand_sr1
+        in_p = self.connect_wires([nand_in_inst.get_pin('nin<0>'), nand_sr1_inst.get_pin('nin<0>')])
+
+        # 3. Cross couple
+        # 3a. output of sr_0 to input of sr_1
+        sr0_o_idx = self.grid.coord_to_track(vm_layer, nand_sr0_inst.get_pin('nout').middle,
+                                             mode=RoundMode.LESS_EQ)
+        tr_w_v = tr_manager.get_width(vm_layer, 'sig')
+        sr0_o_tid = TrackID(vm_layer, sr0_o_idx, width=tr_w_v)
+        if self.can_short_adj_tracks:
+            right = self.connect_to_tracks([nand_sr0_inst.get_pin('nout'),
+                                            nand_sr1_inst.get_pin('nin<1>')], sr0_o_tid)
+        else:
+            right = self.connect_to_tracks([nand_sr0_inst.get_pin('pout'),
+                                            nand_sr0_inst.get_pin('nout'),
+                                            nand_sr1_inst.get_pin('nin<1>')], sr0_o_tid)
+        avail_idx = tr_manager.get_next_track(vm_layer, right.track_id.base_index, 'sig', 'sup',
+                                              up=True)
+        self.add_pin('vm_r', right, hide=True)
+        self._right_vm_margin = self.bound_box.xh - self.grid.track_to_coord(vm_layer, avail_idx)
+
+        # 3b. output of sr_1 to input of sr_0 and nand_out
+        sr1_o_tid = tr_manager.get_next_track_obj(sr0_o_tid, 'sig', 'sig', count_rel_tracks=-1)
+        if self.can_short_adj_tracks:
+            left = self.connect_to_tracks(
+                [nand_sr1_inst.get_pin('nout'), nand_sr0_inst.get_pin('nin<1>'),
+                 nand_out_inst.get_pin('nin<1>')], sr1_o_tid)
+        else:
+            left = self.connect_to_tracks(
+                [nand_sr1_inst.get_pin('pout'), nand_sr1_inst.get_pin('nout'),
+                 nand_sr0_inst.get_pin('nin<1>'),
+                 nand_out_inst.get_pin('nin<1>')], sr1_o_tid)
+        self.add_pin('vm_l', left, hide=True)
+
+        # 4. Connect bk1
+        bk1_vm_idx_2 = tr_manager.get_next_track_obj(sr1_o_tid, 'sig', 'sig', count_rel_tracks=-1)
+        bk1 = nand_in_inst.get_pin('nin<1>')
+        bk1_2 = nand_sr0_inst.get_pin('nin<0>')
+        bk1_vm_idx = self.grid.coord_to_track(vm_layer, bk1_2.lower, mode=RoundMode.LESS_EQ)
+        bk1_vm_idx = min(bk1_vm_idx, bk1_vm_idx_2.base_index)
+        bk1_tid = TrackID(vm_layer, bk1_vm_idx, width=tr_w_v)
+        bk1_vm = self.connect_to_tracks([bk1, bk1_2], bk1_tid)
+        self.add_pin('bk1_vm', bk1_vm, hide=True)
+
+        avail_vm_idx = tr_manager.get_next_track(vm_layer, bk1_vm_idx, 'sig', 'sig', up=False)
+
+        # 5. Get in_p, co_p, ci_p, out_p on vm_layer if vertical_out is True
+        if self.can_short_adj_tracks:
+            co_p_warrs = [nand_in_inst.get_pin('nout')]
+            out_p_warrs = [nand_out_inst.get_pin('nout')]
+        else:
+            co_p_warrs = [nand_in_inst.get_pin('pout'), nand_in_inst.get_pin('nout')]
+            out_p_warrs = [nand_out_inst.get_pin('pout'), nand_out_inst.get_pin('nout')]
+        if vertical_out:
+            # place 4 vm_layer tracks
+            num_vm, vm_locs = self.tr_manager.place_wires(vm_layer, ['sig'] * 4)
+            mid_idx = self.grid.coord_to_track(vm_layer, nand_in_inst.get_pin('nout').middle,
+                                               mode=RoundMode.NEAREST)
+            try:
+                loc_mid = (vm_locs[0] + vm_locs[-1]) / 2
+            except ValueError:
+                loc_mid = (vm_locs[0] + vm_locs[-1]) // 2 + HalfInt(1)
+            vm_offset = mid_idx - loc_mid
+
+            # make sure vm tracks don't collide with bk1_vm_idx
+            if vm_offset + vm_locs[-1] > avail_vm_idx:
+                vm_offset = avail_vm_idx - vm_locs[-1]
+
+            # output
+            co_p_idx = vm_offset + (vm_locs[0] if flip_vm else vm_locs[2])
+            in_p_idx = vm_offset + (vm_locs[2] if flip_vm else vm_locs[0])
+            out_p_idx = vm_offset + (vm_locs[3] if flip_vm else vm_locs[1])
+            ci_p_idx = vm_offset + (vm_locs[1] if flip_vm else vm_locs[3])
+
+            if feedback:
+                co_p_warrs.append(nand_out_inst.get_pin('nin<0>'))
+                co_p_idx = ci_p_idx
+
+            co_p = self.connect_to_tracks(co_p_warrs, TrackID(vm_layer, co_p_idx, width=tr_w_v),
+                                          min_len_mode=MinLenMode.MIDDLE)
+            self.add_pin('co_p', co_p, hide=feedback)
+
+            self.add_pin('out_p', self.connect_to_tracks(out_p_warrs,
+                                                         TrackID(vm_layer, out_p_idx,
+                                                                 width=tr_w_v),
+                                                         min_len_mode=MinLenMode.MIDDLE))
+            # input
+            in_p = self.connect_to_tracks(in_p, TrackID(vm_layer, in_p_idx, width=tr_w_v),
+                                          min_len_mode=MinLenMode.LOWER)
+            self._left_vm_margin = self.grid.track_to_coord(vm_layer, in_p_idx) - self.bound_box.xl
+            self.add_pin('in_p', in_p)
+            if not feedback:
+                ci_p = self.connect_to_tracks(nand_out_inst.get_pin('nin<0>'),
+                                              TrackID(vm_layer, ci_p_idx, width=tr_w_v),
+                                              min_len_mode=MinLenMode.UPPER)
+                # TODO: HACKS to fix corner spacing rule
+                ci_p = self.extend_wires(ci_p, upper=bk1_vm.lower + 16)
+                self.add_pin('ci_p', ci_p)
+        else:
+            # output
+            if self.can_short_adj_tracks:
+                self.add_pin('co_p', co_p_warrs, label='co_p:')
+                self.add_pin('out_p', out_p_warrs, label='out_p:')
+            else:
+                self.add_pin('co_pp', co_p_warrs[0], label='co_p:')
+                self.add_pin('co_pn', co_p_warrs[1], label='co_p:')
+                self.add_pin('out_pp', out_p_warrs[0], label='out_p:')
+                self.add_pin('out_pn', out_p_warrs[1], label='out_p:')
+            # input
+            self.add_pin('in_p', in_p)
+            self.add_pin('ci_p', nand_out_inst.get_pin('nin<0>'))
+
+        # --- Pins --- #
+        # input pins
+        self.add_pin('bk1_in', bk1, label='bk1:', hide=False)
+        self.add_pin('bk1_out', bk1_2, label='bk1:', hide=False)
+
+        self.sch_params = dict(
+            in_params=nand_in_master.sch_params,
+            sr0_params=nand_sr0_master.sch_params,
+            sr1_params=nand_sr1_master.sch_params,
+            out_params=nand_out_master.sch_params,
+            feedback=feedback,
+            output_sr_pins=output_sr_pins,
+        )
+
+
+class DelayCell(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+        self._sp_vm_locs: List[Union[int, HalfInt]] = []
+        self._substrate_row_intvl: List[Tuple[int, int]] = []
+
+    @property
+    def substrate_row_intvl(self) -> List[Tuple[int, int]]:
+        return self._substrate_row_intvl
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_dlycell
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            seg_dict='Dictionary of segments',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            draw_taps='LEFT or RIGHT or BOTH or NONE',
+            sp_vm_tracks='Number of vm_tracks that should fit in middle space',
+            row_idx='Row index of this delay cell instance in delay line',
+            flip_nand_vm='flip_vm flag for DelayCellCore',
+            substrate_row='True to have dedicated substrate row.',
+            tile0='Tile index of logic tile 0',
+            tile1='Tile index of logic tile 1',
+            flop_char='True to add flop characterization pins.',
+            stack_nand='Number of stacks in NAND gates of DelayCellCore',
+            num_core='Number of delay cell cores in one delay cell',
+            is_dum='True if this is a dummy cell in the delay line',
+            output_sr_pins='True to output measurement pins.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_n=0,
+            ridx_p=-1,
+            draw_taps='NONE',
+            sp_vm_tracks=0,
+            row_idx=-1,
+            flip_nand_vm=False,
+            substrate_row=False,
+            tile0=0,
+            tile1=1,
+            flop_char=False,
+            stack_nand=1,
+            num_core=1,
+            is_dum=False,
+            output_sr_pins=False,
+        )
+
+    def sp_vm_locs(self) -> List[Union[int, HalfInt]]:
+        return self._sp_vm_locs
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo)
+
+        seg_dict: Dict[str, Any] = self.params['seg_dict']
+        ridx_n: int = self.params['ridx_n']
+        ridx_p: int = self.params['ridx_p']
+        draw_taps: DrawTaps = DrawTaps[self.params['draw_taps']]
+        sp_vm_tracks: int = self.params['sp_vm_tracks']
+        row_idx: Optional[int] = self.params['row_idx']
+        flip_nand_vm: bool = self.params['flip_nand_vm']
+        substrate_row: bool = self.params['substrate_row']
+        tile0: int = self.params['tile0']
+        tile1: int = self.params['tile1']
+        flop_char: bool = self.params['flop_char']
+        stack_nand: bool = self.params['stack_nand']
+        num_core: int = self.params['num_core']
+        is_dum: bool = self.params['is_dum']
+        output_sr_pins: bool = self.params['output_sr_pins']
+
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+
+        # make masters
+        _pinfo = self.get_tile_pinfo(tile0)
+        params = dict(
+            ridx_n=ridx_n,
+            ridx_p=ridx_p,
+            show_pins=False,
+            substrate_row=substrate_row,
+        )
+
+        inv_tp = TilePatternElement(_pinfo)
+        bk_pin_idx = inv_tp.get_track_index(ridx_n, MOSWireType.G, wire_name='sig', wire_idx=1)
+        dc_core_params = dict(
+            pinfo=pinfo,
+            seg_dict=seg_dict['dc_core'],
+            sig_locs={'bk': bk_pin_idx},
+            flip_vm=flip_nand_vm,
+            tile0=tile0,
+            tile1=tile1,
+            stack_nand=stack_nand,
+            output_sr_pins=output_sr_pins,
+            **params,
+        )
+        dc_core_master = self.new_template(DelayCellCore, params=dc_core_params)
+        dc_ncol = dc_core_master.num_cols
+
+        if isinstance(pinfo, tuple):
+            place_info = pinfo[0]
+        else:
+            place_info = pinfo
+        dc_core_tp = TilePatternElement(place_info)
+        out_pin_idx = dc_core_tp.get_track_index(ridx_n, MOSWireType.G, wire_name='sig',
+                                                 wire_idx=1, tile_idx=tile1)
+        scan_rst_flop_params = dict(
+            pinfo=pinfo,
+            seg_dict=seg_dict['scan_rst_flop'],
+            sig_locs={'out': out_pin_idx},
+            vertical_rst=True,
+            tile0=tile1,
+            tile1=tile0,
+            **params,
+        )
+        scan_rst_flop_master = self.new_template(FlopScanRstlbTwoTile, params=scan_rst_flop_params)
+
+        so_inv_params = dict(
+            pinfo=_pinfo,
+            seg=seg_dict['so_inv'],
+            sig_locs={'pin': bk_pin_idx},
+            vertical_out=False,
+            vertical_sup=substrate_row,
+            **params,
+        )
+        so_inv_master = self.new_template(InvCore, params=so_inv_params)
+
+        # --- Placement --- #
+        # 1. Compute number of columns for taps
+        tap_n_cols = self.get_tap_ncol()
+        tap_sep_col = self.sub_sep_col
+        l_offset = tap_sep_col + tap_n_cols if draw_taps in DrawTaps.LEFT | DrawTaps.BOTH else 0
+        r_offset = tap_sep_col + tap_n_cols if draw_taps in DrawTaps.RIGHT | DrawTaps.BOTH else 0
+
+        sep = max(self.min_sep_col, self.get_hm_sp_le_sep_col())
+
+        # 1.5 Leave space for vm_tracks
+        if sp_vm_tracks == 0:
+            cur_col = 0
+        else:
+            start_idx = self.grid.coord_to_track(vm_layer, - sep * self.sd_pitch -
+                                                 dc_core_master.right_vm_margin,
+                                                 mode=RoundMode.NEAREST)
+            num_vm, vm_locs = self.tr_manager.place_wires(vm_layer,
+                                                          ['sup'] + ['sig'] * sp_vm_tracks,
+                                                          align_track=start_idx)
+            # make sure first signal wire is not beyond leftmost edge of cell to avoid collision
+            # on hm_layer
+            if vm_locs[1] < HalfInt(1):
+                offset = HalfInt(1) - vm_locs[1]
+                vm_locs = [loc + offset for loc in vm_locs]
+            self._sp_vm_locs = vm_locs
+            next_idx = self.tr_manager.get_next_track(vm_layer, vm_locs[-1], 'sig', 'sig', up=True)
+            new_cur_col = _pinfo.coord_to_col(self.grid.track_to_coord(vm_layer, next_idx),
+                                              round_mode=RoundMode.NEAREST)
+            cur_col = new_cur_col + new_cur_col % 2
+
+        # 2. Place scan_rst_flop
+        cur_col = max(l_offset, cur_col)
+        flop_col = cur_col
+        scan_rst_flop_inst = self.add_tile(scan_rst_flop_master, 0, cur_col)
+        cur_col += scan_rst_flop_master.num_cols + sep
+        cur_col += cur_col % 2
+
+        # 2.5 Get bk and si on vm_layer
+        used_vm_idx = scan_rst_flop_inst.get_pin('scan_en_vm').track_id.base_index
+        si_vm_idx = self.tr_manager.get_next_track(vm_layer, used_vm_idx, 'sig', 'sig', up=False)
+        si_vm = self.connect_to_tracks(scan_rst_flop_inst.get_pin('scan_in'),
+                                       TrackID(vm_layer, si_vm_idx), min_len_mode=MinLenMode.LOWER)
+        self.add_pin('si', si_vm)
+
+        if sp_vm_tracks == 0:
+            self.reexport(scan_rst_flop_inst.get_port('in'), net_name='bk')
+        else:
+            bk_vm = self.connect_to_tracks(scan_rst_flop_inst.get_pin('in'),
+                                           TrackID(vm_layer, self._sp_vm_locs[row_idx + 1]),
+                                           min_len_mode=MinLenMode.MIDDLE)
+            self.add_pin('bk', bk_vm)
+
+        # 3. Place so buffer
+        inv_col = cur_col
+        so_inv0_inst = self.add_tile(so_inv_master, tile0, cur_col)
+        so_inv1_inst = self.add_tile(so_inv_master, tile1, cur_col)
+        so_ncol = so_inv_master.num_cols
+        cur_col += so_ncol + sep
+        cur_col += cur_col % 2
+
+        # 4. Place delay_cell_core
+        dc_core_list = []
+        dc_col_list = []
+        for core_idx in range(num_core):
+            dc_col_list.append(cur_col)
+            dc_core_list.append(self.add_tile(dc_core_master, 0, cur_col))
+            cur_col += dc_ncol + sep
+        cur_col -= sep
+
+        # 5. set size
+        num_cols = cur_col + r_offset
+        self.set_mos_size(num_cols)
+
+        # 6. add taps
+        tap_vdd_list, tap_vss_list = [], []
+        if draw_taps in DrawTaps.LEFT | DrawTaps.BOTH:
+            for i in range(self.num_tile_rows):
+                self.add_tap(0, tap_vdd_list, tap_vss_list, tile_idx=i)
+        if draw_taps in DrawTaps.RIGHT | DrawTaps.BOTH:
+            for i in range(self.num_tile_rows):
+                self.add_tap(num_cols, tap_vdd_list, tap_vss_list, flip_lr=True, tile_idx=i)
+
+        # --- Routing --- #
+        # 1. vdd/vss
+        vdd_list, vss0_list, vss1_list = [], [], []
+        for inst in [scan_rst_flop_inst] + dc_core_list:
+            vdd_list += inst.get_all_port_pins('VDD')
+            if substrate_row:
+                vss0_list += inst.get_all_port_pins('VSS0')
+                vss1_list += inst.get_all_port_pins('VSS1')
+
+                self.reexport(inst.get_port('VDD_sub'))
+                self.reexport(inst.get_port('VSS_sub'))
+            else:
+                vss0_list += inst.get_all_port_pins('VSS')
+
+        vdd_list += so_inv0_inst.get_all_port_pins('VDD')
+        vdd_list += so_inv1_inst.get_all_port_pins('VDD')
+        if substrate_row:
+            vss0_list += so_inv0_inst.get_all_port_pins('VSS')
+            vss1_list += so_inv1_inst.get_all_port_pins('VSS')
+        else:
+            vss0_list += so_inv0_inst.get_all_port_pins('VSS')
+            vss0_list += so_inv1_inst.get_all_port_pins('VSS')
+
+        if substrate_row:
+            flop_sub_intvl = scan_rst_flop_master.substrate_row_intvl
+            for start, num_sub in flop_sub_intvl:
+                self._substrate_row_intvl.append((start + flop_col, num_sub))
+            self._substrate_row_intvl.append((inv_col, so_ncol))
+            for dc_col in dc_col_list:
+                self._substrate_row_intvl.append((dc_col, dc_ncol))
+            for _tidx in range(self.num_tile_rows):
+                _pinfo = self.get_tile_pinfo(_tidx)
+                for _ridx in range(_pinfo.num_rows):
+                    rtype = _pinfo.get_row_place_info(_ridx).row_info.row_type
+                    if rtype.is_substrate:
+                        warrs = self.add_substrate_contact(_ridx, inv_col, tile_idx=_tidx,
+                                                           seg=so_ncol)
+                        sup_name = 'VDD' if rtype is MOSType.ntap else 'VSS'
+                        self.add_pin(f'{sup_name}_sub', warrs, label=f'{sup_name}:')
+            self.add_pin('VDD', vdd_list, label='VDD:')
+            self.add_pin('VSS0', vss0_list, label='VSS:')
+            self.add_pin('VSS1', vss1_list, label='VSS:')
+        else:
+            vdd = self.connect_wires(vdd_list)
+            vss = self.connect_wires(vss0_list)
+
+            if tap_vdd_list:
+                self.connect_to_track_wires(tap_vdd_list, vdd)
+            if tap_vss_list:
+                self.connect_to_track_wires(tap_vss_list, vss)
+
+            self.add_pin('VDD', vdd, label='VDD:')
+            self.add_pin('VSS', vss, label='VSS:')
+
+        # 2. Export flop pins
+        self.reexport(scan_rst_flop_inst.get_port('scan_en'), net_name='SE')
+        self.reexport(scan_rst_flop_inst.get_port('scan_en_vm'), net_name='SE_vm', hide=True)
+        self.reexport(scan_rst_flop_inst.get_port('clk'), net_name='ck')
+        self.reexport(scan_rst_flop_inst.get_port('clk_vm'), net_name='ck_vm')
+        self.reexport(scan_rst_flop_inst.get_port('rstlb'), net_name='RSTb')
+        self.reexport(scan_rst_flop_inst.get_port('rstlb_vm'), net_name='RSTb_vm', hide=True)
+
+        # 3. Export delay_cell_core pins
+        if flip_nand_vm:
+            start_idx = num_core - 1
+            stop_idx = 0
+            step = -1
+        else:
+            start_idx = 0
+            stop_idx = num_core - 1
+            step = 1
+        self.reexport(dc_core_list[start_idx].get_port('in_p'))
+        self.reexport(dc_core_list[stop_idx].get_port('co_p'))
+        self.reexport(dc_core_list[stop_idx].get_port('ci_p'))
+        self.reexport(dc_core_list[start_idx].get_port('out_p'))
+
+        # 3.5. If num_core > 1, connect between delay cell cores on xm_layer
+        if num_core > 1 and not is_dum:
+            in_vm = dc_core_list[0].get_pin('in_p')
+            in_xm = self.grid.coord_to_track(xm_layer, in_vm.middle, mode=RoundMode.NEAREST)
+
+            si_xm = self.grid.coord_to_track(xm_layer, si_vm.middle, mode=RoundMode.NEAREST)
+            out_xm = self.tr_manager.get_next_track(xm_layer, si_xm, 'sig', 'sig', up=True)
+
+            for idx in range(start_idx, stop_idx, step):
+                cur_co = dc_core_list[idx].get_pin('co_p')
+                next_in = dc_core_list[idx + step].get_pin('in_p')
+                self.connect_to_tracks([cur_co, next_in], TrackID(xm_layer, in_xm))
+
+                cur_ci = dc_core_list[idx].get_pin('ci_p')
+                next_out = dc_core_list[idx + step].get_pin('out_p')
+                self.connect_to_tracks([cur_ci, next_out], TrackID(xm_layer, out_xm))
+
+        # 4. Connect bk1 from flop to delay_cell_core
+        inv_bk1 = so_inv1_inst.get_pin('in')
+        flop_bk1 = scan_rst_flop_inst.get_pin('out')
+        bk1_top_list = [dc_core_list[idx].get_pin('bk1_in') for idx in range(num_core)]
+        self.connect_wires([inv_bk1, flop_bk1] + bk1_top_list)
+        if flop_char:
+            self.add_pin('bk1', flop_bk1)
+
+        bk1_bot_list = [dc_core_list[idx].get_pin('bk1_out') for idx in range(num_core)]
+        self.connect_wires(bk1_bot_list)
+
+        # 5. Connect output of so_inv1 to input of so_inv0, and export output of so_inv0
+        vm_idx0 = self.grid.coord_to_track(vm_layer, inv_bk1.middle, mode=RoundMode.NEAREST)
+        vm_idx1 = self.tr_manager.get_next_track(vm_layer, vm_idx0, 'sig', 'sig', up=True)
+
+        self.connect_to_tracks([so_inv1_inst.get_pin('pout'), so_inv1_inst.get_pin('nout'),
+                                so_inv0_inst.get_pin('in')], TrackID(vm_layer, vm_idx0))
+
+        so_out = self.connect_to_tracks([so_inv0_inst.get_pin('pout'),
+                                         so_inv0_inst.get_pin('nout')], TrackID(vm_layer, vm_idx1))
+        self.add_pin('so', so_out)
+
+        # set properties
+        self.sch_params = dict(
+            so_inv_params=so_inv_master.sch_params,
+            scan_rst_flop_params=scan_rst_flop_master.sch_params,
+            dc_core_params=dc_core_master.sch_params,
+            flop_char=flop_char,
+            num_core=num_core,
+            is_dum=is_dum,
+            output_sr_pins=output_sr_pins,
+        )
+
+
+class DelayCellNoFlop(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+        self._sp_vm_locs: List[Union[int, HalfInt]] = []
+        self._substrate_row_intvl: List[Tuple[int, int]] = []
+
+    @property
+    def substrate_row_intvl(self) -> List[Tuple[int, int]]:
+        return self._substrate_row_intvl
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_dlycell_no_flop
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            seg_dict='Dictionary of segments',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            draw_taps='LEFT or RIGHT or BOTH or NONE',
+            sp_vm_tracks='Number of vm_tracks that should fit in middle space',
+            row_idx='Row index of this delay cell instance in delay line',
+            flip_nand_vm='flip_vm flag for DelayCellCore',
+            substrate_row='True to have dedicated substrate row.',
+            tile0='Tile index of logic tile 0',
+            tile1='Tile index of logic tile 1',
+            stack_nand='Number of stacks in NAND gates of DelayCellCore',
+            num_core='Number of delay cell cores in one delay cell',
+            is_dum='True if this is a dummy cell in the delay line',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_n=0,
+            ridx_p=-1,
+            draw_taps='NONE',
+            sp_vm_tracks=0,
+            row_idx=-1,
+            flip_nand_vm=False,
+            substrate_row=False,
+            tile0=0,
+            tile1=1,
+            stack_nand=1,
+            num_core=1,
+            is_dum=False,
+        )
+
+    def sp_vm_locs(self) -> List[Union[int, HalfInt]]:
+        return self._sp_vm_locs
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo, mirror=False)
+
+        seg_dict: Dict[str, Any] = self.params['seg_dict']
+        ridx_n: int = self.params['ridx_n']
+        ridx_p: int = self.params['ridx_p']
+        draw_taps: DrawTaps = DrawTaps[self.params['draw_taps']]
+        sp_vm_tracks: int = self.params['sp_vm_tracks']
+        row_idx: Optional[int] = self.params['row_idx']
+        flip_nand_vm: bool = self.params['flip_nand_vm']
+        substrate_row: bool = self.params['substrate_row']
+        tile0: int = self.params['tile0']
+        tile1: int = self.params['tile1']
+        stack_nand: int = self.params['stack_nand']
+        num_core: int = self.params['num_core']
+        is_dum: bool = self.params['is_dum']
+
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+
+        # make masters
+        _pinfo = self.get_tile_pinfo(tile0)
+        params = dict(
+            ridx_n=ridx_n,
+            ridx_p=ridx_p,
+            show_pins=False,
+            substrate_row=substrate_row,
+        )
+
+        dc_core_params = dict(
+            pinfo=pinfo,
+            seg_dict=seg_dict['dc_core'],
+            flip_vm=flip_nand_vm,
+            tile0=tile0,
+            tile1=tile1,
+            stack_nand=stack_nand,
+            **params,
+        )
+        dc_core_master = self.new_template(DelayCellCore, params=dc_core_params)
+        if flip_nand_vm:
+            dc_core_noflip = dc_core_master.new_template_with(flip_vm=False)
+        else:
+            dc_core_noflip = dc_core_master
+        dc_ncol = dc_core_master.num_cols
+
+        bk_inv_params = dict(
+            pinfo=_pinfo,
+            seg=seg_dict['bk_inv'],
+            vertical_out=False,
+            vertical_sup=substrate_row,
+            **params,
+        )
+        bk_inv_master = self.new_template(InvCore, params=bk_inv_params)
+
+        # --- Placement --- #
+        # 1. Compute number of columns for taps
+        tap_n_cols = self.get_tap_ncol()
+        tap_sep_col = self.sub_sep_col
+        l_offset = tap_sep_col + tap_n_cols if draw_taps in DrawTaps.LEFT | DrawTaps.BOTH else 0
+        r_offset = tap_sep_col + tap_n_cols if draw_taps in DrawTaps.RIGHT | DrawTaps.BOTH else 0
+
+        sep = max(self.min_sep_col, self.get_hm_sp_le_sep_col())
+
+        # 1.5 Leave space for vm_tracks
+        if sp_vm_tracks == 0:
+            cur_col = 0
+            vm_inv_l_idx = self.grid.coord_to_track(vm_layer, 0, mode=RoundMode.GREATER_EQ)
+        else:
+            start_idx = self.grid.coord_to_track(vm_layer, - sep * self.sd_pitch -
+                                                 dc_core_master.right_vm_margin,
+                                                 mode=RoundMode.GREATER_EQ)
+            wire_list = ['sup']
+            wire_list.extend(('sig' for _ in range(sp_vm_tracks)))
+            _, vm_locs = self.tr_manager.place_wires(vm_layer, wire_list, align_track=start_idx)
+            # make sure first signal wire is not beyond leftmost edge of cell to avoid collision
+            # on hm_layer
+            if vm_locs[1] < HalfInt(1):
+                offset = HalfInt(1) - vm_locs[1]
+                vm_locs = [loc + offset for loc in vm_locs]
+            self._sp_vm_locs = vm_locs
+            vm_inv_l_idx = self.tr_manager.get_next_track(vm_layer, vm_locs[-1], 'sig', 'sig',
+                                                          up=True)
+            new_cur_col = _pinfo.coord_to_col(self.grid.track_to_coord(vm_layer, vm_inv_l_idx),
+                                              round_mode=RoundMode.GREATER_EQ)
+            cur_col = new_cur_col + new_cur_col % 2
+
+        # Get current column
+        cur_col = max(l_offset, cur_col)
+
+        # 2. Place bk buffer
+        inv_col = cur_col
+        bk_inv0_inst = self.add_tile(bk_inv_master, tile0, cur_col)
+        bk_inv1_inst = self.add_tile(bk_inv_master, tile1, cur_col)
+        inv_bk1 = bk_inv1_inst.get_pin('in')
+        vm_inv_r_idx = self.tr_manager.get_next_track(vm_layer, vm_inv_l_idx, 'sig', 'sig',
+                                                      up=True)
+        bk_ncol = bk_inv_master.num_cols
+        cur_col += bk_ncol
+
+        # 2.5 Get bk and si on vm_layer
+        if sp_vm_tracks == 0:
+            self.reexport(bk_inv0_inst.get_port('nin'), net_name='bk', hide=False)
+        else:
+            bk_vm = self.connect_to_tracks(bk_inv0_inst.get_pin('nin'),
+                                           TrackID(vm_layer, self._sp_vm_locs[row_idx + 1]),
+                                           min_len_mode=MinLenMode.MIDDLE)
+            self.add_pin('bk', bk_vm)
+
+        # 3. Place delay_cell_core
+        core_inp_idx = self.tr_manager.get_next_track(vm_layer, vm_inv_r_idx, 'sig', 'sig',
+                                                      up=True)
+        core_xl = self.grid.track_to_coord(vm_layer, core_inp_idx) - dc_core_noflip.left_vm_margin
+        cur_col = max(cur_col + sep,
+                      self.arr_info.coord_to_col(core_xl, round_mode=RoundMode.GREATER_EQ))
+        dc_core_list = []
+        dc_col_list = []
+        for core_idx in range(num_core):
+            dc_col_list.append(cur_col)
+            dc_core_list.append(self.add_tile(dc_core_master, 0, cur_col))
+            cur_col += dc_ncol + sep
+        cur_col -= sep
+
+        # 4. set size
+        num_cols = cur_col + r_offset
+        self.set_mos_size(num_cols)
+
+        # 5. add taps
+        tap_vdd_list, tap_vss_list = [], []
+        if draw_taps in DrawTaps.LEFT | DrawTaps.BOTH:
+            for i in range(self.num_tile_rows):
+                self.add_tap(0, tap_vdd_list, tap_vss_list, tile_idx=i)
+        if draw_taps in DrawTaps.RIGHT | DrawTaps.BOTH:
+            for i in range(self.num_tile_rows):
+                self.add_tap(num_cols, tap_vdd_list, tap_vss_list, flip_lr=True, tile_idx=i)
+
+        # --- Routing --- #
+        # 1. vdd/vss
+        vdd_list, vss0_list, vss1_list = [], [], []
+        for inst in dc_core_list:
+            vdd_list += inst.get_all_port_pins('VDD')
+            if substrate_row:
+                vss0_list += inst.get_all_port_pins('VSS0')
+                vss1_list += inst.get_all_port_pins('VSS1')
+
+                self.reexport(inst.get_port('VDD_sub'))
+                self.reexport(inst.get_port('VSS_sub'))
+            else:
+                vss0_list += inst.get_all_port_pins('VSS')
+
+        vdd_list += bk_inv0_inst.get_all_port_pins('VDD')
+        vdd_list += bk_inv1_inst.get_all_port_pins('VDD')
+        if substrate_row:
+            vss0_list += bk_inv0_inst.get_all_port_pins('VSS')
+            vss1_list += bk_inv1_inst.get_all_port_pins('VSS')
+        else:
+            vss0_list += bk_inv0_inst.get_all_port_pins('VSS')
+            vss0_list += bk_inv1_inst.get_all_port_pins('VSS')
+
+        if substrate_row:
+            self._substrate_row_intvl.append((inv_col, bk_ncol))
+            for dc_col in dc_col_list:
+                self._substrate_row_intvl.append((dc_col, dc_ncol))
+            for _tidx in range(self.num_tile_rows):
+                _pinfo = self.get_tile_pinfo(_tidx)
+                for _ridx in range(_pinfo.num_rows):
+                    rtype = _pinfo.get_row_place_info(_ridx).row_info.row_type
+                    if rtype.is_substrate:
+                        warrs = self.add_substrate_contact(_ridx, inv_col, tile_idx=_tidx,
+                                                           seg=bk_inv_master.num_cols)
+                        sup_name = 'VDD' if rtype is MOSType.ntap else 'VSS'
+                        self.add_pin(f'{sup_name}_sub', warrs, label=f'{sup_name}:')
+            self.add_pin('VDD', vdd_list, label='VDD:')
+            self.add_pin('VSS0', vss0_list, label='VSS:')
+            self.add_pin('VSS1', vss1_list, label='VSS:')
+        else:
+            vdd = self.connect_wires(vdd_list)
+            vss = self.connect_wires(vss0_list)
+
+            if tap_vdd_list:
+                self.connect_to_track_wires(tap_vdd_list, vdd)
+            if tap_vss_list:
+                self.connect_to_track_wires(tap_vss_list, vss)
+
+            self.add_pin('VDD', vdd, label='VDD:')
+            self.add_pin('VSS', vss, label='VSS:')
+
+        # 2. Export delay_cell_core pins
+        if flip_nand_vm:
+            start_idx = num_core - 1
+            stop_idx = 0
+            step = -1
+        else:
+            start_idx = 0
+            stop_idx = num_core - 1
+            step = 1
+        self.reexport(dc_core_list[start_idx].get_port('in_p'))
+        self.reexport(dc_core_list[stop_idx].get_port('co_p'))
+        self.reexport(dc_core_list[stop_idx].get_port('ci_p'))
+        self.reexport(dc_core_list[start_idx].get_port('out_p'))
+
+        # 3. Connect output of bk_inv0 to input of bk_inv1
+        vm_wire = self.connect_to_tracks([bk_inv0_inst.get_pin('pout'),
+                                          bk_inv0_inst.get_pin('nout'), inv_bk1],
+                                         TrackID(vm_layer, vm_inv_r_idx))
+        self.add_pin('vm_l', vm_wire, hide=True)
+        self.reexport(dc_core_list[-1].get_port('vm_r'))
+
+        # 3.5. If num_core > 1, connect between delay cell cores on xm_layer
+        if num_core > 1 and not is_dum:
+            in_vm = dc_core_list[0].get_pin('in_p')
+            in_xm = self.grid.coord_to_track(xm_layer, in_vm.middle, mode=RoundMode.NEAREST)
+
+            out_vm = dc_core_list[0].get_pin('out_p')
+            out_xm = self.grid.coord_to_track(xm_layer, out_vm.middle, mode=RoundMode.NEAREST)
+
+            for idx in range(start_idx, stop_idx, step):
+                cur_co = dc_core_list[idx].get_pin('co_p')
+                next_in = dc_core_list[idx + step].get_pin('in_p')
+                self.connect_to_tracks([cur_co, next_in], TrackID(xm_layer, in_xm))
+
+                cur_ci = dc_core_list[idx].get_pin('ci_p')
+                next_out = dc_core_list[idx + step].get_pin('out_p')
+                self.connect_to_tracks([cur_ci, next_out], TrackID(xm_layer, out_xm))
+
+        # 4. Connect bk1 from bk_inv1 to delay_cell_core
+        bk1_top_list = [dc_core_list[idx].get_pin('bk1_in') for idx in range(num_core)]
+        self.connect_to_tracks([bk_inv1_inst.get_pin('pout'), bk_inv1_inst.get_pin('nout')] +
+                               bk1_top_list, TrackID(vm_layer, vm_inv_l_idx))
+
+        bk1_bot_list = [dc_core_list[idx].get_pin('bk1_out') for idx in range(num_core)]
+        self.connect_wires(bk1_bot_list)
+
+        # set properties
+        self.sch_params = dict(
+            bk_inv_params=bk_inv_master.sch_params,
+            dc_core_params=dc_core_master.sch_params,
+            num_core=num_core,
+            is_dum=is_dum,
+        )
+
+
+class DelayLine(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_dlyline
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            seg_dict='Dictionary of segments',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            draw_taps='LEFT or RIGHT or BOTH or NONE',
+            num_rows='Number of rows of delay cells in delay line',
+            num_cols='Number of columns of delay cells in delay line',
+            num_insts='Number of delay cells',
+            substrate_row='True to have dedicated substrate row.',
+            tile0='Tile index of logic tile 0',
+            tile1='Tile index of logic tile 1',
+            tile_vss='Tile index of ptap tile',
+            tile_vdd='Tile index of ntap tile',
+            flop='True to have flop in delay_cell',
+            flop_char='True to add flop characterization pins.',
+            stack_nand='Number of stacks in NAND gates of DelayCellCore',
+            num_core='Number of delay cell cores in one delay cell',
+            output_sr_pins='True to output measurement pins.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_n=0,
+            ridx_p=-1,
+            draw_taps='NONE',
+            num_insts=-1,
+            substrate_row=False,
+            tile0=0,
+            tile1=1,
+            tile_vss=0,
+            tile_vdd=1,
+            flop=True,
+            flop_char=False,
+            stack_nand=1,
+            num_core=1,
+            output_sr_pins=False,
+        )
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo, mirror=False)
+
+        seg_dict: Dict[str, Any] = self.params['seg_dict']
+        ridx_n: int = self.params['ridx_n']
+        ridx_p: int = self.params['ridx_p']
+        num_rows: int = self.params['num_rows']
+        num_cols: int = self.params['num_cols']
+        num_insts: int = self.params['num_insts']
+        if num_insts == -1:
+            num_insts = num_cols * num_rows
+            num_dum = 0
+        else:
+            num_dum = num_cols * num_rows - num_insts
+        draw_taps: DrawTaps = DrawTaps[self.params['draw_taps']]
+        substrate_row: bool = self.params['substrate_row']
+        tile0: int = self.params['tile0']
+        tile1: int = self.params['tile1']
+        tile_vss: int = self.params['tile_vss']
+        tile_vdd: int = self.params['tile_vdd']
+        flop: bool = self.params['flop']
+        flop_char: bool = self.params['flop_char']
+        stack_nand: int = self.params['stack_nand']
+        num_core: int = self.params['num_core']
+        output_sr_pins: bool = self.params['output_sr_pins']
+
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+
+        # make masters
+        params = dict(
+            pinfo=pinfo,
+            ridx_n=ridx_n,
+            ridx_p=ridx_p,
+            show_pins=False,
+            seg_dict=seg_dict,
+            sp_vm_tracks=num_rows + 1 if flop else num_rows,
+            draw_taps='NONE',
+            substrate_row=substrate_row,
+            tile0=tile0,
+            tile1=tile1,
+            flop_char=flop_char,
+            stack_nand=stack_nand,
+            output_sr_pins=output_sr_pins,
+            num_core=num_core,
+        )
+        if flop:
+            dly_cell_master = self.new_template(DelayCell, params=params)
+        else:
+            dly_cell_master = self.new_template(DelayCellNoFlop, params=params)
+        dc_ncol = dly_cell_master.num_cols
+        dc_ncol += dc_ncol % 2
+        dc_ntile = dly_cell_master.num_tile_rows
+        sep = max(self.min_sep_col, self.get_hm_sp_le_sep_col())
+        vm_sep = self.grid.get_line_end_sep_tracks(Direction.UPPER, hm_layer, 1, 1,
+                                                   half_space=False).dbl_value // 2
+
+        # --- Placement --- #
+        # 1. Compute number of columns for taps
+        tap_n_cols = self.get_tap_ncol()
+        tap_sep_col = self.sub_sep_col
+        l_offset = tap_sep_col + tap_n_cols if draw_taps in DrawTaps.LEFT | DrawTaps.BOTH else 0
+        r_offset = tap_sep_col + tap_n_cols if draw_taps in DrawTaps.RIGHT | DrawTaps.BOTH else 0
+
+        # 2. set size
+        tot_cols = l_offset + dc_ncol * num_cols + sep * (num_cols - 1) + r_offset
+        self.set_mos_size(tot_cols, num_rows * dc_ntile + 1)
+
+        # 2.5 add top substrate row
+        vdd_list, vss_list = [], []
+
+        dc_sub_intvl = dly_cell_master.substrate_row_intvl
+        offset = l_offset
+
+        for col in range(num_cols):
+            for start, num_sub in dc_sub_intvl:
+                self.add_substrate_contact(0, offset + start, tile_idx=-1, seg=num_sub)
+            offset += dc_ncol + sep
+
+        top_sup_tid = self.get_track_id(0, MOSWireType.DS, 'sup', tile_idx=-1)
+
+        # 3. Place delay cells
+        dly_cell_list: List[List[PyLayInstance]] = []
+        sup_vm_idx_list = []
+        rstb_list, se_list, ck_list = [], [], []
+        rstb_vm_list, se_vm_list, ck_vm_list = [], [], []
+        bk_dict: Dict[str, WireArray] = {}
+        prev_row_vss1_list = []
+        for row in range(num_rows):
+            params['row_idx'] = row
+            params['flip_nand_vm'] = row % 2 == 1
+            dum_params = params.copy()
+            dum_params.update(dict(is_dum=True, output_sr_pins=False))
+            if flop:
+                dly_cell_master = self.new_template(DelayCell, params=params)
+                dum_master = self.new_template(DelayCell, params=dum_params)
+            else:
+                dly_cell_master = self.new_template(DelayCellNoFlop, params=params)
+                dum_master = self.new_template(DelayCellNoFlop, params=dum_params)
+            dly_cell_row: List[PyLayInstance] = []
+            cur_col = l_offset
+            row_vdd_list, row_vss0_list, row_vss1_list = [], [], []
+            row_vdd_tid, row_vss_tid = None, None
+            for col in range(num_cols):
+                # --- local routing --- #
+                bk_idx = row * num_cols + (col if row % 2 == 0 else num_cols - col - 1)
+                is_dum = bk_idx >= num_insts
+                is_last = bk_idx == num_insts - 1
+
+                inst = self.add_tile(dum_master if is_dum else dly_cell_master,
+                                     dc_ntile * row, cur_col)
+                cur_col += dc_ncol + sep
+
+                if flop and flop_char and not is_dum:
+                    self.reexport(inst.get_port('bk1'), net_name=f'flop_q<{bk_idx}>')
+
+                row_vdd_list += inst.get_all_port_pins('VDD')
+                if row_vdd_tid is None:
+                    row_vdd_tid = self.get_track_id(0, MOSWireType.DS, 'sup',
+                                                    tile_idx=row * dc_ntile + tile_vdd)
+
+                row_vss0_list += inst.get_all_port_pins('VSS0')
+                row_vss1_list += inst.get_all_port_pins('VSS1')
+                if row_vss_tid is None:
+                    row_vss_tid = self.get_track_id(0, MOSWireType.DS, 'sup',
+                                                    tile_idx=row * dc_ntile + tile_vss)
+
+                if is_dum:
+                    if flop:
+                        name0_list = ['si', 'ci_p', 'RSTb_vm']
+                        name1_list = ['in_p', 'bk', 'ck_vm', 'SE_vm']
+                    else:
+                        name0_list = ['ci_p']
+                        name1_list = ['in_p', 'bk']
+                    for name in name0_list:
+                        row_vss0_list.append(inst.get_pin(name))
+                    for name in name1_list:
+                        row_vss1_list.append(inst.get_pin(name))
+                else:
+                    bk_stub = self.extend_wires(inst.get_pin('bk'), lower=0,
+                                                upper=self.bound_box.h)[0]
+                    if row == 0 and col > 0:
+                        next_vm_tidx = self.tr_manager.get_next_track(vm_layer,
+                                                                      bk_stub.track_id.base_index,
+                                                                      'sig', 'sup', up=False)
+                        sup_vm_idx_list.append(next_vm_tidx)
+                    bk_dict[f'{bk_idx}'] = bk_stub
+
+                    out_cur = inst.get_pin('out_p')
+                    if flop:
+                        rstb_list.append(inst.get_pin('RSTb'))
+                        rstb_vm_list.append(inst.get_pin('RSTb_vm'))
+                        se_list.append(inst.get_pin('SE'))
+                        se_vm_list.append(inst.get_pin('SE_vm'))
+                        ck_list.append(inst.get_pin('ck'))
+                        ck_vm_list.append(inst.get_pin('ck_vm'))
+
+                        si_cur = inst.get_pin('si')
+                        si_xm0 = self.grid.coord_to_track(xm_layer, si_cur.middle,
+                                                          mode=RoundMode.NEAREST)
+                        o_xm = self.tr_manager.get_next_track(xm_layer, si_xm0, 'sig', 'sig',
+                                                              up=True)
+                        si_xm1 = self.tr_manager.get_next_track(xm_layer, o_xm, 'sig', 'sig',
+                                                                up=True)
+                        si_xm2 = self.tr_manager.get_next_track(xm_layer, si_xm0, 'sig', 'sig',
+                                                                up=vm_sep + 1)
+                        si_xm1 = max(si_xm1, si_xm2)
+                    else:
+                        o_xm = self.grid.coord_to_track(xm_layer, out_cur.middle,
+                                                        mode=RoundMode.NEAREST)
+                        si_cur = None
+                        si_xm0 = None
+                        si_xm1 = None
+
+                    in_cur = inst.get_pin('in_p')
+                    in_xm = self.grid.coord_to_track(xm_layer, in_cur.middle,
+                                                     mode=RoundMode.NEAREST)
+                    if row == 0 and col == 0:
+                        if flop:
+                            isi = self.connect_to_tracks(si_cur, TrackID(xm_layer, si_xm0),
+                                                         track_lower=0)
+                            self.add_pin('iSI', isi)
+                        dlyin = self.connect_to_tracks(in_cur, TrackID(xm_layer, in_xm),
+                                                       track_lower=0)
+                        self.add_pin('dlyin', dlyin)
+                        dlyout = self.connect_to_tracks(out_cur, TrackID(xm_layer, o_xm),
+                                                        track_lower=0)
+                        self.add_pin('dlyout', dlyout)
+                    elif row % 2 == 1:
+                        si_xm = si_xm0 if col % 2 == 1 else si_xm1
+
+                        if is_last:
+                            ci_p = self.connect_to_tracks(inst.get_pin('ci_p'),
+                                                          TrackID(xm_layer, o_xm),
+                                                          track_lower=0)
+                            self.add_pin(f'b{num_insts - 1}', ci_p)
+                            co_p = self.connect_to_tracks(inst.get_pin('co_p'),
+                                                          TrackID(xm_layer, in_xm),
+                                                          track_lower=0)
+                            self.add_pin(f'a{num_insts - 1}', co_p)
+
+                            if flop:
+                                so = self.connect_to_tracks(inst.get_pin('so'),
+                                                            TrackID(xm_layer, si_xm),
+                                                            track_lower=0)
+                                self.add_pin('SOOUT', so)
+
+                        if col == 0:
+                            pass
+                        else:
+                            if not is_last:
+                                if flop:
+                                    self.connect_to_tracks([dly_cell_row[-1].get_pin('si'),
+                                                            inst.get_pin('so')],
+                                                           TrackID(xm_layer, si_xm))
+
+                                self.connect_to_tracks([dly_cell_row[-1].get_pin('in_p'),
+                                                        inst.get_pin('co_p')],
+                                                       TrackID(xm_layer, in_xm))
+                                self.connect_to_tracks([dly_cell_row[-1].get_pin('out_p'),
+                                                        inst.get_pin('ci_p')],
+                                                       TrackID(xm_layer, o_xm))
+
+                            if col == num_cols - 1:
+                                lower_inst = dly_cell_list[row - 1][-1]
+                                if flop:
+                                    si_prev = lower_inst.get_pin('si')
+                                    si_xm = self.grid.coord_to_track(xm_layer, si_prev.middle,
+                                                                     mode=RoundMode.NEAREST)
+                                    tid = self.tr_manager.get_next_track_obj(TrackID(xm_layer,
+                                                                                     si_xm),
+                                                                             'sig', 'sig',
+                                                                             vm_sep + 1)
+                                    self.connect_to_tracks([lower_inst.get_pin('so'), si_cur], tid)
+
+                                self.connect_wires([lower_inst.get_pin('co_p'), in_cur])
+                                self.connect_wires([lower_inst.get_pin('ci_p'), out_cur])
+                    else:
+                        if col == 0:
+                            lower_inst = dly_cell_list[row - 1][0]
+                            if flop:
+                                si_prev = lower_inst.get_pin('si')
+                                si_xm = self.grid.coord_to_track(xm_layer, si_prev.middle,
+                                                                 mode=RoundMode.NEAREST)
+                                tid = self.tr_manager.get_next_track_obj(TrackID(xm_layer, si_xm),
+                                                                         'sig', 'sig', vm_sep + 1)
+                                self.connect_to_tracks([lower_inst.get_pin('so'), si_cur], tid)
+
+                            self.connect_wires([lower_inst.get_pin('co_p'), in_cur])
+                            self.connect_wires([lower_inst.get_pin('ci_p'), out_cur])
+                        else:
+                            if is_last:
+                                ci_p = self.connect_to_tracks(inst.get_pin('ci_p'),
+                                                              TrackID(xm_layer, o_xm),
+                                                              track_upper=self.bound_box.w)
+                                self.add_pin(f'b{num_insts - 1}', ci_p)
+                                co_p = self.connect_to_tracks(inst.get_pin('co_p'),
+                                                              TrackID(xm_layer, in_xm),
+                                                              track_upper=self.bound_box.w)
+                                self.add_pin(f'a{num_insts - 1}', co_p)
+
+                                if flop:
+                                    so = self.connect_to_tracks(inst.get_pin('so'),
+                                                                TrackID(xm_layer, si_xm0),
+                                                                track_upper=self.bound_box.w)
+                                    self.add_pin('SOOUT', so)
+
+                            if flop:
+                                self.connect_to_tracks([dly_cell_row[-1].get_pin('so'), si_cur],
+                                                       TrackID(xm_layer, si_xm0))
+
+                            self.connect_to_tracks([dly_cell_row[-1].get_pin('co_p'), in_cur],
+                                                   TrackID(xm_layer, in_xm))
+                            self.connect_to_tracks([dly_cell_row[-1].get_pin('ci_p'), out_cur],
+                                                   TrackID(xm_layer, o_xm))
+
+                dly_cell_row.append(inst)
+            row_vdd = self.connect_to_tracks(row_vdd_list, row_vdd_tid, track_lower=0,
+                                             track_upper=self.bound_box.w)
+            vdd_list.append(row_vdd)
+
+            row_vss = self.connect_to_tracks(row_vss0_list + prev_row_vss1_list, row_vss_tid,
+                                             track_lower=0, track_upper=self.bound_box.w)
+            vss_list.append(row_vss)
+            prev_row_vss1_list = row_vss1_list.copy()
+            dly_cell_list.append(dly_cell_row)
+        vss_list.append(self.connect_to_tracks(prev_row_vss1_list, top_sup_tid, track_lower=0,
+                                               track_upper=self.bound_box.w))
+
+        # 4. add taps
+        tap_vdd_list, tap_vss_list = [], []
+        if draw_taps in DrawTaps.LEFT | DrawTaps.BOTH:
+            for i in range(num_rows * 2):
+                self.add_tap(0, tap_vdd_list, tap_vss_list, tile_idx=i)
+        if draw_taps in DrawTaps.RIGHT | DrawTaps.BOTH:
+            for i in range(num_rows * 2):
+                self.add_tap(tot_cols, tap_vdd_list, tap_vss_list, flip_lr=True, tile_idx=i)
+
+        # --- Routing --- #
+        # 1. Supplies
+        vdd = vdd_list
+        vss = vss_list
+
+        if tap_vdd_list:
+            vdd = self.connect_to_track_wires(tap_vdd_list, vdd)
+        if tap_vss_list:
+            vss = self.connect_to_track_wires(tap_vss_list, vss)
+
+        # get vdd and vss on vm_layer and xm_layer
+        vdd_xm, vss_xm = [], []
+        tr_w_v_sup = self.tr_manager.get_width(vm_layer, 'sup')
+        tr_w_x_sup = self.tr_manager.get_width(xm_layer, 'sup')
+        sup_vm_tid = TrackID(vm_layer, sup_vm_idx_list[0], width=tr_w_v_sup,
+                             num=len(sup_vm_idx_list),
+                             pitch=sup_vm_idx_list[1] - sup_vm_idx_list[0])
+        for vdd_ind in vdd:
+            cur_tidx = vdd_ind.track_id.base_index
+            vdd_vm = self.connect_to_tracks(vdd_ind, sup_vm_tid, min_len_mode=MinLenMode.MIDDLE)
+            xm_idx = self.grid.coord_to_track(xm_layer,
+                                              self.grid.track_to_coord(hm_layer, cur_tidx),
+                                              mode=RoundMode.NEAREST)
+            vdd_xm.append(self.connect_to_tracks(vdd_vm, TrackID(xm_layer, xm_idx,
+                                                                 width=tr_w_x_sup), track_lower=0,
+                                                 track_upper=self.bound_box.w))
+        for vss_ind in vss:
+            cur_tidx = vss_ind.track_id.base_index
+            vss_vm = self.connect_to_tracks(vss_ind, sup_vm_tid, min_len_mode=MinLenMode.MIDDLE)
+            xm_idx = self.grid.coord_to_track(xm_layer,
+                                              self.grid.track_to_coord(hm_layer, cur_tidx),
+                                              mode=RoundMode.NEAREST)
+            vss_xm.append(self.connect_to_tracks(vss_vm, TrackID(xm_layer, xm_idx,
+                                                                 width=tr_w_x_sup), track_lower=0,
+                                                 track_upper=self.bound_box.w))
+
+        self.add_pin('VDD', vdd_xm, label='VDD:')
+        self.add_pin('VSS', vss_xm, label='VSS:')
+
+        # 2. get bk on xm_layer
+        xm_sep = self.tr_manager.get_sep(xm_layer, ('sig', 'sig'))
+        for _idx in range(num_rows):
+            xm0_idx = self.tr_manager.get_next_track(xm_layer, vss_xm[_idx].track_id.base_index,
+                                                     'sup', 'sig', up=True)
+            xm1_idx = self.tr_manager.get_next_track(xm_layer, vdd_xm[_idx].track_id.base_index,
+                                                     'sup', 'sig', up=False)
+            avail_list = self.get_available_tracks(xm_layer, xm0_idx, xm1_idx, lower=0,
+                                                   upper=self.bound_box.w, sep=xm_sep,
+                                                   include_last=True)
+
+            xm2_idx = self.tr_manager.get_next_track(xm_layer, vdd_xm[_idx].track_id.base_index,
+                                                     'sup', 'sig', up=True)
+            xm3_idx = self.tr_manager.get_next_track(xm_layer,
+                                                     vss_xm[_idx + 1].track_id.base_index,
+                                                     'sup', 'sig', up=False)
+            avail_list.extend(self.get_available_tracks(xm_layer, xm2_idx, xm3_idx, lower=0,
+                                                        upper=self.bound_box.w, sep=xm_sep,
+                                                        include_last=True))
+
+            num_avail = len(avail_list)
+            if num_avail < num_cols + 3:
+                raise ValueError(f'There are {num_cols} bk signals and 3 extra signals, but only '
+                                 f'{num_avail} tracks on layer {xm_layer}. Recheck routing.')
+            if _idx == 0 and flop:
+                idx_offset = 3
+                clk_xm = self.connect_to_tracks(ck_vm_list, TrackID(xm_layer, avail_list[0]),
+                                                track_lower=0, track_upper=self.bound_box.w)
+                self.add_pin('CLKIN', clk_xm)
+
+                rstb_xm = self.connect_to_tracks(rstb_vm_list, TrackID(xm_layer, avail_list[1]),
+                                                 track_lower=0, track_upper=self.bound_box.w)
+                self.connect_wires(rstb_list)
+                self.add_pin('RSTb', rstb_xm)
+
+                se_xm = self.connect_to_tracks(se_vm_list, TrackID(xm_layer, avail_list[2]),
+                                               track_lower=0, track_upper=self.bound_box.w)
+                self.add_pin('iSE', se_xm)
+            else:
+                idx_offset = 0
+            for cidx in range(idx_offset, num_cols + idx_offset):
+                bk_idx = _idx * num_cols + cidx - idx_offset
+                try:
+                    bk_xm = self.connect_to_tracks(bk_dict[f'{bk_idx}'],
+                                                   TrackID(xm_layer, avail_list[cidx]),
+                                                   track_lower=0, track_upper=self.bound_box.w)
+                    self.add_pin(f'bk<{bk_idx}>', bk_xm)
+                except KeyError:
+                    break
+
+        # set properties
+        self.sch_params = dict(
+            dlycell_params=dly_cell_master.sch_params,
+            num_insts=num_insts,
+            num_dum=num_dum,
+            flop=flop,
+            flop_char=flop_char,
+            output_sr_pins=output_sr_pins
+        )
diff --git a/src/aib_ams/layout/driver.py b/src/aib_ams/layout/driver.py
new file mode 100644
index 0000000..8c219c6
--- /dev/null
+++ b/src/aib_ams/layout/driver.py
@@ -0,0 +1,530 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Mapping, Union, List, Optional, Type, Iterable, Tuple
+
+from pybag.enum import MinLenMode, RoundMode
+
+from bag.util.math import HalfInt
+from bag.util.immutable import Param, ImmutableList
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.layout.template import TemplateDB, PyLayInstance
+from bag.layout.routing.base import TrackID, WireArray
+
+from xbase.layout.enum import MOSWireType
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase, SupplyColumnInfo
+
+from bag3_digital.layout.stdcells.gates import NAND2Core, NOR2Core
+
+
+class PullUpDown(MOSBase):
+    """pull up/pull down output driver
+    """
+
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        # noinspection PyTypeChecker
+        return ModuleDB.get_schematic_class('aib_ams', 'aib_driver_pu_pd')
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            seg_p='the number of fingers of pull up',
+            seg_n='the number of fingers of pull down',
+            w_p='pmos width.',
+            w_n='nmos width.',
+            stack='transistor stack number.',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            sig_locs='Optional dictionary of user defined signal locations',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            w_p=0,
+            w_n=0,
+            stack=1,
+            ridx_p=-1,
+            ridx_n=0,
+            sig_locs={},
+        )
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo)
+
+        seg_p: int = self.params['seg_p']
+        seg_n: int = self.params['seg_n']
+        w_p: int = self.params['w_p']
+        w_n: int = self.params['w_n']
+        stack: int = self.params['stack']
+        ridx_p: int = self.params['ridx_p']
+        ridx_n: int = self.params['ridx_n']
+        sig_locs: Mapping[str, Union[float, HalfInt]] = self.params['sig_locs']
+
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+
+        #if (seg_p - seg_n) % 2 != 0:
+        #    raise ValueError('seg_p - seg_n should be even')
+        if w_p == 0:
+            w_p = self.place_info.get_row_place_info(ridx_p).row_info.width
+        if w_n == 0:
+            w_n = self.place_info.get_row_place_info(ridx_n).row_info.width
+
+        pin_tidx = sig_locs.get('pin',
+                                self.get_track_index(ridx_p, MOSWireType.G,
+                                                     wire_name='sig', wire_idx=-1))
+        nin_tidx = sig_locs.get('nin',
+                                self.get_track_index(ridx_n, MOSWireType.G,
+                                                     wire_name='sig', wire_idx=0))
+        nout_tid = self.get_track_id(ridx_n, MOSWireType.DS_GATE, wire_name='padout')
+        pout_tid = self.get_track_id(ridx_p, MOSWireType.DS_GATE, wire_name='padout')
+
+        fg_p = seg_p * stack
+        fg_n = seg_n * stack
+        num_col = max(fg_p, fg_n)
+        p_col = (num_col - fg_p) // 2
+        n_col = (num_col - fg_n) // 2
+        pmos = self.add_mos(ridx_p, p_col, seg_p, w=w_p, stack=stack)
+        nmos = self.add_mos(ridx_n, n_col, seg_n, w=w_n, stack=stack)
+        self.set_mos_size(num_cols=num_col)
+
+        # connect supplies
+        vdd_tid = self.get_track_id(ridx_p, MOSWireType.DS_GATE, wire_name='sup')
+        vss_tid = self.get_track_id(ridx_n, MOSWireType.DS_GATE, wire_name='sup')
+        vdd = self.connect_to_tracks(pmos.s, vdd_tid)
+        vss = self.connect_to_tracks(nmos.s, vss_tid)
+        self.add_pin('VDD', vdd)
+        self.add_pin('VSS', vss)
+
+        # connect inputs
+        hm_w = self.tr_manager.get_width(hm_layer, 'sig')
+        pden = self.connect_to_tracks(nmos.g, TrackID(hm_layer, nin_tidx, width=hm_w),
+                                      min_len_mode=MinLenMode.MIDDLE)
+        puenb = self.connect_to_tracks(pmos.g, TrackID(hm_layer, pin_tidx, width=hm_w),
+                                       min_len_mode=MinLenMode.MIDDLE)
+        self.add_pin('pden', pden)
+        self.add_pin('puenb', puenb)
+
+        # connect output
+        vm_w_pad = self.tr_manager.get_width(vm_layer, 'padout')
+        nout = self.connect_to_tracks(nmos.d, nout_tid, min_len_mode=MinLenMode.MIDDLE)
+        pout = self.connect_to_tracks(pmos.d, pout_tid, min_len_mode=MinLenMode.MIDDLE)
+        vm_tidx = sig_locs.get('out', self.grid.coord_to_track(vm_layer, nout.middle,
+                                                               mode=RoundMode.NEAREST))
+        out = self.connect_to_tracks([nout, pout], TrackID(vm_layer, vm_tidx, width=vm_w_pad))
+        self.add_pin('out', out)
+        self.add_pin('nout', nout, hide=True)
+        self.add_pin('pout', pout, hide=True)
+
+        # compute schematic parameters.
+        th_p = self.place_info.get_row_place_info(ridx_p).row_info.threshold
+        th_n = self.place_info.get_row_place_info(ridx_n).row_info.threshold
+        self.sch_params = dict(
+            seg_p=seg_p,
+            seg_n=seg_n,
+            lch=self.place_info.lch,
+            w_p=w_p,
+            w_n=w_n,
+            th_p=th_p,
+            th_n=th_n,
+            stack_p=stack,
+            stack_n=stack,
+        )
+
+
+class OutputDriverCore(MOSBase):
+    """tristate buffer with nand/nor gates.
+    """
+
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        # noinspection PyTypeChecker
+        return ModuleDB.get_schematic_class('aib_ams', 'aib_driver_output_unit_cell')
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            seg_p='number of segments for output pmos.',
+            seg_n='number of segments for output nmos.',
+            seg_nand='number of segments for nand.',
+            seg_nor='number of segments for nor.',
+            w_p='output pmos width.',
+            w_n='output nmos width.',
+            w_p_nand='NAND pmos width.',
+            w_n_nand='NAND nmos width.',
+            w_p_nor='NOR pmos width.',
+            w_n_nor='NOR nmos width.',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            export_pins='Defaults to False.  True to export simulation pins.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            w_p_nand=0,
+            w_n_nand=0,
+            w_p_nor=0,
+            w_n_nor=0,
+            ridx_p=-1,
+            ridx_n=0,
+            export_pins=False,
+        )
+
+    def draw_layout(self):
+        grid = self.grid
+        params = self.params
+        pinfo = MOSBasePlaceInfo.make_place_info(grid, params['pinfo'])
+        self.draw_base(pinfo)
+
+        tr_manager = self.tr_manager
+
+        seg_p: int = params['seg_p']
+        seg_n: int = params['seg_n']
+        seg_nand: int = params['seg_nand']
+        seg_nor: int = params['seg_nor']
+        w_p: int = params['w_p']
+        w_n: int = params['w_n']
+        w_p_nand: int = params['w_p_nand']
+        w_n_nand: int = params['w_n_nand']
+        w_p_nor: int = params['w_p_nor']
+        w_n_nor: int = params['w_n_nor']
+        ridx_p: int = params['ridx_p']
+        ridx_n: int = params['ridx_n']
+        export_pins: bool = params['export_pins']
+
+        vm_layer = self.conn_layer + 2
+
+        #if (seg_p - seg_n) % 2 != 0:
+        #    raise ValueError('seg_p - seg_n should be even')
+
+        in0_tidx = self.get_track_index(ridx_n, MOSWireType.G, wire_name='sig', wire_idx=0)
+        nout_tidx = self.get_track_index(ridx_n, MOSWireType.DS_GATE, wire_name='sig', wire_idx=0)
+        pout_tidx = self.get_track_index(ridx_p, MOSWireType.DS_GATE, wire_name='sig', wire_idx=-1)
+        pin_drv_tidx = self.get_track_index(ridx_p, MOSWireType.G, wire_name='sig', wire_idx=0)
+        nin_drv_tidx = self.get_track_index(ridx_n, MOSWireType.G, wire_name='sig', wire_idx=2)
+        sig_locs_gate = dict(nin=in0_tidx, nout=nout_tidx, pout=pout_tidx)
+        sig_locs_drv = dict(pin=pin_drv_tidx, nin=nin_drv_tidx)
+        nand_params = dict(
+            pinfo=pinfo,
+            seg=seg_nand,
+            vertical_out=False,
+            vertical_in=False,
+            is_guarded=True,
+            w_p=w_p_nand,
+            w_n=w_n_nand,
+            ridx_n=ridx_n,
+            ridx_p=ridx_p,
+            sig_locs=sig_locs_gate,
+            min_len_mode=dict(
+                in0=MinLenMode.LOWER,
+                in1=MinLenMode.LOWER,
+            ),
+        )
+        nor_params = nand_params.copy()
+        nor_params['seg'] = seg_nor
+        nor_params['w_p'] = w_p_nor
+        nor_params['w_n'] = w_n_nor
+        drv_params = dict(
+            pinfo=pinfo,
+            seg_p=seg_p,
+            seg_n=seg_n,
+            w_p=w_p,
+            w_n=w_n,
+            stack=1,
+            ridx_p=ridx_p,
+            ridx_n=ridx_n,
+            sig_locs=sig_locs_drv,
+        )
+
+        # --- Placement --- #
+        nand_master = self.new_template(NAND2Core, params=nand_params)
+        nor_master = self.new_template(NOR2Core, params=nor_params)
+        drv_master = self.new_template(PullUpDown, params=drv_params)
+
+        nand_ncols = nand_master.num_cols
+        nor_ncols = nor_master.num_cols
+        drv_ncols = drv_master.num_cols
+        min_sep = self.min_sep_col
+        ncol_tot = nand_ncols + drv_ncols + nor_ncols + 2 * min_sep
+
+        nand_inst = self.add_tile(nand_master, 0, nand_ncols, flip_lr=True)
+        drv_inst = self.add_tile(drv_master, 0, nand_ncols + min_sep)
+        nor_inst = self.add_tile(nor_master, 0, ncol_tot - nor_ncols)
+        self.set_mos_size(num_cols=ncol_tot)
+
+        # Routing
+        pin = self.connect_wires([nor_inst.get_pin('pin<0>'), nand_inst.get_pin('pin<0>')])
+        nin = self.connect_wires([nor_inst.get_pin('nin<0>'), nand_inst.get_pin('nin<0>')])
+        self.add_pin('pin', pin, label='in:')
+        self.add_pin('nin', nin, label='in:')
+
+        bnd_box = self.bound_box
+        vm_tr_w = tr_manager.get_width(vm_layer, 'sig')
+        en_vm_tidx = grid.coord_to_track(vm_layer, bnd_box.xl, mode=RoundMode.GREATER_EQ)
+        enb_vm_tidx = grid.coord_to_track(vm_layer, bnd_box.xh, mode=RoundMode.LESS_EQ)
+        puenb_vm_tidx = tr_manager.get_next_track(vm_layer, en_vm_tidx, 'sig', 'sig', up=True)
+        pden_vm_tidx = tr_manager.get_next_track(vm_layer, enb_vm_tidx, 'sig', 'sig', up=False)
+        puenb = drv_inst.get_pin('puenb')
+        pden = drv_inst.get_pin('pden')
+        if export_pins:
+            self.add_pin('nand_pu', puenb)
+            self.add_pin('nor_pd', pden)
+        self.connect_to_tracks([nand_inst.get_pin('pout'), nand_inst.get_pin('nout'), puenb],
+                               TrackID(vm_layer, puenb_vm_tidx, width=vm_tr_w))
+        self.connect_to_tracks([nor_inst.get_pin('pout'), nor_inst.get_pin('nout'), pden],
+                               TrackID(vm_layer, pden_vm_tidx, width=vm_tr_w))
+        en = self.connect_to_tracks([nand_inst.get_pin('pin<1>'), nand_inst.get_pin('nin<1>')],
+                                    TrackID(vm_layer, en_vm_tidx, width=vm_tr_w))
+        enb = self.connect_to_tracks([nor_inst.get_pin('pin<1>'), nor_inst.get_pin('nin<1>')],
+                                     TrackID(vm_layer, enb_vm_tidx, width=vm_tr_w))
+        self.add_pin('en', en)
+        self.add_pin('enb', enb)
+        self.reexport(drv_inst.get_port('out'))
+        self.reexport(drv_inst.get_port('pout'))
+        self.reexport(drv_inst.get_port('nout'))
+
+        # connect vss and vdd
+        vdd = self.connect_wires([nand_inst.get_pin('VDD'), nor_inst.get_pin('VDD'),
+                                  drv_inst.get_pin('VDD')])
+        vss = self.connect_wires([nand_inst.get_pin('VSS'), nor_inst.get_pin('VSS'),
+                                  drv_inst.get_pin('VSS')])
+        self.add_pin('VDD', vdd)
+        self.add_pin('VSS', vss)
+
+        # get schematic parameters
+        self.sch_params = dict(
+            nand_params=nand_master.sch_params,
+            nor_params=nor_master.sch_params,
+            pupd_params=drv_master.sch_params,
+            export_pins=export_pins,
+        )
+
+
+class AIBOutputDriver(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+        self._tap_columns: ImmutableList[Tuple[int, bool]] = ImmutableList()
+
+    @property
+    def tap_columns(self) -> ImmutableList[Tuple[int, bool]]:
+        return self._tap_columns
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        # noinspection PyTypeChecker
+        return ModuleDB.get_schematic_class('aib_ams', 'aib_driver_output_driver')
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            pupd_params='weak pull up pull down parameters',
+            unit_params='unit cell parameters',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_p=-1,
+            ridx_n=0,
+        )
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo)
+
+        arr_info = self.arr_info
+        tr_manager = self.tr_manager
+
+        pupd_params: Param = self.params['pupd_params']
+        unit_params: Param = self.params['unit_params']
+        ridx_p: int = self.params['ridx_p']
+        ridx_n: int = self.params['ridx_n']
+
+        conn_layer = self.conn_layer
+        hm_layer = conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+        ym_layer = xm_layer + 1
+
+        # create masters
+        unit_params = unit_params.copy(append=dict(pinfo=pinfo, ridx_p=ridx_p, ridx_n=ridx_n))
+        unit_master = self.new_template(OutputDriverCore, params=unit_params)
+        vm_tidx = unit_master.get_port('out').get_pins()[0].track_id.base_index
+        pupd_params = pupd_params.copy(append=dict(pinfo=pinfo, ridx_p=ridx_p, ridx_n=ridx_n,
+                                                   sig_locs=dict(out=vm_tidx)))
+        pupd_master = self.new_template(PullUpDown, params=pupd_params)
+        # placement
+        # initialize supply data structures
+        lay_range = range(conn_layer, xm_layer + 1)
+        vdd_table: Dict[int, List[WireArray]] = {lay: [] for lay in lay_range}
+        vss_table: Dict[int, List[WireArray]] = {lay: [] for lay in lay_range}
+        sup_info = self.get_supply_column_info(xm_layer)
+        sub_sep = self.sub_sep_col
+        sub_sep2 = sub_sep // 2
+
+        # instantiate cells and collect pins
+        pin_dict = {'din': [], 'out': [], 'out_hm': [], 'en': [], 'enb': []}
+        cur_col = 0
+        din_type = 'sig_hs'
+        tap_list = []
+        sup_unit_sep = sub_sep2
+
+        # first column
+        tap_list.append((cur_col, False))
+        cur_col = self._draw_supply_column(cur_col, sup_info, vdd_table, vss_table,
+                                           ridx_p, ridx_n, False)
+        # make sure we have room for din wire
+        sup_tidx = max(vdd_table[vm_layer][-1].track_id.base_index,
+                       vss_table[vm_layer][-1].track_id.base_index)
+        din_tidx = tr_manager.get_next_track(vm_layer, sup_tidx, 'sup', din_type, up=True)
+        en_tidx = tr_manager.get_next_track(vm_layer, din_tidx, din_type, 'sig', up=True)
+        unit_col = arr_info.coord_to_col(self.grid.track_to_coord(vm_layer, en_tidx),
+                                         round_mode=RoundMode.GREATER_EQ)
+        sup_unit_sep = max(sup_unit_sep, unit_col - cur_col)
+
+        # make sure unit element is in pitch on ym_layer
+        ncol_core = unit_master.num_cols + sup_info.ncol
+        ncol_unit = 2 * sup_unit_sep + ncol_core
+        if self.top_layer >= ym_layer:
+            ncol_unit = arr_info.round_up_to_block_size(ym_layer, ncol_unit, even_diff=True,
+                                                        half_blk=False)
+        sup_unit_sep = (ncol_unit - ncol_core) // 2
+
+        cur_col += sup_unit_sep
+        cur_col = self._draw_unit_cells(cur_col, unit_master, pin_dict, range(4))
+        cur_col += sup_unit_sep
+
+        # second column
+        tap_list.append((cur_col, False))
+        cur_col = self._draw_supply_column(cur_col, sup_info, vdd_table, vss_table,
+                                           ridx_p, ridx_n, False)
+        cur_col += sup_unit_sep
+        new_col = self._draw_unit_cells(cur_col, unit_master, pin_dict, range(1, 3))
+
+        # pull up/pull down
+        pupd_inst = self.add_tile(pupd_master, 0, cur_col)
+        self._record_pins(pupd_inst, pin_dict, False)
+        cur_col = max(new_col + sup_unit_sep, cur_col + pupd_master.num_cols + sub_sep2)
+
+        # last supply column
+        tap_list.append((cur_col, True))
+        cur_col = self._draw_supply_column(cur_col, sup_info, vdd_table, vss_table,
+                                           ridx_p, ridx_n, True)
+        self._tap_columns = ImmutableList(tap_list)
+        self.set_mos_size(num_cols=cur_col)
+
+        # routing
+        # supplies
+        vss = vdd = None
+        for lay in range(hm_layer, xm_layer + 1, 2):
+            vss = vss_table[lay]
+            vdd = vdd_table[lay]
+            if lay == hm_layer:
+                vss.append(pupd_inst.get_pin('VSS'))
+                vdd.append(pupd_inst.get_pin('VDD'))
+            vdd = self.connect_wires(vdd)
+            vss = self.connect_wires(vss)
+            self.add_pin(f'VDD_{lay}', vdd, hide=True)
+            self.add_pin(f'VSS_{lay}', vss, hide=True)
+        vdd = vdd[0]
+        vss = vss[0]
+        self.add_pin('VDD', vdd)
+        self.add_pin('VSS', vss)
+        self.add_pin('VDD_vm', self.connect_wires(vdd_table[vm_layer]), hide=True)
+        self.add_pin('VSS_vm', vss_table[vm_layer], hide=True)
+        self.add_pin('VDD_conn', vdd_table[conn_layer], hide=True)
+        self.add_pin('VSS_conn', vss_table[conn_layer], hide=True)
+
+        # signals
+        self.connect_wires(pin_dict['out_hm'])
+        din = self.connect_wires(pin_dict['din'])
+        out_list = pin_dict['out']
+        out_upper = max((warr.upper for warr in out_list))
+        out = self.connect_wires(out_list, upper=out_upper)[0]
+        en_list = pin_dict['en']
+        enb_list = pin_dict['enb']
+        p_en_1 = self.connect_wires(en_list[4:])[0]
+        n_enb_1 = self.connect_wires(enb_list[4:])[0]
+        din = self.connect_to_tracks(din, TrackID(vm_layer, din_tidx,
+                                                  width=tr_manager.get_width(vm_layer, din_type)))
+        pub = self.connect_to_tracks(pupd_inst.get_pin('puenb'), p_en_1.track_id,
+                                     min_len_mode=MinLenMode.LOWER)
+        pd = self.connect_to_tracks(pupd_inst.get_pin('pden'), n_enb_1.track_id,
+                                    min_len_mode=MinLenMode.UPPER)
+
+        self.add_pin('din', din)
+        self.add_pin('p_en_drv<0>', en_list[0])
+        self.add_pin('n_enb_drv<0>', enb_list[0])
+        self.add_pin('tristateb', self.connect_wires(en_list[1:4]))
+        self.add_pin('tristate', self.connect_wires(enb_list[1:4]))
+        self.add_pin('p_en_drv<1>', p_en_1)
+        self.add_pin('n_enb_drv<1>', n_enb_1)
+        self.add_pin('weak_puenb', pub)
+        self.add_pin('weak_pden', pd)
+        self.add_pin('txpadout', out)
+        self.sch_params = dict(
+            unit_params=unit_master.sch_params,
+            pupd_params=pupd_master.sch_params,
+        )
+
+    def _draw_supply_column(self, col: int, sup_info: SupplyColumnInfo,
+                            vdd_table: Dict[int, List[WireArray]],
+                            vss_table: Dict[int, List[WireArray]],
+                            ridx_p: int, ridx_n: int, flip_lr: bool) -> int:
+        ncol = sup_info.ncol
+        anchor = col + int(flip_lr) * ncol
+        for tile in range(4):
+            self.add_supply_column(sup_info, anchor, vdd_table, vss_table, ridx_p=ridx_p,
+                                   ridx_n=ridx_n, tile_idx=tile, flip_lr=flip_lr,
+                                   extend_vdd=False)
+        return col + ncol
+
+    def _draw_unit_cells(self, col: int, unit_master: OutputDriverCore,
+                         pin_dict: Dict[str, List[WireArray]], tile_range: Iterable[int]) -> int:
+        for tidx in tile_range:
+            inst = self.add_tile(unit_master, tile_idx=tidx, col_idx=col)
+            self._record_pins(inst, pin_dict, True)
+        return col + unit_master.num_cols
+
+    @staticmethod
+    def _record_pins(inst: PyLayInstance, pin_dict: Dict[str, List[WireArray]],
+                     is_unit: bool) -> None:
+        out_hm_list = pin_dict['out_hm']
+        out_hm_list.append(inst.get_pin('pout'))
+        out_hm_list.append(inst.get_pin('nout'))
+        pin_dict['out'].append(inst.get_pin('out'))
+
+        if is_unit:
+            din_list = pin_dict['din']
+            pin_dict['en'].append(inst.get_pin('en'))
+            pin_dict['enb'].append(inst.get_pin('enb'))
+            din_list.append(inst.get_pin('pin'))
+            din_list.append(inst.get_pin('nin'))
diff --git a/src/aib_ams/layout/frontend.py b/src/aib_ams/layout/frontend.py
new file mode 100644
index 0000000..7a65fee
--- /dev/null
+++ b/src/aib_ams/layout/frontend.py
@@ -0,0 +1,328 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Tuple, Optional, Type, List
+
+from bag.util.math import HalfInt
+from bag.util.immutable import Param
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.layout.routing.base import TrackID, WireArray
+from bag.layout.template import TemplateDB, PyLayInstance
+
+from xbase.layout.enum import MOSWireType
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase
+
+from .txanlg import TXAnalog
+from .rxanlg import RXAnalog
+
+
+class Frontend(MOSBase):
+    """The transmitter and receiver integrated together.
+    """
+
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        # noinspection PyTypeChecker
+        return ModuleDB.get_schematic_class('aib_ams', 'aib_frontend_core')
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            por_lv_params='POR level shifter parameters.',
+            ctrl_lv_params='control signals level shifter parameters.',
+            buf_data_lv_params='data level shifter input buffer parameters',
+            buf_ctrl_lv_params='ctrl level shifter input buffer parameters',
+            buf_por_lv_params='por level shifter input buffer parameters',
+            tx_lv_params='TX data level shifter parameters.',
+            drv_params='TX output driver parameters.',
+            rx_lv_params='RX data level shifter parameters.',
+            se_params='se_to_diff parameters.',
+            match_params='se_to_diff_match parameters.',
+            inv_params='RX async output inverter parameters.',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            num_sup_clear='Number of supply tracks to clear out.',
+            rx_in_pitch='RX input pin pitch',
+            rx_in_off='RX input pin offset.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_p=-1,
+            ridx_n=0,
+            num_sup_clear=0,
+            rx_in_pitch=0.5,
+            rx_in_off=0,
+        )
+
+    def draw_layout(self) -> None:
+        params = self.params
+        ridx_n: int = params['ridx_n']
+        num_sup_clear: int = params['num_sup_clear']
+        rx_in_pitch: HalfInt = HalfInt.convert(params['rx_in_pitch'])
+        rx_in_off: HalfInt = HalfInt.convert(params['rx_in_off'])
+
+        rx_master, tx_master = self._make_masters()
+
+        grid = self.grid
+        tr_manager = self.tr_manager
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+        ym_layer = vm_layer + 2
+
+        tx = self.add_tile(tx_master, 0, 0)
+        rx = self.add_tile(rx_master, 5, 0)
+        self.set_mos_size(num_cols=tx_master.num_cols)
+
+        vss_hm_top_tidx = self.get_track_index(ridx_n, MOSWireType.DS, 'sup', tile_idx=-1)
+        vss_hm_top_coord = grid.track_to_coord(hm_layer, vss_hm_top_tidx)
+
+        # connect supplies on M3
+        for name in ['VDDIO_vm', 'VSS_vm']:
+            warr_list = tx.get_all_port_pins(name)
+            warr_list.extend(rx.port_pins_iter(name))
+            warrs = self.connect_wires(warr_list)
+            self.add_pin(name, warrs, hide=True)
+        self.reexport(rx.get_port('VDDCore_vm'), net_name='VDDCore_top_vm')
+        self.reexport(tx.get_port('VDDCore_vm'), net_name='VDDCore_bot_vm')
+
+        # reexport pins
+        for name in ['din', 'ipdrv_buf<1>', 'ipdrv_buf<0>',
+                     'indrv_buf<1>', 'indrv_buf<0>', 'itx_en_buf', 'weak_pulldownen',
+                     'weak_pullupenb']:
+            self.reexport(tx.get_port(name))
+
+        for name in ['clk_en', 'data_en', 'por', 'odat', 'odat_async',
+                     'oclkp', 'oclkn']:
+            self.reexport(rx.get_port(name))
+
+        # POR routing
+        self.connect_differential_wires(rx.get_pin('por_vccl'), rx.get_pin('porb_vccl'),
+                                        tx.get_pin('por_vccl'), tx.get_pin('porb_vccl'))
+
+        sup_w = tr_manager.get_width(ym_layer, 'sup')
+        hs_w = tr_manager.get_width(ym_layer, 'sig_hs')
+
+        # iopad/iclkn routing
+        iopad = rx.get_pin('iopad')
+        iclkn = rx.get_pin('iclkn')
+        rx_idx_list = tr_manager.place_wires(ym_layer, ['sig_hs', 'sig_hs'],
+                                             center_coord=iopad.middle)[1]
+        rx_in_p2 = rx_in_pitch.dbl_value
+        q_iclkn = ((rx_idx_list[0].dbl_value - rx_in_off.dbl_value) // rx_in_p2)
+        tidx_iclkn = HalfInt(q_iclkn * rx_in_p2 + rx_in_off.dbl_value)
+        tidx_iopad = rx_idx_list[1] + (rx_idx_list[0] - tidx_iclkn)
+        iopad, iclkn = self.connect_differential_tracks(iopad, iclkn, ym_layer, tidx_iopad,
+                                                        tidx_iclkn, width=hs_w,
+                                                        track_upper=vss_hm_top_coord)
+        self.add_pin('rxpadin', iopad)
+        self.add_pin('iclkn', iclkn)
+
+        # tx pad routing
+        vdd_io_xm = rx.get_all_port_pins('VDDIO')
+        vdd_io_xm.extend(tx.port_pins_iter('VDDIO'))
+        vdd_xm = [tx.get_pin('VDDCore'), rx.get_pin('VDDCore')]
+        vss_xm = rx.get_all_port_pins('VSS')
+        vss_xm.extend(tx.port_pins_iter('VSS'))
+        self.add_pin('VDDIO_xm', vdd_io_xm, hide=True)
+        self.add_pin('VDDCore_xm', vdd_xm, hide=True)
+        self.add_pin('VSS_xm', vss_xm, hide=True)
+
+        vdd_idx_list = []
+        vdd_core_idx_list = []
+        vss_idx_list = []
+        txpad, sup_l, sup_r = self._route_tx_pad(tx, vss_xm, vdd_io_xm, vdd_idx_list, vss_idx_list)
+        vss_idx_list.append(sup_r)
+        self.add_pin('txpadout', txpad)
+
+        # supply routing
+        sig_sup_sep = tr_manager.get_sep(ym_layer, ('sig_hs', 'sup'))
+        sup_sep = tr_manager.get_sep(ym_layer, ('sup', 'sup'))
+        sub_sep2 = sup_sep.div2(round_up=True)
+        top_idx_inc = grid.coord_to_track(ym_layer, self.bound_box.xh) - sub_sep2
+        num_wires = _append_supply_indices(vdd_idx_list, vss_idx_list, sup_r, sup_sep, top_idx_inc,
+                                           True, True)
+        bot_idx_inc = tidx_iopad + sig_sup_sep
+        vss_idx_list.append(sup_l)
+        _append_supply_indices(vdd_idx_list, vss_idx_list, sup_l, sup_sep, bot_idx_inc,
+                               False, True, num_max=num_wires)
+        top_idx_inc = min(vss_idx_list[-1], vdd_idx_list[-1]) - sup_sep
+        _append_supply_indices(vdd_core_idx_list, vss_idx_list, bot_idx_inc, sup_sep,
+                               top_idx_inc, True, False)
+        bot_idx_inc = grid.coord_to_track(ym_layer, 0) + sig_sup_sep + sup_sep * num_sup_clear
+        next_io_idx = tr_manager.get_next_track(ym_layer, tidx_iclkn, 'sig_hs', 'sup', up=False)
+        _append_supply_indices(vdd_core_idx_list, vss_idx_list, next_io_idx, sup_sep, bot_idx_inc,
+                               False, False)
+
+        sup_yl = sup_yh = 0
+        for parity, idx in enumerate(vdd_core_idx_list):
+            cur_tid = TrackID(ym_layer, idx, width=sup_w)
+            if (parity & 1) == 0:
+                warr = self.connect_to_tracks(vdd_xm, cur_tid)
+                sup_yl = warr.lower
+                sup_yh = warr.upper
+                self.add_pin('VDDCore', warr)
+            else:
+                self._export_vdd_io(vdd_io_xm, cur_tid, sup_yl, sup_yh)
+
+        for idx in vdd_idx_list:
+            cur_tid = TrackID(ym_layer, idx, width=sup_w)
+            self._export_vdd_io(vdd_io_xm, cur_tid, sup_yl, sup_yh)
+
+        for idx in vss_idx_list:
+            cur_tid = TrackID(ym_layer, idx, width=sup_w)
+            warr = self.connect_to_tracks(vss_xm, cur_tid, track_lower=sup_yl, track_upper=sup_yh)
+            self.add_pin('VSS', warr)
+
+        self.sch_params = dict(
+            tx_params=tx_master.sch_params,
+            rx_params=rx_master.sch_params,
+        )
+
+    def _export_vdd_io(self, vdd_io_xm: List[WireArray], tid: TrackID,
+                       sup_yl: int, sup_yh: int) -> None:
+        warr = self.connect_to_tracks(vdd_io_xm, tid, track_lower=sup_yl, track_upper=sup_yh)
+        self.add_pin('VDDIO', warr)
+
+    def _route_tx_pad(self, tx: PyLayInstance, vss_warrs: List[WireArray],
+                      vdd_warrs: List[WireArray], vdd_idx_list: List[HalfInt],
+                      vss_idx_list: List[HalfInt]) -> Tuple[WireArray, HalfInt, HalfInt]:
+        grid = self.grid
+        tr_manager = self.tr_manager
+        vm_layer = self.conn_layer + 2
+        ym_layer = vm_layer + 2
+
+        # Note: we designed TX driver so it is pitch align with ym layer
+        tx_vm = tx.get_pin('txpadout_vm')
+        tid = tx_vm.track_id
+        pad_coord0 = grid.track_to_coord(vm_layer, tid.base_index)
+        pad_tidx0 = grid.coord_to_track(ym_layer, pad_coord0)
+        if tid.num == 1:
+            pad_tidx_list = [pad_tidx0]
+            ym_pitch = 0
+        else:
+            pad_coord1 = grid.track_to_coord(vm_layer, tid.base_index + tid.pitch)
+            pad_tidx1 = grid.coord_to_track(ym_layer, pad_coord1)
+            ym_pitch = pad_tidx1 - pad_tidx0
+            pad_tidx_list = [pad_tidx0 + idx_ * ym_pitch for idx_ in range(tid.num)]
+
+            num_sup = tr_manager.get_num_wires_between(ym_layer, 'padout', pad_tidx_list[0],
+                                                       'padout', pad_tidx_list[1], 'sup')
+            center_coord = (pad_coord0 + pad_coord1) // 2
+            sup_idx_list = tr_manager.place_wires(ym_layer, ['sup'] * num_sup,
+                                                  center_coord=center_coord)[1]
+            delta = pad_tidx_list[1] - pad_tidx_list[0]
+            sup_w = tr_manager.get_width(ym_layer, 'sup')
+            for bot_tidx in range(tid.num - 1):
+                offset = bot_tidx * delta
+                vdd_first = (bot_tidx & 1)
+                for parity, sup_tidx in enumerate(sup_idx_list):
+                    cur_tr_idx = offset + sup_tidx
+                    cur_tid = TrackID(ym_layer, cur_tr_idx, width=sup_w)
+                    if vdd_first ^ (parity & 1):
+                        warr = self.connect_to_tracks(vdd_warrs, cur_tid)
+                        vdd_idx_list.append(cur_tr_idx)
+                        self.add_pin('VDDIO', warr)
+                    else:
+                        warr = self.connect_to_tracks(vss_warrs, cur_tid)
+                        vss_idx_list.append(cur_tr_idx)
+                        self.add_pin('VSS', warr)
+
+        pad_sup_sep = tr_manager.get_sep(ym_layer, ('padout', 'sup'))
+        pad_w = tr_manager.get_width(ym_layer, 'padout')
+        pad_tid = TrackID(ym_layer, pad_tidx_list[0], width=pad_w, num=tid.num, pitch=ym_pitch)
+        txpad = self.connect_to_tracks(tx.get_all_port_pins('txpadout'), pad_tid)
+        return txpad, pad_tidx_list[0] - pad_sup_sep, pad_tidx_list[-1] + pad_sup_sep
+
+    def _make_masters(self) -> Tuple[RXAnalog, TXAnalog]:
+        params = self.params
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, params['pinfo'])
+        self.draw_base(pinfo, flip_tile=True)
+
+        por_lv_params: Param = params['por_lv_params']
+        ctrl_lv_params: Param = params['ctrl_lv_params']
+        buf_data_lv_params: Param = params['buf_data_lv_params']
+        buf_ctrl_lv_params: Param = params['buf_ctrl_lv_params']
+        buf_por_lv_params: Param = params['buf_por_lv_params']
+        tx_lv_params: Param = params['tx_lv_params']
+        drv_params: Param = params['drv_params']
+        rx_lv_params: Param = params['rx_lv_params']
+        se_params: Param = params['se_params']
+        match_params: Param = params['match_params']
+        inv_params: Param = params['inv_params']
+        ridx_p: int = params['ridx_p']
+        ridx_n: int = params['ridx_n']
+
+        rx_params = dict(
+            pinfo=pinfo,
+            se_params=se_params,
+            match_params=match_params,
+            inv_params=inv_params,
+            data_lv_params=rx_lv_params,
+            ctrl_lv_params=ctrl_lv_params,
+            por_lv_params=por_lv_params,
+            buf_ctrl_lv_params=buf_ctrl_lv_params,
+            buf_por_lv_params=buf_por_lv_params,
+            ridx_p=ridx_p,
+            ridx_n=ridx_n,
+        )
+
+        rxhalf_ncol = RXAnalog.get_rx_half_ncol(self, pinfo, rx_params)
+
+        tx_params = dict(
+            pinfo=pinfo,
+            drv_params=drv_params,
+            data_lv_params=tx_lv_params,
+            ctrl_lv_params=ctrl_lv_params,
+            buf_data_lv_params=buf_data_lv_params,
+            buf_ctrl_lv_params=buf_ctrl_lv_params,
+            ridx_p=ridx_p,
+            ridx_n=ridx_n,
+            rxhalf_ncol=rxhalf_ncol,
+        )
+
+        tx_master = self.new_template(TXAnalog, params=tx_params)
+        rx_params['core_ncol'] = tx_master.core_ncol
+        rx_params['tap_info_list'] = tx_master.drv_tap_info
+        rx_master = self.new_template(RXAnalog, params=rx_params)
+        return rx_master, tx_master
+
+
+def _append_supply_indices(vdd_list: List[HalfInt], vss_list: List[HalfInt], cur_idx: HalfInt,
+                           sep: HalfInt, stop_idx_inc: HalfInt, up: bool, vdd_first: bool,
+                           num_max: Optional[int] = None) -> int:
+    if vdd_first:
+        sel_list = (vdd_list, vss_list)
+    else:
+        sel_list = (vss_list, vdd_list)
+
+    num_wires = 0
+    sign = int(up) * 2 - 1
+    while num_max is None or num_wires < num_max:
+        new_idx = cur_idx + sign * sep
+        if (up and new_idx <= stop_idx_inc) or (not up and new_idx >= stop_idx_inc):
+            sel_list[num_wires & 1].append(new_idx)
+            cur_idx = new_idx
+            num_wires += 1
+        else:
+            return num_wires
+
+    return num_wires
diff --git a/src/aib_ams/layout/phase_det.py b/src/aib_ams/layout/phase_det.py
new file mode 100644
index 0000000..0cb8ee8
--- /dev/null
+++ b/src/aib_ams/layout/phase_det.py
@@ -0,0 +1,246 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Optional, Type, List
+
+from pybag.enum import RoundMode
+
+from bag.math import lcm
+from bag.util.math import HalfInt
+from bag.util.immutable import Param
+from bag.layout.routing.base import TrackID, WireArray
+from bag.layout.template import TemplateDB
+from bag.design.database import Module
+
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase
+
+from bag3_digital.layout.stdcells.se_to_diff import SingleToDiff
+from bag3_digital.layout.sampler.flop_strongarm import FlopStrongArm
+from bag3_digital.layout.stdcells.gates import InvCore
+
+from ..schematic.aib_phasedet import aib_ams__aib_phasedet
+
+
+class PhaseDetectorHalf(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The placement information object.',
+            se_params='two-three splitter parameters.',
+            flop_params='strongarm flop parameters.',
+            inv_params='dummy inverter parameters.',
+            vm_pitch='vm_layer pin pitch.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            vm_pitch=0.5,
+        )
+
+    def draw_layout(self) -> None:
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo)
+
+        se_params: Param = self.params['se_params']
+        flop_params: Param = self.params['flop_params']
+        inv_params: Param = self.params['inv_params']
+        vm_pitch: HalfInt = HalfInt.convert(self.params['vm_pitch'])
+
+        # create masters
+        flop_pinfo = self.get_draw_base_sub_pattern(2, 4)
+        flop_params = flop_params.copy(append=dict(pinfo=flop_pinfo, out_pitch=vm_pitch))
+        se_params = se_params.copy(append=dict(pinfo=self.get_tile_pinfo(0), vertical_out=False,
+                                               vertical_in=False))
+        inv_params = inv_params.copy(append=dict(pinfo=self.get_tile_pinfo(2),
+                                                 ridx_n=0, ridx_p=-1))
+
+        flop_master = self.new_template(FlopStrongArm, params=flop_params)
+        se_master = self.new_template(SingleToDiff, params=se_params)
+        inv_master = self.new_template(InvCore, params=inv_params)
+
+        # floorplanning
+        tr_manager = self.tr_manager
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+        vm_w_hs = tr_manager.get_width(vm_layer, 'sig_hs')
+
+        # get flop column quantization
+        sd_pitch = self.sd_pitch
+        vm_coord_pitch = int(vm_pitch * self.grid.get_track_pitch(vm_layer))
+        sep_half = max(-(-self.min_sep_col // 2), -(-vm_coord_pitch // sd_pitch))
+        blk_ncol = lcm([sd_pitch, vm_coord_pitch]) // sd_pitch
+
+        sep_ncol = self.min_sep_col
+        flop_ncol2 = flop_master.num_cols // 2
+        se_col = sep_half
+        center_col = sep_half + inv_master.num_cols + sep_ncol + flop_ncol2
+        center_col = -(-center_col // blk_ncol) * blk_ncol
+        cur_col = center_col - flop_ncol2
+        if (cur_col & 1) != (se_col & 1):
+            se_col += 1
+        se = self.add_tile(se_master, 0, se_col)
+        inv = self.add_tile(inv_master, 2, cur_col - sep_ncol, flip_lr=True)
+        flop = self.add_tile(flop_master, 2, cur_col)
+        cur_col += flop_master.num_cols + self.sub_sep_col // 2
+
+        lay_range = range(self.conn_layer, xm_layer + 1)
+        vdd_table: Dict[int, List[WireArray]] = {lay: [] for lay in lay_range}
+        vss_table: Dict[int, List[WireArray]] = {lay: [] for lay in lay_range}
+        sup_info = self.get_supply_column_info(xm_layer)
+        for tile_idx in range(self.num_tile_rows):
+            self.add_supply_column(sup_info, cur_col, vdd_table, vss_table, ridx_p=-1,
+                                   ridx_n=0, tile_idx=tile_idx, flip_lr=False)
+
+        self.set_mos_size()
+
+        # connections
+        # supplies
+        for lay in range(hm_layer, xm_layer + 1, 2):
+            vss = vss_table[lay]
+            vdd = vdd_table[lay]
+            if lay == hm_layer:
+                for inst in [inv, flop, se]:
+                    vdd.extend(inst.get_all_port_pins('VDD'))
+                    vss.extend(inst.get_all_port_pins('VSS'))
+            vdd = self.connect_wires(vdd)
+            vss = self.connect_wires(vss)
+            self.add_pin(f'VDD_{lay}', vdd, hide=True)
+            self.add_pin(f'VSS_{lay}', vss, hide=True)
+
+        inp = flop.get_pin('inp')
+        inn = flop.get_pin('inn')
+        loc_list = tr_manager.place_wires(vm_layer, ['sig_hs'] * 2, center_coord=inp.middle)[1]
+        inp, inn = self.connect_differential_tracks(inp, inn, vm_layer, loc_list[0], loc_list[1],
+                                                    width=vm_w_hs)
+        self.add_pin('sa_inp', inp)
+        self.add_pin('sa_inn', inn)
+
+        in_vm_ref = self.grid.coord_to_track(vm_layer, 0)
+        in_vm_tidx = tr_manager.get_next_track(vm_layer, in_vm_ref, 'sig', 'sig', up=True)
+        vm_phtr = vm_pitch.dbl_value
+        in_vm_dhtr = -(-(in_vm_tidx - in_vm_ref).dbl_value // vm_phtr) * vm_phtr
+        in_vm_tidx = in_vm_ref + HalfInt(in_vm_dhtr)
+        in_warr = self.connect_to_tracks(se.get_all_port_pins('in'),
+                                         TrackID(vm_layer, in_vm_tidx, width=vm_w),
+                                         track_lower=0)
+        self.add_pin('in', in_warr)
+
+        out = flop.get_pin('outp')
+        self.add_pin('out', self.extend_wires(out, upper=self.bound_box.yh))
+
+        self.reexport(flop.get_port('clkl'), net_name='clk', hide=False)
+        self.reexport(flop.get_port('rstlb'))
+        self.reexport(se.get_port('outp'), net_name='midp')
+        self.reexport(se.get_port('outn'), net_name='midn')
+        self.reexport(inv.get_port('in'), net_name='dum')
+
+        self.sch_params = dict(
+            se_params=se_master.sch_params,
+            flop_params=flop_master.sch_params,
+            inv_params=inv_master.sch_params,
+        )
+
+
+class PhaseDetector(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_phasedet
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return PhaseDetectorHalf.get_params_info()
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return PhaseDetectorHalf.get_default_param_values()
+
+    def draw_layout(self) -> None:
+        core_master: PhaseDetectorHalf = self.new_template(PhaseDetectorHalf, params=self.params)
+        self.draw_base(core_master.draw_base_info)
+
+        core_ncol = core_master.num_cols
+        clka = self.add_tile(core_master, 0, core_ncol, flip_lr=True)
+        clkb = self.add_tile(core_master, 0, core_ncol)
+
+        self.set_mos_size()
+
+        # connections
+        grid = self.grid
+        tr_manager = self.tr_manager
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+        xm_w_hs = tr_manager.get_width(xm_layer, 'sig_hs')
+
+        # supplies
+        sup_list = ['VDD', 'VSS']
+        for lay in [hm_layer, xm_layer]:
+            for name in sup_list:
+                cur_name = f'{name}_{lay}'
+                warrs = clka.get_all_port_pins(cur_name)
+                warrs.extend(clkb.port_pins_iter(cur_name))
+                warrs = self.connect_wires(warrs)
+                if lay == xm_layer:
+                    self.add_pin(name, warrs)
+
+        # strongarm inputs
+        clkap = clka.get_all_port_pins('midp')
+        clkan = clka.get_all_port_pins('midn')
+        clka_sa_inp = clka.get_pin('sa_inp')
+        clkap, clkan = self.connect_differential_wires(clkap, clkan, clka_sa_inp,
+                                                       clka.get_pin('sa_inn'))
+        clkbp = clkb.get_all_port_pins('midp')
+        clkbn = clkb.get_all_port_pins('midn')
+        clkbp, clkbn = self.connect_differential_wires(clkbp, clkbn, clkb.get_pin('sa_inn'),
+                                                       clkb.get_pin('sa_inp'))
+
+        # reset
+        rstlb = self.connect_wires([clka.get_pin('rstlb'), clkb.get_pin('rstlb')])[0]
+        vm_tidx = grid.coord_to_track(vm_layer, rstlb.middle, mode=RoundMode.NEAREST)
+        rstlb = self.connect_to_tracks(rstlb, TrackID(vm_layer, vm_tidx, width=vm_w),
+                                       track_lower=0)
+        self.add_pin('RSTb', rstlb)
+
+        # strongarm clocks
+        xm_top_tidx = grid.find_next_track(xm_layer, clka_sa_inp.upper, tr_width=xm_w_hs,
+                                           mode=RoundMode.LESS)
+        loc_list = tr_manager.place_wires(xm_layer, ['sig_hs'] * 4, align_track=xm_top_tidx,
+                                          align_idx=-1)[1]
+        clkap, clkan = self.connect_differential_tracks(clkap, clkan, xm_layer, loc_list[1],
+                                                        loc_list[0], width=xm_w_hs)
+        self.connect_differential_wires(clkb.get_pin('dum'), clkb.get_pin('clk'),
+                                        clkap, clkan)
+        clkbp, clkbn = self.connect_differential_tracks(clkbp, clkbn, xm_layer, loc_list[3],
+                                                        loc_list[2], width=xm_w_hs)
+        self.connect_differential_wires(clka.get_pin('clk'), clka.get_pin('dum'),
+                                        clkbp, clkbn)
+
+        # re-exports
+        self.reexport(clka.get_port('in'), net_name='CLKA')
+        self.reexport(clkb.get_port('in'), net_name='CLKB')
+        self.reexport(clka.get_port('out'), net_name='t_up')
+        self.reexport(clkb.get_port('out'), net_name='t_down')
+
+        self.sch_params = core_master.sch_params
diff --git a/src/aib_ams/layout/phase_interp.py b/src/aib_ams/layout/phase_interp.py
new file mode 100644
index 0000000..5aced9a
--- /dev/null
+++ b/src/aib_ams/layout/phase_interp.py
@@ -0,0 +1,380 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Optional, Type
+
+from pybag.enum import RoundMode, MinLenMode
+
+from bag.util.immutable import Param
+from bag.design.module import Module
+from bag.layout.routing.base import TrackID
+from bag.layout.template import TemplateDB
+
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase
+from xbase.layout.enum import MOSWireType
+
+from bag3_analog.layout.phase.phase_interp import PhaseInterpolator
+from bag3_digital.layout.stdcells.gates import InvCore, NAND2Core
+
+from aib_ams.layout.delay_line import DelayCellCore
+
+from ..schematic.aib_phase_interp import aib_ams__aib_phase_interp
+
+
+class PhaseInterpolatorWithDelay(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_phase_interp
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The layout information object.',
+            pi_params='Phase interpolator parameters.',
+            dc_params='delay cell parameters.',
+            inv_params='Inverter input buffer params',
+            nand_params='Nand input buffer params',
+            num_core='Number of delay cell cores',
+            nbits='number of control bits.',
+            export_dc_out='export delay cell output',
+            export_dc_in='export the delay cell input',
+            pi_tile='Phase interpolator tile index',
+            dc_tile='Delay cell tile index',
+            split_nand='Split the nand across two rows',
+            split_inv='Split the inverter across two rows'
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(export_dc_out=False, pi_tile=0, dc_tile=4, split_nand=True, split_inv=True)
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo)
+
+        pi_params: Param = self.params['pi_params']
+        dc_params: Param = self.params['dc_params']
+        inv_params: Param = self.params['inv_params']
+        nand_params: Param = self.params['nand_params']
+        ncores: int = self.params['num_core']
+        nbits: int = self.params['nbits']
+        split_nand: bool = self.params['split_nand']
+        split_inv: bool = self.params['split_inv']
+        pi_tile: int = self.params['pi_tile']
+        dc_tile: int = self.params['dc_tile']
+        inv_tile_l = dc_tile + 1
+        inv_tile_h = dc_tile + 3
+
+        hm_layer = self.conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+
+        grid = self.grid
+        tr_manager = self.tr_manager
+
+        # Recompute sizes for the inverter and nand
+        inv_seg: int = inv_params['seg']
+        nand_seg: int = nand_params['seg']
+        split_inv = split_inv and (inv_seg > 1)
+        split_nand = split_nand and (nand_seg > 1)
+        if split_inv:
+            inv_seg_2 = inv_seg // 2
+            inv_seg_1 = inv_seg - inv_seg_2
+        else:
+            inv_seg_1 = inv_seg
+            inv_seg_2 = None
+        if split_nand:
+            nand_seg_2 = nand_seg // 2
+            nand_seg_1 = nand_seg - nand_seg_2
+        else:
+            nand_seg_1 = nand_seg
+            nand_seg_2 = None
+
+        # create masters
+        low_pinfo = self.get_tile_pinfo(inv_tile_l)
+        high_pinfo = self.get_tile_pinfo(inv_tile_h)
+        pi_params = pi_params.copy(append=dict(pinfo=pinfo, nbits=nbits + 1, flip_b_en=True))
+        dc_params = dc_params.copy(append=dict(pinfo=pinfo, substrate_row=True, vertical_out=True,
+                                               draw_substrate_row=False, tile0=3, tile1=1,
+                                               flip_vm=True))
+        pi_master: PhaseInterpolator = self.new_template(PhaseInterpolator, params=pi_params)
+        dc_master: DelayCellCore = self.new_template(DelayCellCore, params=dc_params)
+        dc0_params = dc_params.copy(append=dict(feedback=True))
+        dc0_master: DelayCellCore = self.new_template(DelayCellCore, params=dc0_params)
+
+        # Place all the cells
+        ntr, vert_trs = tr_manager.place_wires(vm_layer, ['sig', 'sig', 'sup'])
+        ncol = self.arr_info.get_column_span(vm_layer, ntr)
+        pi = self.add_tile(pi_master, pi_tile, ncol)
+        dc_arr = [self.add_tile(dc0_master, dc_tile, 0)]
+        sep = max(self.min_sep_col, self.get_hm_sp_le_sep_col())
+        curr_col = dc_master.num_cols + sep
+        for _ in range(ncores - 1):
+            dc_arr.append(self.add_tile(dc_master, dc_tile, curr_col))
+            curr_col += dc_master.num_cols + sep
+
+        nand_params_l = nand_params.copy(append=dict(pinfo=low_pinfo, vertical_sup=True,
+                                                     vertical_out=False, seg=nand_seg_1))
+        nand_master_l: NAND2Core = self.new_template(NAND2Core, params=nand_params_l)
+        nand_l = self.add_tile(nand_master_l, inv_tile_l, curr_col)
+        if split_nand:
+            nand_params_h = nand_params.copy(append=dict(pinfo=high_pinfo, vertical_sup=True,
+                                                         vertical_out=False, seg=nand_seg_2))
+            nand_master_h: NAND2Core = self.new_template(NAND2Core, params=nand_params_h)
+            inv_in_tid_h = nand_master_h.get_track_index(1, MOSWireType.G, wire_name='sig',
+                                                         wire_idx=0)
+            nand_h = self.add_tile(nand_master_h, inv_tile_h, curr_col)
+            nand_sch_params = [nand_master_l.sch_params, nand_master_h.sch_params]
+        else:
+            inv_in_tid_h = None
+            nand_h = None
+            nand_sch_params = [nand_master_l.sch_params]
+        inv_col = curr_col + nand_master_l.num_cols + sep
+        inv_in_tid = nand_master_l.get_track_index(1, MOSWireType.G, wire_name='sig', wire_idx=0)
+        inv_params_l = inv_params.copy(append=dict(pinfo=low_pinfo, vertical_sup=True,
+                                                   seg=inv_seg_1, vertical_out=False,
+                                                   sig_locs=dict(nin=inv_in_tid)))
+        inv_master_l: InvCore = self.new_template(InvCore, params=inv_params_l)
+        inv_l = self.add_tile(inv_master_l, inv_tile_l, inv_col)
+        if split_inv:
+            if inv_in_tid_h:
+                inv_params_h = inv_params.copy(append=dict(pinfo=high_pinfo, vertical_sup=True,
+                                                           seg=inv_seg_2, vertical_out=False,
+                                                           sig_locs=dict(nin=inv_in_tid_h)))
+            else:
+                inv_params_h = inv_params.copy(append=dict(pinfo=high_pinfo, vertical_sup=True,
+                                                           seg=inv_seg_2, vertical_out=False))
+            inv_master_h: InvCore = self.new_template(InvCore, params=inv_params_h)
+            inv_h = self.add_tile(inv_master_h, inv_tile_h, inv_col)
+            inv_sch_params = [inv_master_l.sch_params, inv_master_h.sch_params]
+        else:
+            inv_h = None
+            inv_sch_params = [inv_master_l.sch_params]
+
+        # substrate taps
+        vss_hm = [pi.get_pin('VSS0'), pi.get_pin('VSS1'),
+                  self.get_track_id(0, MOSWireType.DS, 'sup', tile_idx=8)]
+        vdd_hm = [pi.get_pin('VDD_hm'), self.get_track_id(0, MOSWireType.DS, 'sup', tile_idx=6)]
+        ncol_tot = self.num_cols
+        sub = self.add_substrate_contact(0, 0, tile_idx=0, seg=ncol_tot)
+        self.connect_to_track_wires(sub, vss_hm[0])
+        sub = self.add_substrate_contact(0, 0, tile_idx=2, seg=ncol_tot)
+        self.connect_to_track_wires(sub, vdd_hm[0])
+        sub = self.add_substrate_contact(0, 0, tile_idx=4, seg=ncol_tot)
+        self.connect_to_track_wires(sub, vss_hm[1])
+        sub = self.add_substrate_contact(0, 0, tile_idx=6, seg=ncol_tot)
+        sub_vdd1 = self.connect_to_tracks(sub, vdd_hm[1])
+        vdd_hm[1] = sub_vdd1
+        sub = self.add_substrate_contact(0, 0, tile_idx=8, seg=ncol_tot)
+        sub_vss2 = self.connect_to_tracks(sub, vss_hm[2])
+        vss_hm[2] = sub_vss2
+
+        self.set_mos_size()
+        xh = self.bound_box.xh
+
+        # routing
+        xm_w = tr_manager.get_width(xm_layer, 'sig')
+        xm_w_sup = tr_manager.get_width(xm_layer, 'sup')
+        xm_w_hs = tr_manager.get_width(xm_layer, 'sig_hs')
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+        vm_w_sup = tr_manager.get_width(vm_layer, 'sup')
+        vm_sep_sup = tr_manager.get_sep(vm_layer, ('sup', 'sup'))
+
+        xm_vss_tids, xm_vdd_tids = [], []
+        for tid_arr, sup_hm_arr in [(xm_vss_tids, vss_hm), (xm_vdd_tids, vdd_hm)]:
+            for sup_w in sup_hm_arr:
+                y = grid.track_to_coord(hm_layer, sup_w.track_id.base_index)
+                tid_arr.append(TrackID(xm_layer,
+                                       grid.coord_to_track(xm_layer, y, mode=RoundMode.NEAREST),
+                                       width=xm_w_sup))
+        tr_list = ['sup'] + ['sig'] * (nbits + 1)
+        pidx_list_l = tr_manager.place_wires(xm_layer, tr_list,
+                                             align_track=xm_vss_tids[0].base_index, align_idx=0)[1]
+        pidx_list_h = tr_manager.place_wires(xm_layer, tr_list,
+                                             align_track=xm_vss_tids[1].base_index, align_idx=0)[1]
+        tr_list.reverse()
+        nidx_list_l = tr_manager.place_wires(xm_layer, tr_list,
+                                             align_track=xm_vss_tids[1].base_index, align_idx=-1)[1]
+        nidx_list_h = tr_manager.place_wires(xm_layer, tr_list,
+                                             align_track=xm_vss_tids[2].base_index, align_idx=-1)[1]
+        io_idx_list = tr_manager.place_wires(xm_layer, ['sig_hs', 'sup', 'sig_hs'],
+                                             align_track=xm_vdd_tids[0].base_index, align_idx=1)[1]
+        int_idx_list = tr_manager.place_wires(xm_layer, ['sig_hs', 'sup', 'sig_hs'],
+                                              align_track=xm_vdd_tids[1].base_index, align_idx=1)[1]
+
+        # PI signals
+        vss_list = pi.get_all_port_pins('VSS')
+        vdd_list = pi.get_all_port_pins('VDD')
+        suf = f'<{nbits}>'
+        en_vss = self.connect_to_track_wires(vss_hm[0:2], pi.get_pin('a_enb' + suf))
+        en_l = en_vss.lower
+        en_u = en_vss.upper
+        self.connect_to_tracks(vdd_hm[0], pi.get_pin('a_en' + suf).track_id,
+                               track_lower=en_l, track_upper=en_u)
+        en_xm_upper = None
+        for idx in range(nbits):
+            suf = f'<{idx}>'
+            enb = self.connect_wires([pi.get_pin('a_en' + suf), pi.get_pin('b_enb' + suf)],
+                                     lower=en_l, upper=en_u)
+            en = self.connect_wires([pi.get_pin('a_enb' + suf), pi.get_pin('b_en' + suf)],
+                                    lower=en_l, upper=en_u)
+            ptid = TrackID(xm_layer, pidx_list_l[1 + idx], width=xm_w)
+            ntid = TrackID(xm_layer, nidx_list_l[-idx - 2], width=xm_w)
+            if idx == 0:
+                en = self.connect_to_tracks(en, ptid, track_lower=0)
+                en_xm_upper = en.upper
+            else:
+                en = self.connect_to_tracks(en, ptid, track_lower=0, track_upper=en_xm_upper)
+            enb = self.connect_to_tracks(enb, ntid, track_lower=0, track_upper=en_xm_upper)
+            self.add_pin('sp' + suf, en)
+            self.add_pin('sn' + suf, enb)
+
+        intout = self.connect_to_tracks(pi.get_pin('out'),
+                                        TrackID(xm_layer, io_idx_list[2], width=xm_w_hs),
+                                        track_lower=0)
+        self.add_pin('intout', intout)
+        vdd0 = self.connect_to_tracks(vdd_list, xm_vdd_tids[0], track_lower=0, track_upper=xh)
+        vss0 = self.connect_to_tracks(vss_list, xm_vss_tids[0], track_lower=0, track_upper=xh)
+        vss1 = self.connect_to_tracks(vss_list, xm_vss_tids[1], track_lower=0, track_upper=xh)
+
+        # delay cell signals
+        vdd_list, vss0_list, vss1_list = [], [], []
+        for dc in dc_arr:
+            vdd_list += dc.get_all_port_pins('VDD')
+            vss0_list += dc.get_all_port_pins('VSS1')
+            vss1_list += dc.get_all_port_pins('VSS0')
+        vdd_list.extend(nand_l.get_all_port_pins('VDD'))
+        vss0_list.extend(nand_l.get_all_port_pins('VSS'))
+        if split_nand:
+            vdd_list.extend(nand_h.get_all_port_pins('VDD'))
+            vss1_list.extend(nand_h.get_all_port_pins('VSS'))
+        vss0_list.extend(inv_l.get_all_port_pins('VSS'))
+        vdd_list.extend(inv_l.get_all_port_pins('VDD'))
+        if split_inv:
+            vdd_list.extend(inv_h.get_all_port_pins('VDD'))
+            vss1_list.extend(inv_h.get_all_port_pins('VSS'))
+        vdd_list.extend([dc.get_pin('bk1_vm') for dc in dc_arr])
+        self.connect_to_track_wires(vdd_list, vdd_hm[1])
+        self.connect_to_track_wires(vss0_list, vss_hm[1])
+        self.connect_to_track_wires(vss1_list, vss_hm[2])
+        if ncores > 1:
+            for idx in range(ncores-1, 0, -1):
+                cur_cop = dc_arr[idx].get_pin('co_p')
+                next_in = dc_arr[idx-1].get_pin('in_p')
+                ptid = TrackID(xm_layer, pidx_list_h[1 + (idx % 2)], width=xm_w)
+                self.connect_to_tracks([cur_cop, next_in], ptid)
+
+                cur_ci = dc_arr[idx].get_pin('ci_p')
+                next_out = dc_arr[idx-1].get_pin('out_p')
+                ntid = TrackID(xm_layer, nidx_list_h[-2-(idx % 2)], width=xm_w)
+                self.connect_to_tracks([cur_ci, next_out], ntid)
+
+        # NAND to delay cell and PI
+        nand_out_vm_tr = self.grid.coord_to_track(vm_layer, nand_l.get_pin('pout').middle,
+                                                  RoundMode.NEAREST)
+        nand_out_pins = [nand_l.get_pin('pout'), nand_l.get_pin('nout')]
+        if split_nand:
+            nand_out_pins.extend([nand_h.get_pin('pout'), nand_h.get_pin('nout')])
+        nand_out_vm_w = self.connect_to_tracks(nand_out_pins,
+                                               TrackID(vm_layer, nand_out_vm_tr, vm_w))
+        a_in_buf_xm = self.connect_to_tracks([nand_out_vm_w, dc_arr[-1].get_pin('in_p')],
+                                             TrackID(xm_layer, int_idx_list[0], xm_w))
+        a_in_buf_vm = self.connect_to_tracks([a_in_buf_xm, pi.get_pin('a_in')],
+                                             TrackID(vm_layer, vert_trs[0], vm_w))
+
+        # Delay Cell to PI
+        b_in_xm = self.connect_to_tracks(dc_arr[-1].get_pin("out_p"),
+                                         TrackID(xm_layer, int_idx_list[-1], xm_w))
+        b_in_vm = self.connect_to_tracks([b_in_xm, pi.get_pin("b_in")],
+                                         TrackID(vm_layer, vert_trs[1], vm_w))
+
+        nand_in_hm = [nand_l.get_pin("nin<0>"), vdd_hm[1]]
+        if split_nand:
+            nand_in_hm.append(nand_h.get_pin("nin<0>"))
+        nand_in_vm_tr = tr_manager.get_next_track_obj(nand_out_vm_w.track_id, 'sig', 'sig')
+        self.connect_to_tracks(nand_in_hm, nand_in_vm_tr)
+
+        # Inv out to nand in
+        inv_out_tr = grid.coord_to_track(vm_layer, inv_l.get_pin("pout").middle, RoundMode.NEAREST)
+        inv_out_hm_w = [inv_l.get_pin("pout"), inv_l.get_pin("nout"), nand_l.get_pin("nin<1>")]
+        inv_in_tr = tr_manager.get_next_track(vm_layer, inv_out_tr, 'sig', 'sig')
+        inv_in_hm_w = [inv_l.get_pin('in')]
+        if split_inv:
+            inv_out_hm_w.extend([inv_h.get_pin("nout"), inv_h.get_pin("pout")])
+            inv_in_hm_w.append(inv_h.get_pin("in"))
+        if split_nand:
+            inv_out_hm_w.append(nand_h.get_pin("nin<1>"))
+        inv_out_w = self.connect_to_tracks(inv_out_hm_w, TrackID(vm_layer, inv_out_tr, vm_w))
+        a_in = self.connect_to_tracks(inv_in_hm_w, TrackID(vm_layer, inv_in_tr, vm_w))
+        self.add_pin('a_in', a_in)
+
+        # Supply routing over nand, dc, and inv
+        vm_wires = [nand_out_vm_w, inv_out_w]
+        for dc in dc_arr:
+            for port_name in dc.port_names_iter():
+                if port_name not in ['VDD', 'VSS0', 'VSS1']:
+                    vm_wires.extend(dc.get_all_port_pins(port_name, vm_layer))
+        # for idx, wire in enumerate(vm_wires):
+        #     self.add_pin(f'vm_wire_{idx}', wire)
+        vss_vm_arr = pi.get_all_port_pins('VSS')[0]
+        vdd_vm_arr = pi.get_all_port_pins('VDD')[0]
+        vss_vm, vdd_vm = [], []
+        for wire_arr, target_wire, vm_list in [(vss_vm_arr, vss_hm[2], vss_vm),
+                                               (vdd_vm_arr, vdd_hm[1], vdd_vm)]:
+            for wire in wire_arr.warr_iter():
+                tr_idx = wire.track_id.base_index
+                min_idx = tr_manager.get_next_track(vm_layer, tr_idx, 'sup', 'sig', up=False)
+                max_idx = tr_manager.get_next_track(vm_layer, tr_idx, 'sup', 'sig', up=True)
+                will_intersect = False
+                for sig_wire in vm_wires:
+                    if min_idx < sig_wire.track_id.base_index <= max_idx:
+                        will_intersect = True
+                if not will_intersect:
+                    self.connect_to_tracks(wire, target_wire.track_id)
+                    vm_list.append(wire)
+        vdd1 = self.connect_to_tracks(vdd_vm, xm_vdd_tids[1], track_lower=0, track_upper=xh)
+        vss2 = self.connect_to_tracks(vss_vm, xm_vss_tids[2], track_lower=0, track_upper=xh)
+        self.add_pin('VDD', [vdd0, vdd1], connect=True)
+        self.add_pin('VSS', [vss0, vss1, vss2], connect=True)
+
+        tidx_list = self.get_available_tracks(vm_layer, 0, inv_in_tr, 0, self.bound_box.yh,
+                                              width=vm_w_sup, sep=vm_sep_sup)
+        for tidx in tidx_list:
+            tid = TrackID(vm_layer, tidx, vm_w_sup)
+            for wire in vdd_hm + [vss_hm[1], vdd0, vdd1, vss1]:
+                self.connect_to_tracks(wire, tid, min_len_mode=MinLenMode.MIDDLE)
+            for wire in [vss_hm[0], vss0]:
+                self.connect_to_tracks(wire, tid, min_len_mode=MinLenMode.UPPER)
+            for wire in [vss_hm[2], vss2]:
+                self.connect_to_tracks(wire, tid, min_len_mode=MinLenMode.LOWER)
+
+        if self.params['export_dc_in']:
+            self.add_pin('a_in_buf', a_in_buf_vm)
+        if self.params['export_dc_out']:
+            self.add_pin('b_in', b_in_vm)
+
+        # Set the schematic parameters
+        self.sch_params = dict(
+            pi_params=pi_master.sch_params,
+            dc_params=dc_master.sch_params,
+            inv_params=inv_sch_params,
+            nand_params=nand_sch_params,
+            num_core=ncores,
+            export_dc_out=self.params['export_dc_out'],
+            export_dc_in=self.params['export_dc_in'],
+        )
diff --git a/src/aib_ams/layout/rxanlg.py b/src/aib_ams/layout/rxanlg.py
new file mode 100644
index 0000000..b37efb7
--- /dev/null
+++ b/src/aib_ams/layout/rxanlg.py
@@ -0,0 +1,446 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from __future__ import annotations
+
+from typing import Any, Dict, Optional, Type, List, Tuple, Mapping, Sequence
+
+from pybag.enum import RoundMode, MinLenMode, PinMode
+
+from bag.util.immutable import Param, ImmutableList
+from bag.design.module import Module
+from bag.layout.routing.base import TrackID, WireArray
+from bag.layout.template import TemplateDB
+
+from xbase.layout.enum import MOSWireType
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase, SupplyColumnInfo
+
+from bag3_digital.layout.stdcells.gates import InvCore, InvChainCore
+from bag3_digital.layout.stdcells.levelshifter import LevelShifterCoreOutBuffer
+
+from ..schematic.aib_rxanlg_core import aib_ams__aib_rxanlg_core
+from .se_to_diff import SingleToDiffEnable, DiffBufferEnable
+from .util import draw_io_supply_column, draw_io_shifters
+
+
+class RXAnalog(MOSBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_rxanlg_core
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            se_params='se_to_diff parameters.',
+            match_params='se_to_diff_match parameters.',
+            inv_params='async output inverter parameters.',
+            data_lv_params='data level shifter parameters.',
+            ctrl_lv_params='control signals level shifter parameters.',
+            por_lv_params='POR level shifter parameters.',
+            buf_ctrl_lv_params='control level shifter input buffer parameters',
+            buf_por_lv_params='POR level shifter input buffer parameters.',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            core_ncol='Number of columns for receiver core.',
+            tap_info_list='Extra substrate taps to draw.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_p=-1,
+            ridx_n=0,
+            core_ncol=0,
+            tap_info_list=ImmutableList(),
+        )
+
+    @classmethod
+    def get_rx_half_ncol(cls, template: MOSBase, pinfo: MOSBasePlaceInfo,
+                         params: Mapping[str, Any]) -> int:
+        tmp = cls._make_masters(template, pinfo, params)
+        lv_data_master = tmp[0]
+        inv_master = tmp[3]
+        data_master = tmp[4]
+        clk_master = tmp[5]
+
+        min_sep = template.min_sep_col
+        lv_data_ncol = lv_data_master.num_cols
+        inv_ncol = inv_master.num_cols
+        inv_ncol += (inv_ncol & 1)
+        inbuf_ncol = max(data_master.num_cols, clk_master.num_cols)
+        half_ncol = max(lv_data_ncol + min_sep + inv_ncol, inbuf_ncol)
+        return half_ncol
+
+    def draw_layout(self):
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo, flip_tile=True)
+
+        conn_layer = self.conn_layer
+        hm_layer = conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+
+        ridx_p: int = self.params['ridx_p']
+        ridx_n: int = self.params['ridx_n']
+        core_ncol: int = self.params['core_ncol']
+        tap_info_list: ImmutableList[Tuple[int, bool]] = self.params['tap_info_list']
+
+        tmp = self._make_masters(self, pinfo, self.params)
+        (lv_data_master, lv_ctrl_master, lv_por_master, inv_master, data_master,
+         clk_master, buf_ctrl_lv_master, buf_por_lv_master) = tmp
+
+        inbuf_ncol = max(data_master.num_cols, clk_master.num_cols)
+
+        # track definitions
+        bot_vss = self.get_track_id(ridx_n, MOSWireType.DS, 'sup', tile_idx=1)
+        top_vss = self.get_track_id(ridx_n, MOSWireType.DS, 'sup', tile_idx=2)
+        # Placement
+        lv_data_ncol = lv_data_master.num_cols
+        lv_ctl_ncol = lv_ctrl_master.num_cols
+        lv_por_ncol = lv_por_master.num_cols
+        min_sep = self.min_sep_col
+        sup_info = self.get_supply_column_info(xm_layer)
+
+        inv_ncol = inv_master.num_cols
+        inv_ncol += (inv_ncol & 1)
+        half_ncol = max(lv_data_ncol + min_sep + inv_ncol, inbuf_ncol, core_ncol)
+
+        # assume 2 inverter chains + margins have smaller width than a single lvl shifter
+        if 2 * buf_ctrl_lv_master.num_cols + min_sep > lv_ctl_ncol:
+            raise ValueError("buffer too large compared to data level shifter's width")
+        if 2 * buf_por_lv_master.num_cols + min_sep > lv_por_ncol:
+            raise ValueError("buffer too large compared to data level shifter's width")
+
+        # initialize supply data structures
+        lay_range = range(conn_layer, xm_layer + 1)
+        vdd_io_table = {lay: [] for lay in lay_range}
+        vdd_core_table = {lay: [] for lay in lay_range}
+        vss_table = {lay: [] for lay in lay_range}
+
+        # instantiate cells and collect pins
+        pin_dict = {'por': [], 'porb': [], 'VDDIO': [], 'VSS': [], 'por_core': [],
+                    'porb_core': [], 'VDD': []}
+        in_pins = ['din_en', 'por_in', 'ck_en', 'unused']
+        cur_col = 0
+        cur_col = draw_io_supply_column(self, cur_col, sup_info, vdd_io_table,
+                                        vdd_core_table, vss_table, ridx_p, ridx_n, True)
+        new_col = draw_io_shifters(self, cur_col, buf_ctrl_lv_master, buf_por_lv_master,
+                                   lv_ctrl_master, lv_por_master,
+                                   bot_vss, top_vss, in_pins[0], in_pins[1],
+                                   True, True, False, pin_dict)
+        cur_col = new_col
+        cur_col = draw_io_supply_column(self, cur_col, sup_info, vdd_io_table,
+                                        vdd_core_table, vss_table, ridx_p, ridx_n, False)
+        cur_col += half_ncol
+        self._draw_data_path(cur_col, data_master, lv_data_master, inv_master,
+                             bot_vss, True, 'data_', pin_dict)
+        cur_col += min_sep
+        self._draw_data_path(cur_col, clk_master, lv_data_master, inv_master,
+                             bot_vss, False, 'clk_', pin_dict)
+        cur_col += half_ncol + self.sub_sep_col // 2
+        cur_col = draw_io_supply_column(self, cur_col, sup_info, vdd_io_table,
+                                        vdd_core_table, vss_table, ridx_p, ridx_n, True)
+        cur_col = draw_io_shifters(self, cur_col, buf_ctrl_lv_master, buf_por_lv_master,
+                                   lv_ctrl_master, lv_por_master,
+                                   bot_vss, top_vss, in_pins[2], in_pins[3],
+                                   True, True, False, pin_dict, flip_lr=True)
+
+        # add tapes on bottom tile
+        max_col = self._draw_bot_supply_column(tap_info_list, sup_info, vdd_core_table, vss_table,
+                                               ridx_p, ridx_n)
+        max_col = max(cur_col, max_col)
+        self.set_mos_size(num_cols=max_col)
+        xh = self.bound_box.xh
+
+        # connect and export supply pins
+        vss_table[hm_layer].extend(pin_dict['VSS'])
+        vdd_core_table[hm_layer].extend(pin_dict['VDD'])
+        vdd_io_table[hm_layer].extend(pin_dict['VDDIO'])
+        vss_list = vdd_io_list = vdd_core_list = []
+        for lay in range(hm_layer, xm_layer + 1, 2):
+            vss_list = self.connect_wires(vss_table[lay], upper=xh)
+            vdd_core_list = self.connect_wires(vdd_core_table[lay], upper=xh)
+            vdd_io_list = self.connect_wires(vdd_io_table[lay], upper=xh)
+
+        vss_vm = vss_table[vm_layer]
+        self.add_pin('VDDIO', vdd_io_list)
+        self.add_pin('VDDCore', vdd_core_list)
+        self.add_pin('VSS', vss_list)
+        self.add_pin('VDDIO_vm', vdd_io_table[vm_layer], hide=True)
+        self.add_pin('VDDCore_vm', vdd_core_table[vm_layer], hide=True)
+        self.add_pin('VSS_vm', vss_vm, hide=True)
+        self.add_pin('VDDIO_conn', vdd_io_table[conn_layer], hide=True)
+        self.add_pin('VDDCore_conn', vdd_core_table[conn_layer], hide=True)
+        self.add_pin('VSS_conn', vss_table[conn_layer], hide=True)
+
+        # connect VDDCore signals
+        grid = self.grid
+        tr_manager = self.tr_manager
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+        xm_w = tr_manager.get_width(xm_layer, 'sig')
+        xm_w_hs = tr_manager.get_width(xm_layer, 'sig_hs')
+        # VDD, por_buf, clkn, clkp, data, data_async, porb_buf, data_en, clk_in, por_in
+        idx_list = tr_manager.place_wires(xm_layer, ['sup', 'sig', 'sig_hs', 'sig_hs', 'sig_hs',
+                                                     'sig_hs', 'sig', 'sig', 'sig', 'sig'],
+                                          align_track=vdd_core_list[0].track_id.base_index)[1]
+        # POR
+        por_core, porb_core = pin_dict['por_in_buf']
+        por_list = pin_dict['por_core']
+        porb_list = pin_dict['porb_core']
+        por_list.append(por_core)
+        porb_list.append(porb_core)
+        por_core, porb_core = self.connect_differential_tracks(por_list, porb_list, xm_layer,
+                                                               idx_list[1], idx_list[6],
+                                                               width=xm_w)
+        # extend POR signals so they are symmetric with respect to center
+        self.extend_wires([por_core, porb_core], upper=2 * self.bound_box.xm - por_core.lower)
+
+        # VDDCore data and control signals
+        match_wires = [pin_dict['data_out'], pin_dict['data_async'],
+                       pin_dict['clk_outp'], pin_dict['clk_outn']]
+        results = self.connect_matching_tracks(match_wires, xm_layer,
+                                               [idx_list[4], idx_list[5], idx_list[3], idx_list[2]],
+                                               width=xm_w_hs, track_lower=0)
+        self.add_pin('odat', results[0], mode=PinMode.LOWER)
+        self.add_pin('odat_async', results[1], mode=PinMode.LOWER)
+        self.add_pin('oclkp', results[2], mode=PinMode.LOWER)
+        self.add_pin('oclkn', results[3], mode=PinMode.LOWER)
+
+        in_info_list = [('din_en', 'data_en', idx_list[7]), ('por_in', 'por', idx_list[9]),
+                        ('unused', 'unused', -1), ('ck_en', 'clk_en', idx_list[8])]
+        for buf_idx, (key, port_name, tidx) in enumerate(in_info_list):
+            hm_warr = pin_dict[key][0]
+            vm_tidx_ref = pin_dict[key + '_buf'][1].track_id.base_index
+            vm_tidx = tr_manager.get_next_track(vm_layer, vm_tidx_ref, 'sig', 'sig',
+                                                up=((buf_idx & 1) == 0))
+            vm_warr = self.connect_to_tracks(hm_warr, TrackID(vm_layer, vm_tidx, width=vm_w),
+                                             min_len_mode=MinLenMode.LOWER)
+            if key == 'unused':
+                self.connect_to_tracks(vm_warr, bot_vss)
+            else:
+                self.add_pin(port_name,
+                             self.connect_to_tracks(vm_warr, TrackID(xm_layer, tidx, width=xm_w),
+                                                    track_lower=0),
+                             mode=PinMode.LOWER)
+
+        # connect VDDIO signals
+        idx_list = tr_manager.place_wires(xm_layer, ['sig', 'sig', 'sup', 'sig', 'sig'],
+                                          align_track=vdd_io_list[0].track_id.base_index,
+                                          align_idx=2)[1]
+        for name, ename in [('din_en', 'data'), ('ck_en', 'clk')]:
+            wp, wn = self.connect_differential_tracks(pin_dict[f'{name}_out'],
+                                                      pin_dict[f'{name}_outb'],
+                                                      xm_layer, idx_list[1], idx_list[3],
+                                                      width=xm_w)
+            self.connect_to_track_wires(wp, pin_dict[f'{ename}_en'])
+            self.connect_to_track_wires(wn, pin_dict[f'{ename}_enb'])
+        rp, rn = self.connect_differential_tracks(pin_dict['por_in_out'], pin_dict['por_in_outb'],
+                                                  xm_layer, idx_list[0], idx_list[4], width=xm_w)
+        self.connect_differential_wires(pin_dict['por'], pin_dict['porb'], rp, rn)
+
+        idx_list = tr_manager.place_wires(vm_layer, ['sig', 'sig', 'sup'],
+                                          align_track=vdd_io_table[vm_layer][0].track_id.base_index,
+                                          align_idx=-1)[1]
+        rp, rn = self.connect_differential_tracks(rp, rn, vm_layer, idx_list[0], idx_list[1],
+                                                  width=tr_manager.get_width(vm_layer, 'sig'))
+        self.add_pin('por_vccl', rp)
+        self.add_pin('porb_vccl', rn)
+
+        # connect io pad signals
+        in_pins = pin_dict['data_in']
+        in_pins.append(pin_dict['clk_inp'][0])
+        clkn = pin_dict['clk_inn'][0]
+        in_tidx = grid.coord_to_track(xm_layer, in_pins[0].middle, mode=RoundMode.GREATER_EQ)
+        ck_tidx = grid.coord_to_track(xm_layer, clkn.middle, mode=RoundMode.LESS_EQ)
+        io_w = tr_manager.get_width(xm_layer, 'padout')
+        in_warr = self.connect_to_tracks(in_pins, TrackID(xm_layer, in_tidx, width=io_w),
+                                         min_len_mode=MinLenMode.MIDDLE)
+        clk_warr = self.connect_to_tracks(clkn, TrackID(xm_layer, ck_tidx, width=io_w),
+                                          track_lower=in_warr.lower, track_upper=in_warr.upper)
+        self.add_pin('iopad', in_warr)
+        self.add_pin('iclkn', clk_warr)
+
+        # setup schematic parameters
+        rm_keys = ['dual_output', 'invert_out']
+        data_lv_sch_params = lv_data_master.sch_params.copy(remove=rm_keys)
+        ctrl_lv_sch_params = lv_ctrl_master.sch_params.copy(remove=rm_keys)
+        por_lv_sch_params = lv_por_master.sch_params.copy(remove=rm_keys)
+        self.sch_params = dict(
+            data_params=data_master.sch_params,
+            clk_params=clk_master.sch_params,
+            data_lv_params=data_lv_sch_params,
+            ctrl_lv_params=ctrl_lv_sch_params,
+            por_lv_params=por_lv_sch_params,
+            buf_ctrl_lv_params=buf_ctrl_lv_master.sch_params.copy(remove=['dual_output']),
+            buf_por_lv_params=buf_por_lv_master.sch_params.copy(remove=['dual_output']),
+            inv_params=inv_master.sch_params,
+        )
+
+    @classmethod
+    def _make_masters(cls, template: MOSBase, pinfo: MOSBasePlaceInfo, params: Mapping[str, Any]
+                      ) -> Tuple[LevelShifterCoreOutBuffer, LevelShifterCoreOutBuffer,
+                                 LevelShifterCoreOutBuffer, InvCore, SingleToDiffEnable,
+                                 DiffBufferEnable, InvChainCore, InvChainCore]:
+        se_params: Param = params['se_params']
+        match_params: Param = params['match_params']
+        inv_params: Param = params['inv_params']
+        data_lv_params: Param = params['data_lv_params']
+        ctrl_lv_params: Param = params['ctrl_lv_params']
+        por_lv_params: Param = params['por_lv_params']
+        buf_ctrl_lv_params: Param = params['buf_ctrl_lv_params']
+        buf_por_lv_params: Param = params['buf_por_lv_params']
+
+        ridx_p: int = params['ridx_p']
+        ridx_n: int = params['ridx_n']
+
+        # setup master parameters
+        append = dict(pinfo=pinfo, ridx_n=ridx_n, ridx_p=ridx_p)
+        data_params = data_lv_params.copy(append=dict(dual_output=True,
+                                                      vertical_rst=['rst_outp', 'rst_outn',
+                                                                    'rst_casc'],
+                                                      **append))
+        ctrl_params = ctrl_lv_params.copy(append=dict(dual_output=True, **append))
+        inv_params = inv_params.copy(append=append)
+        data_buf_params = dict(vertical_out=False, **append, **se_params)
+        clk_buf_params = dict(vertical_out=False, **append, **match_params)
+
+        # create masters
+        lv_data_master = template.new_template(LevelShifterCoreOutBuffer, params=data_params)
+        lv_ctrl_master = template.new_template(LevelShifterCoreOutBuffer, params=ctrl_params)
+        inv_master = template.new_template(InvCore, params=inv_params)
+        data_master = template.new_template(SingleToDiffEnable, params=data_buf_params)
+        clk_master = template.new_template(DiffBufferEnable, params=clk_buf_params)
+        buf_ctrl_lv_master = cls._get_buf_lv_master(template, buf_ctrl_lv_params, append)
+        buf_por_lv_master = cls._get_buf_lv_master(template, buf_por_lv_params, append)
+
+        # NOTE: Set POR level shifter to 4 columns less than normal level shifter.
+        # Since both level shifter are dual output and symmetric, this means that the POR level
+        # shifter is 2 columns shorter than norma level shifter on left and right side, which
+        # will conveniently shift the vm_layer output wires of POR to not collide with
+        # the control level shifters.
+        # Also, since POR level shifter is usually small (because it doesn't have to be big),
+        # this make sure we have enough routing tracks for differential inputs on vm_layer
+        por_ncol = lv_ctrl_master.num_cols - 4
+        por_params = por_lv_params.copy(append=dict(dual_output=True, has_rst=False,
+                                                    num_col_tot=por_ncol, **append))
+        lv_por_master = template.new_template(LevelShifterCoreOutBuffer, params=por_params)
+
+        return (lv_data_master, lv_ctrl_master, lv_por_master, inv_master, data_master,
+                clk_master, buf_ctrl_lv_master, buf_por_lv_master)
+
+    def _draw_data_path(self, anchor: int, se_master: MOSBase,
+                        lv_data_master: MOSBase, inv_master: MOSBase,
+                        vss_tid: TrackID, flip_lr: bool, prefix: str,
+                        pin_dict: Dict[str, List[WireArray]]) -> None:
+        tr_manager = self.tr_manager
+        grid = self.grid
+        vm_layer = self.conn_layer + 2
+
+        dir_sign = 1 - 2 * int(flip_lr)
+        inv_ncol = inv_master.num_cols
+        inv_ncol += (inv_ncol & 1)
+        inv = self.add_tile(inv_master, 0, anchor + dir_sign * inv_ncol, flip_lr=not flip_lr)
+        se = self.add_tile(se_master, 1, anchor, flip_lr=flip_lr)
+        min_sep = self.min_sep_col
+        min_sep += (min_sep & 1)
+        if flip_lr:
+            lv_col = anchor - inv_ncol - min_sep
+        else:
+            lv_col = anchor + inv_ncol + min_sep
+
+        lv = self.add_tile(lv_data_master, 0, lv_col, flip_lr=flip_lr)
+
+        # figure out wire location for connecting data buffer to level shifter
+        test_pin = se.get_pin('outp')
+        vm_test = lv.get_pin('midl')
+        test_coord = test_pin.lower if flip_lr else test_pin.upper
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+        test_tidx = tr_manager.get_next_track(vm_layer, vm_test.track_id.base_index,
+                                              'sig', 'sig', up=-2 * dir_sign)
+        test_wbnd = grid.get_wire_bounds(vm_layer, test_tidx, vm_w)[flip_lr]
+        if (((test_wbnd < test_coord) and not flip_lr) or
+                ((test_wbnd > test_coord) and flip_lr)):
+            # closest wires don't work
+            vm_ref = lv.get_pin('midr')
+            tidx_p = tr_manager.get_next_track(vm_layer, vm_ref.track_id.base_index,
+                                               'sig', 'sig', up=dir_sign)
+
+        else:
+            tidx_p = test_tidx
+        tidx_n = tr_manager.get_next_track(vm_layer, tidx_p,
+                                           'sig', 'sig', up=dir_sign)
+
+        outp, outn = self.connect_differential_tracks(se.get_all_port_pins('outp'),
+                                                      se.get_all_port_pins('outn'),
+                                                      vm_layer, tidx_p, tidx_n, width=vm_w)
+        self.connect_differential_wires(outp, outn, lv.get_pin('in'), lv.get_pin('inb'))
+        self.connect_to_tracks(lv.get_pin('rst_outb'), vss_tid)
+
+        pin_dict[prefix + 'en'] = [se.get_pin('en')]
+        pin_dict[prefix + 'enb'] = [se.get_pin('enb')]
+        pin_dict['por_core'].append(lv.get_pin('rst_out'))
+        pin_dict['porb_core'].append(lv.get_pin('rst_casc'))
+
+        vm_tidx_ref = inv.get_pin('out').track_id.base_index
+        in_vm_tidx = tr_manager.get_next_track(vm_layer, vm_tidx_ref, 'sig', 'sig', up=False)
+        in_vm = self.connect_to_tracks(inv.get_pin('in'), TrackID(vm_layer, in_vm_tidx, width=vm_w))
+        if se.has_port('inp'):
+            # clock path
+            pin_dict[prefix + 'inp'] = [se.get_pin('inp')]
+            pin_dict[prefix + 'inn'] = [se.get_pin('inn')]
+            pin_dict[prefix + 'outp'] = [lv.get_pin('out')]
+            pin_dict[prefix + 'outn'] = [lv.get_pin('outb')]
+            self.connect_to_tracks(in_vm, vss_tid)
+        else:
+            # data path
+            pin_dict[prefix + 'in'] = [se.get_pin('in')]
+            pin_dict[prefix + 'out'] = [lv.get_pin('out')]
+            pin_dict[prefix + 'async'] = [inv.get_pin('out')]
+            self.connect_to_track_wires([lv.get_pin('poutb'), lv.get_pin('noutb')], in_vm)
+
+    def _draw_bot_supply_column(self, col_list: Sequence[Tuple[int, bool]],
+                                sup_info: SupplyColumnInfo,
+                                vdd_core_table: Dict[int, List[WireArray]],
+                                vss_table: Dict[int, List[WireArray]],
+                                ridx_p: int, ridx_n: int) -> int:
+        ncol = sup_info.ncol
+        max_col = 0
+        for idx, (cur_col, flip_lr) in enumerate(col_list):
+            anchor = cur_col + int(flip_lr) * ncol
+            self.add_supply_column(sup_info, anchor, vdd_core_table, vss_table,
+                                   ridx_p=ridx_p, ridx_n=ridx_n, extend_vdd=False, flip_lr=flip_lr,
+                                   extend_vss=False, min_len_mode=MinLenMode.MIDDLE)
+            max_col = max(max_col, cur_col + ncol)
+        return max_col
+
+    @classmethod
+    def _get_buf_lv_master(cls, template: MOSBase, buf_params: Param, append: Mapping[str, Any]
+                           ) -> InvChainCore:
+        buf_params = buf_params.copy(append=dict(
+            dual_output=True,
+            vertical_output=True,
+            **append
+        ), remove=['sig_locs'])
+        buf_master = template.new_template(InvChainCore, params=buf_params)
+
+        vm_layer = template.conn_layer + 2
+        out_tidx = buf_master.get_port('out').get_pins()[0].track_id.base_index
+        prev_tidx = template.tr_manager.get_next_track(vm_layer, out_tidx, 'sig', 'sig', up=False)
+        buf_master = buf_master.new_template_with(sig_locs=dict(outb=prev_tidx))
+        return buf_master
diff --git a/src/aib_ams/layout/se_to_diff.py b/src/aib_ams/layout/se_to_diff.py
new file mode 100644
index 0000000..411c733
--- /dev/null
+++ b/src/aib_ams/layout/se_to_diff.py
@@ -0,0 +1,310 @@
+# SPDX-License-Identifier: BSD-3-Clause AND Apache-2.0
+# Copyright 2018 Regents of the University of California
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+# * Redistributions of source code must retain the above copyright notice, this
+#   list of conditions and the following disclaimer.
+#
+# * Redistributions in binary form must reproduce the above copyright notice,
+#   this list of conditions and the following disclaimer in the documentation
+#   and/or other materials provided with the distribution.
+#
+# * Neither the name of the copyright holder nor the names of its
+#   contributors may be used to endorse or promote products derived from
+#   this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Optional, Type, List, Sequence, cast
+
+import abc
+
+from pybag.enum import RoundMode, MinLenMode
+
+from bag.util.immutable import Param
+from bag.layout.routing.base import TrackID, WireArray
+from bag.layout.template import TemplateDB
+from bag.design.database import ModuleDB
+from bag.design.module import Module
+
+from xbase.layout.enum import MOSWireType
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase
+
+from bag3_digital.layout.stdcells.gates import NAND2Core, NOR2Core, InvChainCore
+from bag3_digital.layout.stdcells.se_to_diff import SingleToDiff
+
+
+class DiffOutputBufferEnableBase(MOSBase, abc.ABC):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+        self._en_ncol = 0
+        self._core: Optional[MOSBase] = None
+
+    @property
+    def en_ncol(self) -> int:
+        return self._en_ncol
+
+    @property
+    def core(self) -> MOSBase:
+        return self._core
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            nand_params='NAND parameters',
+            nor_params='NOR parameters',
+            core_params='two-three splitter parameters.',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            is_guarded='True to not route anything on conn_layer to allow space for guard rings',
+            swap_tiles='True to swap outp/outn tiles.',
+            vertical_out='True to make the vertical connection of out happen at this level',
+            en_ncol_min='Minimum number of columns for NAND/NOR.',
+            buf_col_list='List of inverter column indices.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_p=-1,
+            ridx_n=0,
+            is_guarded=False,
+            swap_tiles=False,
+            vertical_out=True,
+            en_ncol_min=0,
+            buf_col_list=None,
+        )
+
+    @abc.abstractmethod
+    def draw_buffers(self, master: MOSBase, tile_outp: int, tile_outn: int, col: int
+                     ) -> Dict[str, List[WireArray]]:
+        pass
+
+    def draw_layout_helper(self, differential: bool) -> None:
+        params = self.params
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, params['pinfo'])
+        self.draw_base(pinfo)
+
+        nand_params: Param = params['nand_params']
+        nor_params: Param = params['nor_params']
+        core_params: Param = params['core_params']
+        ridx_p: int = params['ridx_p']
+        ridx_n: int = params['ridx_n']
+        is_guarded: bool = params['is_guarded']
+        swap_tiles: bool = params['swap_tiles']
+        vertical_out: bool = params['vertical_out']
+        en_ncol_min: int = params['en_ncol_min']
+        buf_col_list: Optional[Sequence[int]] = params['buf_col_list']
+
+        nd0_tidx = self.get_track_index(ridx_n, MOSWireType.DS, wire_name='sig', wire_idx=-2)
+        nd1_tidx = self.get_track_index(ridx_n, MOSWireType.DS, wire_name='sig', wire_idx=-1)
+        pd0_tidx = self.get_track_index(ridx_p, MOSWireType.DS, wire_name='sig', wire_idx=0)
+        pd1_tidx = self.get_track_index(ridx_p, MOSWireType.DS, wire_name='sig', wire_idx=1)
+        ng0_tidx = self.get_track_index(ridx_n, MOSWireType.G, wire_name='sig', wire_idx=-2)
+        ng1_tidx = self.get_track_index(ridx_n, MOSWireType.G, wire_name='sig', wire_idx=-1)
+
+        append = dict(pinfo=pinfo, ridx_p=ridx_p, ridx_n=ridx_n, is_guarded=is_guarded,
+                      vertical_out=False, sig_locs=dict(nout=nd1_tidx, pout=pd0_tidx))
+        nand_params = nand_params.copy(append=append)
+        nor_params = nor_params.copy(append=append)
+
+        core_append = dict(
+            pinfo=pinfo, ridx_p=ridx_p, ridx_n=ridx_n, is_guarded=is_guarded,
+            vertical_out=vertical_out, swap_tiles=swap_tiles,
+            sig_locs=dict(nout0=nd0_tidx, nout1=nd1_tidx, pout0=pd1_tidx, pout1=pd0_tidx,
+                          nin0=ng1_tidx, nin1=ng0_tidx),
+        )
+        if differential:
+            core_cls = InvChainCore
+            core_append['sep_stages'] = True
+            core_append['buf_col_list'] = buf_col_list
+        else:
+            core_cls = SingleToDiff
+            core_append['swap_tiles'] = swap_tiles
+
+        core_params = core_params.copy(append=core_append)
+        nand_master = self.new_template(NAND2Core, params=nand_params)
+        nor_master = self.new_template(NOR2Core, params=nor_params)
+        core_master = self.new_template(core_cls, params=core_params)
+        self._core = core_master
+
+        # placement
+        nand_ncols = nand_master.num_cols
+        nor_ncols = nor_master.num_cols
+        self._en_ncol = max(nand_ncols, nor_ncols, en_ncol_min)
+        sep = self.min_sep_col
+        tile_outp = int(swap_tiles)
+        tile_outn = 1 - tile_outp
+        # NOTE: right-align NAND/NOR to reduce wire resistance
+        nand = self.add_tile(nand_master, tile_outp, self._en_ncol - nand_ncols)
+        nor = self.add_tile(nor_master, tile_outn, self._en_ncol - nor_ncols)
+        core_ports = self.draw_buffers(core_master, tile_outp, tile_outn, self._en_ncol + sep)
+        self.set_mos_size()
+
+        # routing
+        # vdd/vss
+        vdd_list = core_ports['VDD']
+        vss_list = core_ports['VSS']
+        for inst in [nand, nor]:
+            vdd_list.extend(inst.port_pins_iter('VDD'))
+            vss_list.extend(inst.port_pins_iter('VSS'))
+
+        vdd = self.connect_wires(vdd_list)[0]
+        self.add_pin('VDD', vdd)
+        self.add_pin('VSS', self.connect_wires(vss_list))
+
+        # connect NAND/NOR ports
+        nor_list = [nor.get_pin('pout')]
+        nand_list = [nand.get_pin('nout')]
+        if nor.has_port('nout'):
+            nor_list.append(nor.get_pin('nout'))
+            nand_list.append(nand.get_pin('pout'))
+
+        grid = self.grid
+        tr_manager = self.tr_manager
+        vm_layer = self.conn_layer + 2
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+
+        in0_nand = nand.get_pin('nin<0>')
+        in0_nor = nor.get_pin('nin<0>')
+        in1_nand = nand.get_pin('nin<1>')
+        in1_nor = nor.get_pin('nin<1>')
+        in1_xl = max(in1_nand.lower, in1_nor.lower)
+        vm_en_tidx = grid.coord_to_track(vm_layer, in1_xl, mode=RoundMode.GREATER_EQ)
+        vm_en_tid = TrackID(vm_layer, vm_en_tidx, width=vm_w)
+        in1_nand = self.connect_to_tracks(in1_nand, vm_en_tid, min_len_mode=MinLenMode.UPPER)
+        in1_nor = self.connect_to_tracks(in1_nor, vm_en_tid, min_len_mode=MinLenMode.LOWER)
+        self.add_pin('en', in1_nand)
+        self.add_pin('enb', in1_nor)
+        # TODO: hack: add extra spacing to avoid corner spacing
+        vm_in_tid = TrackID(vm_layer, tr_manager.get_next_track(vm_layer, vm_en_tidx, 'sig', 'sig',
+                                                                up=-2), width=vm_w)
+
+        if differential:
+            core_sch_params = core_master.sch_params.copy(remove=['dual_output'])
+            self.add_pin('inp', self.connect_to_tracks(in0_nand, vm_in_tid,
+                                                       min_len_mode=MinLenMode.UPPER))
+            self.add_pin('inn', self.connect_to_tracks(in0_nor, vm_in_tid,
+                                                       min_len_mode=MinLenMode.LOWER))
+
+            core_inp = core_ports['inp'][0]
+            core_inn = core_ports['inn'][0]
+            if core_inp.layer_id == vm_layer:
+                self.connect_to_track_wires(nor_list, core_inn)
+                self.connect_to_track_wires(nand_list, core_inp)
+            else:
+                # core_inp and core_inn are on hm_layer
+                tidx_r = grid.coord_to_track(vm_layer, min(core_inp.middle, core_inn.middle),
+                                             mode=RoundMode.LESS_EQ)
+                tidx = tr_manager.get_next_track(vm_layer, tidx_r, 'sig', 'sig', up=False)
+                vm_tid = TrackID(vm_layer, tidx, width=vm_w)
+                nor_list.append(core_inn)
+                nand_list.append(core_inp)
+                self.connect_to_tracks(nor_list, vm_tid)
+                self.connect_to_tracks(nand_list, vm_tid)
+        else:
+            core_sch_params = core_master.sch_params
+            self.add_pin('in', self.connect_to_tracks(in0_nand, vm_in_tid,
+                                                      min_len_mode=MinLenMode.UPPER))
+            self.connect_to_tracks([in0_nor, vdd], vm_in_tid)
+
+            core_in = core_ports['in'][0]
+            if len(nor_list) > 1:
+                # NAND and NOR outputs are disconnected
+                tidx = grid.coord_to_track(vm_layer, nor_list[0].middle, mode=RoundMode.LESS_EQ)
+                # avoid shorts
+                tidx = max(tr_manager.get_next_track(vm_layer, vm_en_tidx, 'sig', 'sig', up=True),
+                           tidx)
+                self.connect_to_tracks(nor_list, TrackID(vm_layer, tidx))
+
+            self.connect_to_track_wires(nand_list, core_in)
+
+        # because of the input nand there is an inversion of polarity
+        outp = core_ports['outp']
+        outn = core_ports['outn']
+        connect = len(outp) > 1
+        self.add_pin('outp', outn, connect=connect)
+        self.add_pin('outn', outp, connect=connect)
+
+        self.sch_params = dict(
+            core_params=core_sch_params,
+            nand_params=nand_master.sch_params,
+            nor_params=nor_master.sch_params,
+        )
+
+
+class SingleToDiffEnable(DiffOutputBufferEnableBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @property
+    def buf_col_list(self) -> Sequence[int]:
+        return cast(SingleToDiff, self.core).buf_col_list
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        # noinspection PyTypeChecker
+        return ModuleDB.get_schematic_class('aib_ams', 'aib_se2diff')
+
+    def draw_layout(self):
+        self.draw_layout_helper(False)
+
+    def draw_buffers(self, master: MOSBase, tile_outp: int, tile_outn: int, col: int
+                     ) -> Dict[str, List[WireArray]]:
+        core = self.add_tile(master, 0, col)
+        return {name: core.get_all_port_pins(name)
+                for name in ['VDD', 'VSS', 'in', 'outp', 'outn']}
+
+
+class DiffBufferEnable(DiffOutputBufferEnableBase):
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        # noinspection PyTypeChecker
+        return ModuleDB.get_schematic_class('aib_ams', 'aib_se2diff_match')
+
+    def draw_layout(self):
+        self.draw_layout_helper(True)
+
+    def draw_buffers(self, master: MOSBase, tile_outp: int, tile_outn: int, col: int
+                     ) -> Dict[str, List[WireArray]]:
+        bufp = self.add_tile(master, tile_outp, col)
+        bufn = self.add_tile(master, tile_outn, col)
+        return {
+            'VDD': [bufp.get_pin('VDD'), bufn.get_pin('VDD')],
+            'VSS': [bufp.get_pin('VSS'), bufn.get_pin('VSS')],
+            'outn': bufp.get_all_port_pins('outb'),
+            'outp': bufn.get_all_port_pins('outb'),
+            'inp': [bufp.get_pin('in')],
+            'inn': [bufn.get_pin('in')],
+        }
diff --git a/src/aib_ams/layout/top.py b/src/aib_ams/layout/top.py
new file mode 100644
index 0000000..e878556
--- /dev/null
+++ b/src/aib_ams/layout/top.py
@@ -0,0 +1,246 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Optional, Type, List, cast
+
+from pybag.enum import Direction, Orient2D, RoundMode
+from pybag.core import Transform, BBox, COORD_MAX, COORD_MIN
+
+from bag.util.immutable import Param
+from bag.util.importlib import import_class
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.layout.routing.base import TrackID, WireArray
+from bag.layout.template import TemplateDB, TemplateBase
+from bag.layout.util import IPMarginTemplate
+
+from .frontend import Frontend
+
+
+class FrontendESD(TemplateBase):
+    """The transmitter and receiver integrated together.
+    """
+
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        TemplateBase.__init__(self, temp_db, params, **kwargs)
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        # noinspection PyTypeChecker
+        return ModuleDB.get_schematic_class('aib_ams', 'aib_frontend')
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            ndio_cls='N diode generator class.',
+            pdio_cls='P diode generator class.',
+            ndio_params='N diode parameters.',
+            pdio_params='P diode parameters.',
+            fe_params='frontend parameters.',
+            npadout='Number of iopad_out wires.',
+            w_dio_min='minimum diode area width.',
+            dio_margin='diode wire margin.',
+            tb_margin='top/bottom margin, in resolution units.'
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(w_min=0, dio_margin=-1, tb_margin=0)
+
+    def draw_layout(self) -> None:
+        ndio_cls_name: str = self.params['ndio_cls']
+        pdio_cls_name: str = self.params['pdio_cls']
+        ndio_params: Param = self.params['ndio_params']
+        pdio_params: Param = self.params['pdio_params']
+        fe_params: Param = self.params['fe_params']
+        npadout: int = self.params['npadout']
+        w_dio_min: int = self.params['w_dio_min']
+        dio_margin: int = self.params['dio_margin']
+        tb_margin: int = self.params['tb_margin']
+
+        fe_ip_params = dict(
+            cls_name='xbase.layout.mos.top.GenericWrapper',
+            params=dict(
+                cls_name=Frontend.get_qualified_name(),
+                params=fe_params,
+                export_hidden=True,
+                half_blk_x=False,
+            ),
+        )
+
+        # make masters
+        fe_master: TemplateBase = self.new_template(IPMarginTemplate, params=fe_ip_params)
+        ndio_cls = cast(Type[TemplateBase], import_class(ndio_cls_name))
+        pdio_cls = cast(Type[TemplateBase], import_class(pdio_cls_name))
+        nd_master: TemplateBase = self.new_template(ndio_cls, params=ndio_params)
+        pd_master: TemplateBase = self.new_template(pdio_cls, params=pdio_params)
+
+        # floorplan
+        grid = self.grid
+        top_layer = nd_master.top_layer
+        w_blk, h_blk = grid.get_block_size(top_layer)
+        tb_margin = -(-tb_margin // h_blk) * h_blk
+        fe_box = fe_master.bound_box
+        nd_box = nd_master.bound_box
+        pd_box = pd_master.bound_box
+        h_fe = fe_box.h
+        h_nd = nd_box.h
+        h_pd = pd_box.h
+        w_fe = fe_box.w
+        w_nd = nd_box.w
+        w_pd = pd_box.w
+        w_dio = max(w_dio_min + dio_margin, w_nd + w_pd)
+        w_tot = w_fe + w_dio
+        w_tot = -(-w_tot // w_blk) * w_blk
+        h_tot = max(h_fe, h_nd, h_pd) + 2 * tb_margin
+        y_fe = (h_tot - h_fe) // (2 * h_blk) * h_blk
+        y_nd = (h_tot - h_nd) // (2 * h_blk) * h_blk
+        y_pd = (h_tot - h_pd) // (2 * h_blk) * h_blk
+        x_nd = w_fe
+        x_pd = w_tot - w_pd
+
+        # instantiate blocks
+        fe = self.add_instance(fe_master, inst_name='XFE', xform=Transform(0, y_fe))
+        nd = self.add_instance(nd_master, inst_name='XND', xform=Transform(x_nd, y_nd))
+        pd = self.add_instance(pd_master, inst_name='XPD', xform=Transform(x_pd, y_pd))
+
+        self.set_size_from_bound_box(top_layer, BBox(0, 0, w_tot, h_tot))
+
+        # diode guard ring connections
+        vlay = (fe.get_port('VSS').get_single_layer(), 'drawing')
+        vdir = Direction.LOWER
+        vss_list = []
+        vdd_list = []
+        vddio_list = []
+        vss_bbox: List[BBox] = fe.get_all_port_pins('VSS', layer=vlay[0])
+        vdd_bbox: List[BBox] = fe.get_all_port_pins('VDDCore', layer=vlay[0])
+        vddio_bbox: List[BBox] = fe.get_all_port_pins('VDDIO', layer=vlay[0])
+
+        vss_pd = pd.get_all_port_pins('gr')
+        for bbox in vss_bbox:
+            vss_list.extend(self.connect_bbox_to_track_wires(vdir, vlay, bbox, vss_pd))
+        vss_list = self.connect_wires(vss_list)
+
+        vddio_nd = nd.get_all_port_pins('gr')
+        for bbox in vddio_bbox:
+            vddio_list.extend(self.connect_bbox_to_track_wires(vdir, vlay, bbox, vddio_nd))
+        vddio_list = self.connect_wires(vddio_list)
+
+        # diode ports
+        vddio_pd = pd.get_all_port_pins('sub')
+        vss_nd = nd.get_all_port_pins('sub')
+        dio_sp_le = grid.get_line_end_space(vss_nd[0].layer_id, vss_nd[0].track_id.width, even=True)
+        dio_sp_le2 = dio_sp_le // 2
+        if dio_margin < 0:
+            dio_margin = dio_sp_le2
+        dio_port_xh = w_tot - dio_margin
+        x_dio_mid = (nd.bound_box.xh + pd.bound_box.xl) // 2
+        vddio_pd = self.extend_wires(vddio_pd, lower=x_dio_mid + dio_sp_le2, upper=dio_port_xh)
+        vss_nd = self.extend_wires(vss_nd, lower=x_nd, upper=x_dio_mid - dio_sp_le2)
+        self.add_pin('VDDIO', vddio_pd)
+        self.add_pin('VSS', vss_nd)
+        pad = pd.get_all_port_pins('pad')
+        pad.extend(nd.port_pins_iter('pad'))
+        pad = self.connect_wires(pad, lower=x_nd, upper=dio_port_xh)[0]
+        self.add_pin('iopad', pad)
+
+        # short diode wires so we are LVS clean
+        ym_layer = vddio_nd[0].layer_id - 1
+        vss_tidx = grid.coord_to_track(ym_layer, x_nd + w_nd, mode=RoundMode.GREATER_EQ)
+        vddio_tidx = grid.coord_to_track(ym_layer, x_pd, mode=RoundMode.LESS_EQ)
+        iopad_tidx = grid.get_middle_track(vss_tidx, vddio_tidx, round_up=False)
+        ym_w = grid.get_min_track_width(ym_layer, top_ntr=vddio_nd[0].track_id.width)
+        vddio_pd.extend(vddio_list)
+        vss_nd.extend(vss_list)
+        self.connect_to_tracks(vddio_pd, TrackID(ym_layer, vddio_tidx, width=ym_w))
+        self.connect_to_tracks(vss_nd, TrackID(ym_layer, vss_tidx, width=ym_w))
+        self.connect_to_tracks(pad, TrackID(ym_layer, iopad_tidx, width=ym_w))
+
+        # connect iopad and iclkn
+        npad = pad.track_id.num
+        pad_conn = pad[:npadout]
+        iclkn_bnds = [COORD_MAX, COORD_MIN]
+        iopad_out_list = []
+        for bbox in fe.port_pins_iter('txpadout', layer=vlay[0]):
+            warr = self.connect_bbox_to_track_wires(vdir, vlay, bbox, pad_conn)
+            iopad_out_list.append(warr)
+
+        for bbox in fe.port_pins_iter('rxpadin', layer=vlay[0]):
+            cur_bnds = [0, 0]
+            warr = self.connect_bbox_to_track_wires(vdir, vlay, bbox, pad_conn, ret_bnds=cur_bnds)
+            iopad_out_list.append(warr)
+            iclkn_bnds[0] = min(iclkn_bnds[0], cur_bnds[0])
+            iclkn_bnds[1] = max(iclkn_bnds[1], cur_bnds[1])
+
+        # export iopad_out
+        pad_conn_tid = pad_conn.track_id
+        pad_layer = pad_conn_tid.layer_id
+        iopad_out_list = self.connect_wires(iopad_out_list)
+        lower = iopad_out_list[0].lower
+        pad_bnds = grid.get_wire_bounds(pad_layer, pad_conn_tid.base_index,
+                                        width=pad_conn_tid.width)
+        pin_len = grid.get_next_length(pad_layer, pad_conn_tid.width, pad_bnds[1] - pad_bnds[0],
+                                       even=True)
+        ms_params = self.add_res_metal_warr(pad_layer, pad_conn_tid.base_index,
+                                            lower + pin_len, lower + 2 * pin_len,
+                                            width=pad_conn_tid.width, num=pad_conn_tid.num,
+                                            pitch=pad_conn_tid.pitch)
+
+        self.add_pin('iopad_out', WireArray(pad_conn_tid, lower, lower + pin_len))
+
+        bbox_iclkn = fe.get_pin('iclkn', layer=vlay[0])
+        bbox_iclkn = bbox_iclkn.set_interval(Orient2D.y, iclkn_bnds[0], iclkn_bnds[1])
+        # NOTE: some process require metal to be in same hierarchy as pin
+        self.add_rect(vlay, bbox_iclkn)
+        self.add_pin_primitive('iclkn', vlay[0], bbox_iclkn)
+
+        # supply connections
+        for idx in range(npad):
+            tid = vss_nd[idx].track_id
+            if idx == 0 or idx == npad - 1:
+                cur_list = vdd_list
+                cur_bbox = vdd_bbox
+            elif idx & 1:
+                cur_list = vss_list
+                cur_bbox = vss_bbox
+            else:
+                cur_list = vddio_list
+                cur_bbox = vddio_bbox
+
+            for bbox in cur_bbox:
+                cur_list.append(self.connect_bbox_to_tracks(vdir, vlay, bbox, tid))
+
+        self.add_pin('VDDCore', self.connect_wires(vdd_list))
+        self.add_pin('VDDIO', self.connect_wires(vddio_list))
+        self.add_pin('VSS', self.connect_wires(vss_list))
+        for name in ['VDDCore', 'VDDIO', 'VSS']:
+            self.reexport(fe.get_port(f'{name}_xm'), net_name=name, hide=False)
+
+        # reexport pins
+        for name in ['din', 'ipdrv_buf<1>', 'ipdrv_buf<0>',
+                     'indrv_buf<1>', 'indrv_buf<0>', 'itx_en_buf', 'weak_pulldownen',
+                     'weak_pullupenb']:
+            self.reexport(fe.get_port(name))
+
+        for name in ['clk_en', 'data_en', 'por', 'odat', 'odat_async',
+                     'oclkp', 'oclkn']:
+            self.reexport(fe.get_port(name))
+
+        self.sch_params = dict(
+            fe_params=fe_master.sch_params,
+            nd_params=nd_master.sch_params,
+            pd_params=pd_master.sch_params,
+            ms_params=ms_params,
+        )
diff --git a/src/aib_ams/layout/txanlg.py b/src/aib_ams/layout/txanlg.py
new file mode 100644
index 0000000..9ccc435
--- /dev/null
+++ b/src/aib_ams/layout/txanlg.py
@@ -0,0 +1,365 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, List, Sequence, Optional, Type, Tuple, Mapping
+
+from pybag.enum import MinLenMode, PinMode
+
+from bag.util.immutable import Param, ImmutableList
+from bag.design.module import Module
+from bag.layout.template import TemplateDB, PyLayInstance
+from bag.layout.routing.base import WireArray, TrackID
+
+from xbase.layout.enum import MOSWireType
+from xbase.layout.mos.base import MOSBasePlaceInfo, MOSBase, SupplyColumnInfo
+
+from bag3_digital.layout.stdcells.gates import InvChainCore
+from bag3_digital.layout.stdcells.levelshifter import LevelShifterCoreOutBuffer
+
+from ..schematic.aib_txanlg_core import aib_ams__aib_txanlg_core
+from .driver import AIBOutputDriver
+from .util import draw_io_shifters, draw_io_supply_column, get_io_shifters_ncol
+
+
+class TXAnalog(MOSBase):
+    """
+    TX part of AIB driver, follows Ayar's verilog models
+    """
+
+    def __init__(self, temp_db: TemplateDB, params: Param, **kwargs: Any) -> None:
+        MOSBase.__init__(self, temp_db, params, **kwargs)
+        self._core_ncol: int = 0
+        self._lvshift_right_ncol: int = 0
+        self._tap_info: ImmutableList[Tuple[int, bool]] = ImmutableList()
+
+    @property
+    def core_ncol(self) -> int:
+        return self._core_ncol
+
+    @property
+    def lvshift_right_ncol(self) -> int:
+        return self._lvshift_right_ncol
+
+    @property
+    def drv_tap_info(self) -> ImmutableList[Tuple[int, bool]]:
+        return self._tap_info
+
+    @classmethod
+    def get_schematic_class(cls) -> Optional[Type[Module]]:
+        return aib_ams__aib_txanlg_core
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pinfo='The MOSBasePlaceInfo object.',
+            drv_params='output driver parameters.',
+            data_lv_params='data level shifter parameters.',
+            ctrl_lv_params='control signals level shifter parameters.',
+            buf_data_lv_params='data level shifter input buffer parameters',
+            buf_ctrl_lv_params='control level shifter input buffer parameters',
+            ridx_p='pmos row index.',
+            ridx_n='nmos row index.',
+            rxhalf_ncol='number of columns of rxhalf.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            ridx_p=-1,
+            ridx_n=0,
+            rxhalf_ncol=0,
+        )
+
+    def draw_layout(self) -> None:
+        pinfo = MOSBasePlaceInfo.make_place_info(self.grid, self.params['pinfo'])
+        self.draw_base(pinfo, flip_tile=True)
+
+        grid = self.grid
+        tr_manager = self.tr_manager
+
+        drv_params: Param = self.params['drv_params']
+        data_lv_params: Param = self.params['data_lv_params']
+        ctrl_lv_params: Param = self.params['ctrl_lv_params']
+        buf_data_lv_params: Param = self.params['buf_data_lv_params']
+        buf_ctrl_lv_params: Param = self.params['buf_ctrl_lv_params']
+        ridx_p: int = self.params['ridx_p']
+        ridx_n: int = self.params['ridx_n']
+        rxhalf_ncol: int = self.params['rxhalf_ncol']
+
+        conn_layer = self.conn_layer
+        hm_layer = conn_layer + 1
+        vm_layer = hm_layer + 1
+        xm_layer = vm_layer + 1
+
+        # setup master parameters
+        append = dict(pinfo=pinfo, ridx_p=ridx_p, ridx_n=ridx_n)
+        din_params = data_lv_params.copy(append=dict(
+            dual_output=False,
+            **append,
+        ))
+        itx_en_params = ctrl_lv_params.copy(append=dict(
+            dual_output=True,
+            **append,
+        ))
+        ctrl_params = itx_en_params.copy(append=dict(dual_output=False))
+        ndrv_params = ctrl_params.copy(append=dict(invert_out=True))
+        drv_params = drv_params.copy(append=append)
+
+        # create masters
+        lv_din_master = self.new_template(LevelShifterCoreOutBuffer, params=din_params)
+        lv_itx_en_master = self.new_template(LevelShifterCoreOutBuffer, params=itx_en_params)
+        lv_ndrv_master = self.new_template(LevelShifterCoreOutBuffer, params=ndrv_params)
+        lv_ctrl_master = self.new_template(LevelShifterCoreOutBuffer, params=ctrl_params)
+        drv_master: AIBOutputDriver = self.new_template(AIBOutputDriver, params=drv_params)
+        buf_data_lv_master = self._get_buf_lv_master(buf_data_lv_params, append)
+        buf_ctrl_lv_master = self._get_buf_lv_master(buf_ctrl_lv_params, append)
+
+        # shift output tracks of weak_pullupenb, so it can cross into the other tile.
+        tmp_tid = lv_ctrl_master.get_port('out').get_pins()[0].track_id
+        pub_tidx = tr_manager.get_next_track(tmp_tid.layer_id, tmp_tid.base_index,
+                                             'sig', 'sig', up=True)
+        pub_params = ctrl_params.copy(append=dict(sig_locs=dict(outr=pub_tidx)))
+        lv_pub_master = self.new_template(LevelShifterCoreOutBuffer, params=pub_params)
+
+        # track definitions
+        bot_vss = self.get_track_id(ridx_n, MOSWireType.DS, 'sup', tile_idx=1)
+        top_vss = self.get_track_id(ridx_n, MOSWireType.DS, 'sup', tile_idx=2)
+        in_pins = ['ipdrv_buf<0>', 'itx_en_buf',
+                   'weak_pulldownen', 'weak_pullupenb',
+                   'indrv_buf<0>', 'indrv_buf<1>',
+                   'din', 'ipdrv_buf<1>']
+
+        # Placement
+        din_ncol = lv_din_master.num_cols
+        ctrl_ncol = lv_ctrl_master.num_cols
+        min_sep = self.min_sep_col
+        sup_info = self.get_supply_column_info(xm_layer)
+
+        # assume 2 inverter chains + margins have smaller width than a single lvl shifter
+        if 2 * buf_data_lv_master.num_cols + min_sep > din_ncol:
+            raise ValueError("input buffer too large compared to data level shifter's width")
+        if 2 * buf_ctrl_lv_master.num_cols + min_sep > ctrl_ncol:
+            raise ValueError("input buffer too large compared to control level shifter's width")
+
+        # initialize supply data structures
+        lay_range = range(conn_layer, xm_layer + 1)
+        vdd_io_table = {lay: [] for lay in lay_range}
+        vdd_core_table = {lay: [] for lay in lay_range}
+        vss_table = {lay: [] for lay in lay_range}
+
+        # instantiate cells and collect pins
+        pin_dict = {'por': [], 'porb': [], 'VDDIO': [], 'VDD': [], 'VSS': []}
+        cur_col = 0
+        cur_col = draw_io_supply_column(self, cur_col, sup_info, vdd_io_table,
+                                        vdd_core_table, vss_table, ridx_p, ridx_n, True)
+        #  pdrv<0>, itx_en
+        new_col = draw_io_shifters(self, cur_col, buf_ctrl_lv_master, buf_ctrl_lv_master,
+                                   lv_ctrl_master, lv_itx_en_master,
+                                   bot_vss, top_vss, in_pins[0], in_pins[1],
+                                   True, True, False, pin_dict)
+        ctrl_dual_ncol = new_col - cur_col
+        cur_col = new_col
+        cur_col = draw_io_supply_column(self, cur_col, sup_info, vdd_io_table,
+                                        vdd_core_table, vss_table, ridx_p, ridx_n, False)
+        core_ncol = get_io_shifters_ncol(self.sub_sep_col, lv_ctrl_master, lv_pub_master)
+        self._core_ncol = max(core_ncol, rxhalf_ncol)
+        # puen, puenb
+        draw_io_shifters(self, cur_col, buf_ctrl_lv_master, buf_ctrl_lv_master,
+                         lv_ctrl_master, lv_pub_master,
+                         bot_vss, top_vss, in_pins[2], in_pins[3],
+                         False, False, False, pin_dict)
+        cur_col += self._core_ncol + min_sep + self.sub_sep_col // 2
+        # ndrv<0>, ndrv<1>
+        cur_col = draw_io_shifters(self, cur_col + self._core_ncol - core_ncol,
+                                   buf_ctrl_lv_master, buf_ctrl_lv_master,
+                                   lv_ndrv_master, lv_ndrv_master,
+                                   bot_vss, top_vss, in_pins[4], in_pins[5],
+                                   True, True, False, pin_dict)
+        cur_col = draw_io_supply_column(self, cur_col, sup_info, vdd_io_table,
+                                        vdd_core_table, vss_table, ridx_p, ridx_n, True)
+        # din, pdrv<1>
+        din_ncol_tot = get_io_shifters_ncol(self.sub_sep_col, lv_din_master, lv_ctrl_master)
+        din_ncol_max = max(din_ncol_tot, ctrl_dual_ncol)
+        self._lvshift_right_ncol = din_ncol_max
+        cur_col = draw_io_shifters(self, cur_col + din_ncol_max - din_ncol_tot,
+                                   buf_data_lv_master, buf_ctrl_lv_master,
+                                   lv_din_master, lv_ctrl_master,
+                                   bot_vss, top_vss, in_pins[6], in_pins[7],
+                                   True, True, True, pin_dict)
+        drv_inst = self.add_tile(drv_master, 1, cur_col)
+        # add tapes on bottom tile
+        max_col = self._draw_bot_supply_column(cur_col, drv_master.tap_columns, sup_info,
+                                               vdd_core_table, vss_table, ridx_p, ridx_n)
+
+        self.set_mos_size(num_cols=max_col)
+
+        # connect and export supply pins
+        vss_list = vdd_io_list = vdd_core_list = []
+        for lay in range(hm_layer, xm_layer + 1, 2):
+            vss = vss_table[lay]
+            vdd_io = vdd_io_table[lay]
+            vss.extend(drv_inst.port_pins_iter(f'VSS_{lay}'))
+            vdd_io.extend(drv_inst.port_pins_iter(f'VDD_{lay}'))
+            vss_list = self.connect_wires(vss)
+            vdd_io_list = self.connect_wires(vdd_io)
+            vdd_core_list = self.connect_wires(vdd_core_table[lay], upper=vdd_io[0].upper)
+
+        self.add_pin('VDDIO', vdd_io_list)
+        self.add_pin('VDDCore', vdd_core_list)
+        self.add_pin('VSS', vss_list)
+        self.add_pin('VDDIO_vm', vdd_io_table[vm_layer], hide=True)
+        self.add_pin('VDDCore_vm', vdd_core_table[vm_layer], hide=True)
+        self.add_pin('VSS_vm', vss_table[vm_layer], hide=True)
+        self.add_pin('VDDIO_conn', vdd_io_table[conn_layer], hide=True)
+        self.add_pin('VDDCore_conn', vdd_core_table[conn_layer], hide=True)
+        self.add_pin('VSS_conn', vss_table[conn_layer], hide=True)
+        self.reexport(drv_inst.get_port('VDD_vm'), net_name='VDDIO_vm')
+        self.reexport(drv_inst.get_port('VSS_vm'))
+        self.reexport(drv_inst.get_port('VDD_conn'), net_name='VDDIO_conn')
+        self.reexport(drv_inst.get_port('VSS_conn'))
+
+        # route input pins to the edge
+        in0_tidx = tr_manager.get_next_track(xm_layer, vdd_core_list[0].track_id.base_index,
+                                             'sup', 'sig', up=True)
+        in_tidx_list = tr_manager.place_wires(xm_layer, ['sig'] * len(in_pins),
+                                              align_track=in0_tidx)[1]
+        tr_xm_w = tr_manager.get_width(xm_layer, 'sig')
+        vm_w = tr_manager.get_width(vm_layer, 'sig')
+        for buf_idx, (tidx, name) in enumerate(zip(in_tidx_list, in_pins)):
+            hm_warr = pin_dict[name][0]
+            vm_tidx_ref = pin_dict[name + '_buf'][1].track_id.base_index
+            vm_tidx = tr_manager.get_next_track(vm_layer, vm_tidx_ref, 'sig', 'sig',
+                                                up=((buf_idx & 1) == 0))
+            vm_warr = self.connect_to_tracks(hm_warr, TrackID(vm_layer, vm_tidx, width=vm_w),
+                                             min_len_mode=MinLenMode.LOWER)
+            self.add_pin(name,
+                         self.connect_to_tracks(vm_warr, TrackID(xm_layer, tidx, width=tr_xm_w),
+                                                track_lower=0),
+                         mode=PinMode.LOWER)
+
+        # connect POR input
+        # connect POR/POR_b
+        por_tid = self.get_track_id(ridx_p, MOSWireType.DS, 'sig', wire_idx=2, tile_idx=2)
+        porb_tid = self.get_track_id(ridx_p, MOSWireType.DS, 'sig', wire_idx=2, tile_idx=1)
+        por = self.connect_to_tracks(pin_dict['por'], por_tid)
+        porb = self.connect_to_tracks(pin_dict['porb'], porb_tid)
+        self.add_pin('por_vccl', por)
+        self.add_pin('porb_vccl', porb)
+
+        # connect driver inputs
+        # compute track indices
+        # track order: weak_pden, n_enb_drv<0>, pad, p_en_drv<0>, weak_puenb, din
+        # n_enb_drv<1>, tristateb, pad, tristate, p_en_drv<1>
+        vdd_io_tidx = vdd_io_list[0].track_id.base_index
+        pad_tr_w = tr_manager.get_width(xm_layer, 'padout')
+        xm_hs_w = tr_manager.get_width(xm_layer, 'sig_hs')
+        pad_0_tidx = grid.get_middle_track(vss_list[0].track_id[0].base_index, vdd_io_tidx,
+                                           round_up=False)
+        pad_1_tidx = grid.get_middle_track(vss_list[0].track_id[1].base_index, vdd_io_tidx,
+                                           round_up=True)
+        pad_2_tidx = grid.get_middle_track(vss_list[0].track_id[1].base_index,
+                                           vdd_io_list[1].track_id.base_index,
+                                           round_up=False)
+        bb_tidx_list = tr_manager.place_wires(xm_layer, ['sig', 'sig', 'padout'],
+                                              align_track=pad_0_tidx, align_idx=-1)[1]
+        bt_tidx_list = tr_manager.place_wires(xm_layer, ['padout', 'sig', 'sig', 'sig_hs'],
+                                              align_track=pad_0_tidx)[1]
+        tb_tidx_list = tr_manager.place_wires(xm_layer, ['sig', 'sig', 'padout'],
+                                              align_track=pad_1_tidx, align_idx=-1)[1]
+        tt_tidx_list = tr_manager.place_wires(xm_layer, ['padout', 'sig', 'sig'],
+                                              align_track=pad_1_tidx)[1]
+        # connect wires
+        self._connect_lv_drv(pin_dict, drv_inst, 'weak_pulldownen_out', 'weak_pden',
+                             TrackID(xm_layer, bb_tidx_list[0], width=tr_xm_w))
+        self._connect_lv_drv(pin_dict, drv_inst, 'indrv_buf<0>_out', 'n_enb_drv<0>',
+                             TrackID(xm_layer, bb_tidx_list[1], width=tr_xm_w))
+        self._connect_lv_drv(pin_dict, drv_inst, 'ipdrv_buf<0>_out', 'p_en_drv<0>',
+                             TrackID(xm_layer, bt_tidx_list[1], width=tr_xm_w))
+        self._connect_lv_drv(pin_dict, drv_inst, 'weak_pullupenb_out', 'weak_puenb',
+                             TrackID(xm_layer, bt_tidx_list[2], width=tr_xm_w))
+        self._connect_lv_drv(pin_dict, drv_inst, 'din_out', 'din',
+                             TrackID(xm_layer, bt_tidx_list[3], width=xm_hs_w))
+        self._connect_lv_drv(pin_dict, drv_inst, 'indrv_buf<1>_out', 'n_enb_drv<1>',
+                             TrackID(xm_layer, tb_tidx_list[0], width=tr_xm_w))
+        self._connect_lv_drv(pin_dict, drv_inst, 'itx_en_buf_out', 'tristateb',
+                             TrackID(xm_layer, tb_tidx_list[1], width=tr_xm_w))
+        self._connect_lv_drv(pin_dict, drv_inst, 'itx_en_buf_outb', 'tristate',
+                             TrackID(xm_layer, tt_tidx_list[1], width=tr_xm_w))
+        self._connect_lv_drv(pin_dict, drv_inst, 'ipdrv_buf<1>_out', 'p_en_drv<1>',
+                             TrackID(xm_layer, tt_tidx_list[2], width=tr_xm_w))
+
+        # connect driver outputs
+        pad_pitch = pad_2_tidx - pad_0_tidx
+        pad_tid0 = TrackID(xm_layer, pad_0_tidx, width=pad_tr_w, num=2, pitch=pad_pitch)
+        pad_tid1 = TrackID(xm_layer, pad_1_tidx, width=pad_tr_w, num=2, pitch=pad_pitch)
+        pad_pin = drv_inst.get_pin('txpadout')
+        self.add_pin('txpadout', [self.connect_to_tracks(pad_pin, pad_tid0),
+                                  self.connect_to_tracks(pad_pin, pad_tid1)])
+        self.add_pin('txpadout_vm', pad_pin, hide=True)
+
+        # setup schematic parameters
+        rm_keys = ['dual_output', 'invert_out']
+        data_lv_sch_params = lv_din_master.sch_params.copy(remove=rm_keys)
+        ctrl_lv_sch_params = lv_ctrl_master.sch_params.copy(remove=rm_keys)
+        self.sch_params = dict(
+            drv_params=drv_master.sch_params,
+            data_lv_params=dict(
+                lev_params=data_lv_sch_params,
+                buf_params=buf_data_lv_master.sch_params.copy(remove=['dual_output']),
+            ),
+            ctrl_lv_params=dict(
+                lev_params=ctrl_lv_sch_params,
+                buf_params=buf_ctrl_lv_master.sch_params.copy(remove=['dual_output']),
+            ),
+        )
+
+    def _draw_bot_supply_column(self, col: int, col_list: Sequence[Tuple[int, bool]],
+                                sup_info: SupplyColumnInfo,
+                                vdd_core_table: Dict[int, List[WireArray]],
+                                vss_table: Dict[int, List[WireArray]],
+                                ridx_p: int, ridx_n: int) -> int:
+        tap_info_list = []
+        ncol = sup_info.ncol
+        max_col = col
+        for idx, (cur_col, flip_lr) in enumerate(col_list):
+            col_offset = col + cur_col
+            anchor = col_offset + int(flip_lr) * ncol
+            tap_info_list.append((col_offset, flip_lr))
+            self.add_supply_column(sup_info, anchor, vdd_core_table, vss_table,
+                                   ridx_p=ridx_p, ridx_n=ridx_n, extend_vdd=False, flip_lr=flip_lr,
+                                   extend_vss=False, min_len_mode=MinLenMode.MIDDLE)
+            max_col = max(max_col, col_offset + ncol)
+        self._tap_info = ImmutableList(tap_info_list)
+        return max_col
+
+    def _connect_lv_drv(self, pin_dict: Dict[str, List[WireArray]], drv_inst: PyLayInstance,
+                        name: str, drv_pin: str, tid: TrackID) -> None:
+        warr_list = pin_dict[name]
+        warr_list.extend(drv_inst.port_pins_iter(drv_pin))
+        self.connect_to_tracks(warr_list, tid)
+
+    def _get_buf_lv_master(self, buf_params: Param, append: Mapping[str, Any]) -> InvChainCore:
+        buf_params = buf_params.copy(append=dict(
+            dual_output=True,
+            vertical_output=True,
+            **append
+        ), remove=['sig_locs'])
+        buf_master = self.new_template(InvChainCore, params=buf_params)
+
+        vm_layer = self.conn_layer + 2
+        out_tidx = buf_master.get_port('out').get_pins()[0].track_id.base_index
+        prev_tidx = self.tr_manager.get_next_track(vm_layer, out_tidx, 'sig', 'sig', up=False)
+        buf_master = buf_master.new_template_with(sig_locs=dict(outb=prev_tidx))
+        return buf_master
diff --git a/src/aib_ams/layout/util.py b/src/aib_ams/layout/util.py
new file mode 100644
index 0000000..c32fbe1
--- /dev/null
+++ b/src/aib_ams/layout/util.py
@@ -0,0 +1,297 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, List, Tuple, Union, Optional, cast
+
+from pybag.enum import MinLenMode, RoundMode
+
+from bag.util.math import HalfInt
+from bag.layout.template import PyLayInstance
+from bag.layout.routing.base import WireArray, TrackID
+
+from xbase.layout.mos.base import MOSBase, SupplyColumnInfo
+
+from bag3_digital.layout.stdcells.levelshifter import LevelShifterCoreOutBuffer
+
+
+def draw_io_supply_column(template: MOSBase, col: int, sup_info: SupplyColumnInfo,
+                          vdd_io_table: Dict[int, List[WireArray]],
+                          vdd_core_table: Dict[int, List[WireArray]],
+                          vss_table: Dict[int, List[WireArray]],
+                          ridx_p: int, ridx_n: int, flip_lr: bool) -> int:
+    ncol = sup_info.ncol
+    sup_col = col + int(flip_lr) * ncol
+    # draw vdd core columns
+    template.add_supply_column(sup_info, sup_col, vdd_core_table, vss_table, ridx_p=ridx_p,
+                               ridx_n=ridx_n, flip_lr=flip_lr, extend_vdd=False,
+                               extend_vss=False, min_len_mode=MinLenMode.MIDDLE)
+    # draw vdd_io columns
+    for tile in range(1, 3):
+        template.add_supply_column(sup_info, sup_col, vdd_io_table, vss_table, ridx_p=ridx_p,
+                                   ridx_n=ridx_n, tile_idx=tile, flip_lr=flip_lr,
+                                   extend_vdd=False)
+    return col + ncol + (template.sub_sep_col // 2)
+
+
+def get_io_shifters_ncol(sub_sep_col: int, bot_lv_master: MOSBase,
+                         top_lv_master: MOSBase) -> int:
+    top_ncol = top_lv_master.num_cols
+    bot_ncol = bot_lv_master.num_cols
+    top_center = cast(LevelShifterCoreOutBuffer, top_lv_master).center_col
+    bot_center = cast(LevelShifterCoreOutBuffer, bot_lv_master).center_col
+
+    delta = max(top_center, bot_center)
+    col_mid = delta
+    col_end = col_mid + max(top_ncol - top_center, bot_ncol - bot_center)
+    return col_end + (sub_sep_col // 2)
+
+
+def draw_io_shifters(template: MOSBase, col: int, buf_bot_master: MOSBase, buf_top_master: MOSBase,
+                     bot_lv_master: LevelShifterCoreOutBuffer,
+                     top_lv_master: LevelShifterCoreOutBuffer, bot_vss: TrackID,
+                     top_vss: TrackID, bot_name: str, top_name: str, bot_rst_out: bool,
+                     top_rst_out: bool, is_tx_din: bool, pin_dict: Dict[str, List[WireArray]],
+                     flip_lr: bool = False) -> int:
+    # NOTE: the level shifters are arranged so that the rst/rstb signals of the top/bottom
+    # level shifters can be shorted together.
+    top_ncol = top_lv_master.num_cols
+    bot_ncol = bot_lv_master.num_cols
+    top_buf_ncol = buf_top_master.num_cols
+    bot_buf_ncol = buf_bot_master.num_cols
+    top_center = cast(LevelShifterCoreOutBuffer, top_lv_master).center_col
+    bot_center = cast(LevelShifterCoreOutBuffer, bot_lv_master).center_col
+
+    delta = max(top_center, bot_center)
+    col_mid = col + delta
+    col_end = col_mid + max(top_ncol - top_center, bot_ncol - bot_center)
+    if flip_lr:
+        col_mid = col_end - delta
+        sign = -1
+        midr_name = 'midl'
+        midl_name = 'midr'
+        bufl_ncol = bot_buf_ncol
+        bufr_ncol = top_buf_ncol
+    else:
+        sign = 1
+        midr_name = 'midr'
+        midl_name = 'midl'
+        bufl_ncol = top_buf_ncol
+        bufr_ncol = bot_buf_ncol
+
+    bot_lv = template.add_tile(bot_lv_master, 1, col_mid - sign * bot_center, flip_lr=flip_lr)
+    top_lv = template.add_tile(top_lv_master, 2, col_mid - sign * top_center, flip_lr=flip_lr)
+
+    # get buffer location
+    min_sep2 = template.min_sep_col // 2
+    bufl_col = col_mid - min_sep2 - (bufl_ncol + (bufl_ncol & 1))
+    bufr_col = col_mid + min_sep2 + (bufr_ncol + (bufr_ncol & 1))
+
+    if bot_lv_master.mid_vertical or top_lv_master.mid_vertical:
+        arr_info = template.arr_info
+        tr_manager = template.tr_manager
+        vm_layer = template.conn_layer + 2
+        if bot_lv_master.mid_vertical:
+            midl_tidx = bot_lv.get_pin(midl_name).track_id.base_index
+            midr_tidx = bot_lv.get_pin(midr_name).track_id.base_index
+            if top_lv_master.mid_vertical:
+                midl_tidx = min(top_lv.get_pin(midl_name).track_id.base_index, midl_tidx)
+                midr_tidx = max(top_lv.get_pin(midr_name).track_id.base_index, midr_tidx)
+        else:
+            midl_tidx = top_lv.get_pin(midl_name).track_id.base_index
+            midr_tidx = top_lv.get_pin(midr_name).track_id.base_index
+
+        bufl_tidx = tr_manager.get_next_track(vm_layer, midl_tidx, 'sig', 'sig', up=False)
+        bufr_tidx = tr_manager.get_next_track(vm_layer, midr_tidx, 'sig', 'sig', up=True)
+        coll_idx = arr_info.track_to_col(vm_layer, bufl_tidx, mode=RoundMode.LESS_EQ)
+        colr_idx = arr_info.track_to_col(vm_layer, bufr_tidx, mode=RoundMode.GREATER_EQ)
+        bufl_col = min(bufl_col, coll_idx - (bufl_ncol + (bufl_ncol & 1)))
+        bufr_col = max(bufr_col, colr_idx + (bufr_ncol + (bufr_ncol & 1)))
+    if flip_lr:
+        top_buf_col = bufr_col
+        bot_buf_col = bufl_col
+    else:
+        top_buf_col = bufl_col
+        bot_buf_col = bufr_col
+
+    top_buf = template.add_tile(buf_top_master, 0, top_buf_col, flip_lr=flip_lr)
+    bot_buf = template.add_tile(buf_bot_master, 0, bot_buf_col, flip_lr=not flip_lr)
+
+    vdd_list = pin_dict['VDD']
+    vss_list = pin_dict['VSS']
+    vdd_io_list = pin_dict['VDDIO']
+    vdd_list.extend(top_buf.port_pins_iter('VDD'))
+    vdd_list.extend(bot_buf.port_pins_iter('VDD'))
+    vdd_io_list.extend(top_lv.port_pins_iter('VDD'))
+    vdd_io_list.extend(bot_lv.port_pins_iter('VDD'))
+    vss_list.extend(top_buf.port_pins_iter('VSS'))
+    vss_list.extend(bot_buf.port_pins_iter('VSS'))
+    vss_list.extend(top_lv.port_pins_iter('VSS'))
+    vss_list.extend(bot_lv.port_pins_iter('VSS'))
+
+    # NOTE: here we assume that the last stage of the inverter chain is large
+    # enough, so inverter output wires shouldn't run into level shifter middle wires.
+    out_top = top_buf.get_pin('out')
+    outb_top = top_buf.get_pin('outb')
+    out_bot = bot_buf.get_pin('out')
+    outb_bot = bot_buf.get_pin('outb')
+    template.connect_differential_wires(out_top, outb_top, top_lv.get_pin('in'),
+                                        top_lv.get_pin('inb'))
+    template.connect_differential_wires(out_bot, outb_bot, bot_lv.get_pin('in'),
+                                        bot_lv.get_pin('inb'))
+
+    pin_dict[top_name] = [top_buf.get_pin('in')]
+    pin_dict[bot_name] = [bot_buf.get_pin('in')]
+    pin_dict[top_name + '_buf'] = [out_top, outb_top]
+    pin_dict[bot_name + '_buf'] = [out_bot, outb_bot]
+    # connect resets to vm layer
+    # NOTE: here we assume that the inverter chain last stage is small enough, and the
+    # nmos of the level shifters are are enough, so the track immediately adjacent to the
+    # outputs of the invert chain can be used to connect rstb signals together without
+    # running into rst signal's hm layer wires.
+    if flip_lr:
+        rstb_l_tidx = _get_rstb_vm_tidx(template, out_bot, outb_bot, True)
+        rstb_r_tidx = _get_rstb_vm_tidx(template, out_top, outb_top, False)
+    else:
+        rstb_l_tidx = _get_rstb_vm_tidx(template, out_top, outb_top, True)
+        rstb_r_tidx = _get_rstb_vm_tidx(template, out_bot, outb_bot, False)
+
+    xl_b, xh_b = _get_por_vm_coords(bot_lv)
+    xl_t, xh_t = _get_por_vm_coords(top_lv)
+    bot_rst_l_tidx = _get_rst_vm_tidx(template, xl_b, rstb_l_tidx, True)
+    bot_rst_r_tidx = _get_rst_vm_tidx(template, xh_b, rstb_r_tidx, False)
+    top_rst_l_tidx = _get_rst_vm_tidx(template, xl_t, rstb_l_tidx, True)
+    top_rst_r_tidx = _get_rst_vm_tidx(template, xh_t, rstb_r_tidx, False)
+    if is_tx_din:
+        # NOTE: here, we use the fact that we only have inverter buffer on the right, and the
+        # rst signals on the right are connected to VSS (meaning they don't need to cross into
+        # the other tile).
+        # This means that the rst signals on the left can be shorted with the left-most
+        # vertical track and we won't run into potential vertical wires from
+        # inverter buffers (because they're guaranteed to not be there), and the rst signals on
+        # the right can use their own vertical tracks to short to VSS.
+        rst_idx_list = [min(bot_rst_l_tidx, top_rst_l_tidx), rstb_l_tidx,
+                        rstb_r_tidx, bot_rst_r_tidx]
+        _record_lv_pins(template, bot_lv, bot_vss, pin_dict, bot_name, bot_rst_out, rst_idx_list)
+        rst_idx_list[3] = top_rst_r_tidx
+        _record_lv_pins(template, top_lv, top_vss, pin_dict, top_name, top_rst_out, rst_idx_list)
+    else:
+        # NOTE: we know the core of top and bottom level shifters are identical, so we use the
+        # same vertical tracks
+        rst_idx_list = [bot_rst_l_tidx, rstb_l_tidx, rstb_r_tidx, bot_rst_r_tidx]
+
+        _record_lv_pins(template, bot_lv, bot_vss, pin_dict, bot_name, bot_rst_out, rst_idx_list)
+        _record_lv_pins(template, top_lv, top_vss, pin_dict, top_name, top_rst_out, rst_idx_list)
+
+    return col_end + (template.sub_sep_col // 2)
+
+
+def _get_rstb_vm_tidx(template: MOSBase, out: WireArray, outb: WireArray, left: bool) -> HalfInt:
+    tr_manager = template.tr_manager
+    vm_layer = template.conn_layer + 2
+
+    if left:
+        sel_fun = min
+        up = False
+    else:
+        sel_fun = max
+        up = True
+
+    out_tidx = sel_fun(out.track_id.base_index, outb.track_id.base_index)
+    rstb_tidx = tr_manager.get_next_track(vm_layer, out_tidx, 'sig', 'sig', up=up)
+    return rstb_tidx
+
+
+def _get_rst_vm_tidx(template: MOSBase, coord: Optional[int], rstb_tidx: HalfInt, left: bool
+                     ) -> Optional[HalfInt]:
+    if coord is None:
+        return None
+    grid = template.grid
+    tr_manager = template.tr_manager
+    vm_layer = template.conn_layer + 2
+    vm_w = tr_manager.get_width(vm_layer, 'sig')
+
+    if left:
+        rst_mode = RoundMode.LESS_EQ
+        sel_fun = min
+        up = False
+    else:
+        rst_mode = RoundMode.GREATER_EQ
+        sel_fun = max
+        up = True
+
+    rst_tidx = grid.find_next_track(vm_layer, coord, tr_width=vm_w, mode=rst_mode)
+    rst_tidx = sel_fun(rst_tidx,
+                       tr_manager.get_next_track(vm_layer, rstb_tidx, 'sig', 'sig', up=up))
+
+    return rst_tidx
+
+
+def _record_lv_pins(template: MOSBase, inst: PyLayInstance, vss_tid: TrackID,
+                    pin_dict: Dict[str, List[WireArray]], pin_name: str, por_to_out: bool,
+                    rst_idx_list: List[HalfInt]) -> None:
+    if inst.has_port('rst_out'):
+        rst_out = inst.get_pin('rst_out')
+        rst_casc = inst.get_pin('rst_casc')
+        rst_outb = inst.get_pin('rst_outb')
+        if rst_out.middle < rst_outb.middle:
+            rstc_idx = 1 if por_to_out else 2
+            tmp = _connect_lv_por_vm(template, rst_out, rst_outb, rst_casc, rst_idx_list, rstc_idx)
+            rst_out, rst_outb, rst_casc = tmp
+        else:
+            rstc_idx = 2 if por_to_out else 1
+            tmp = _connect_lv_por_vm(template, rst_outb, rst_out, rst_casc, rst_idx_list, rstc_idx)
+            rst_outb, rst_out, rst_casc = tmp
+
+        if por_to_out:
+            template.connect_to_tracks(rst_outb, vss_tid)
+            pin_dict['por'].append(rst_out)
+            pin_dict['porb'].append(rst_casc)
+        else:
+            template.connect_to_tracks(rst_out, vss_tid)
+            pin_dict['por'].append(rst_outb)
+            pin_dict['porb'].append(rst_casc)
+
+    master = cast(LevelShifterCoreOutBuffer, inst.master)
+    key = pin_name + '_out'
+    if master.dual_output:
+        pin_dict[key] = [inst.get_pin('out')]
+        pin_dict[key + 'b'] = [inst.get_pin('outb')]
+    elif master.outr_inverted:
+        pin_dict[key] = [inst.get_pin('outb')]
+    else:
+        pin_dict[key] = [inst.get_pin('out')]
+
+
+def _connect_lv_por_vm(template: MOSBase, rstl: WireArray, rstr: WireArray, rstc: WireArray,
+                       rst_idx_list: List[HalfInt], rstc_idx: int
+                       ) -> Tuple[WireArray, WireArray, WireArray]:
+    vm_layer = template.conn_layer + 2
+    vm_w = template.tr_manager.get_width(vm_layer, 'sig')
+
+    rstl = template.connect_to_tracks(rstl, TrackID(vm_layer, rst_idx_list[0], width=vm_w))
+    rstc = template.connect_to_tracks(rstc, TrackID(vm_layer, rst_idx_list[rstc_idx], width=vm_w))
+    rstr = template.connect_to_tracks(rstr, TrackID(vm_layer, rst_idx_list[3], width=vm_w))
+    return rstl, rstr, rstc
+
+
+def _get_por_vm_coords(inst: PyLayInstance) -> Union[Tuple[None, None], Tuple[int, int]]:
+    if not inst.has_port('rst_out'):
+        return None, None
+    rst_out = inst.get_pin('rst_out')
+    rst_outb = inst.get_pin('rst_outb')
+    if rst_out.middle < rst_outb.middle:
+        return rst_out.upper, rst_outb.lower
+    else:
+        return rst_outb.upper, rst_out.lower
diff --git a/src/aib_ams/measurement/__init__.py b/src/aib_ams/measurement/__init__.py
new file mode 100644
index 0000000..5573caf
--- /dev/null
+++ b/src/aib_ams/measurement/__init__.py
@@ -0,0 +1,14 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
diff --git a/src/aib_ams/measurement/dcc_helper/__init__.py b/src/aib_ams/measurement/dcc_helper/__init__.py
new file mode 100644
index 0000000..5573caf
--- /dev/null
+++ b/src/aib_ams/measurement/dcc_helper/__init__.py
@@ -0,0 +1,14 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
diff --git a/src/aib_ams/measurement/dcc_helper/liberty.py b/src/aib_ams/measurement/dcc_helper/liberty.py
new file mode 100644
index 0000000..e1355dd
--- /dev/null
+++ b/src/aib_ams/measurement/dcc_helper/liberty.py
@@ -0,0 +1,146 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Union, Tuple, Optional, Mapping, Dict, cast
+
+import pprint
+
+import numpy as np
+
+from bag.simulation.core import TestbenchManager
+from bag.simulation.cache import SimulationDB, DesignInstance, SimResults, MeasureResult
+from bag.simulation.measure import MeasurementManager, MeasInfo
+
+from bag3_liberty.enum import TimingType
+
+from bag3_testbenches.measurement.data.tran import EdgeType
+from bag3_testbenches.measurement.tran.digital import DigitalTranTB
+from bag3_testbenches.measurement.digital.util import setup_digital_tran
+
+
+class ClockDelayMM(MeasurementManager):
+    """Measures measure/launch delay.
+
+    Notes
+    -----
+    specification dictionary has the following entries:
+
+    tbm_specs : Mapping[str, Any]
+        DigitalTranTB related specifications.  The following simulation parameters are required:
+
+            t_rst :
+                reset duration.
+            t_rst_rf :
+                reset rise/fall time.
+            t_bit :
+                bit value duration.
+            c_load :
+                load capacitance.
+    fake : bool
+        Defaults to False.  True to return fake data.
+    """
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        super().__init__(*args, **kwargs)
+        self._tbm_info: Optional[Tuple[DigitalTranTB, Mapping[str, Any]]] = None
+
+    def initialize(self, sim_db: SimulationDB, dut: DesignInstance) -> Tuple[bool, MeasInfo]:
+        specs = self.specs
+        fake: bool = specs.get('fake', False)
+
+        load_list = [dict(pin='ckout', type='cap', value='c_load')]
+        pulse_list = [dict(pin='launch', tper='2*t_bit', tpw='t_bit', trf='t_rf',
+                           td='t_bit', pos=True),
+                      dict(pin='measure', tper='2*t_bit', tpw='t_bit', trf='t_rf',
+                           td='2*t_bit', pos=True)]
+        pin_values = dict(dcc_byp=0, clk_dcd=0)
+        save_outputs = ['launch', 'measure', 'ckout']
+        tbm_specs, tb_params = setup_digital_tran(specs, dut, pulse_list=pulse_list,
+                                                  load_list=load_list, pin_values=pin_values,
+                                                  save_outputs=save_outputs)
+        tbm = cast(DigitalTranTB, sim_db.make_tbm(DigitalTranTB, tbm_specs))
+
+        if fake:
+            td = np.full(tbm.sweep_shape[1:], 50.0e-12)
+            trf = np.full(td.shape, 20.0e-12)
+            result = _get_result_table(td, td, trf, trf)
+            return True, MeasInfo('done', result)
+
+        tbm.sim_params['t_sim'] = 't_rst+t_rst_rf+11*t_bit'
+        self._tbm_info = tbm, tb_params
+        return False, MeasInfo('sim', {})
+
+    def get_sim_info(self, sim_db: SimulationDB, dut: DesignInstance, cur_info: MeasInfo
+                     ) -> Tuple[Union[Tuple[TestbenchManager, Mapping[str, Any]],
+                                      MeasurementManager], bool]:
+        return self._tbm_info, True
+
+    def process_output(self, cur_info: MeasInfo, sim_results: Union[SimResults, MeasureResult]
+                       ) -> Tuple[bool, MeasInfo]:
+        tbm: DigitalTranTB = self._tbm_info[0]
+
+        sim_params = tbm.sim_params
+        t_bit = sim_params['t_bit']
+
+        data = cast(SimResults, sim_results).data
+        t_rf = tbm.get_param_value('t_rf', data) / (tbm.thres_hi - tbm.thres_lo)
+
+        t_launch = tbm.get_t_rst_end(data) + 9 * t_bit
+        t0_launch = t_launch - t_rf / 2
+        t_meas = t_launch + t_bit
+        t0_meas = t0_launch + t_bit
+
+        td_launch = tbm.calc_cross(data, 'ckout', EdgeType.RISE, t_start=t0_launch) - t_launch
+        td_meas = tbm.calc_cross(data, 'ckout', EdgeType.FALL, t_start=t0_meas) - t_meas
+        tr_launch = tbm.calc_trf(data, 'ckout', True, t_start=t0_launch)
+        tf_meas = tbm.calc_trf(data, 'ckout', False, t_start=t0_meas)
+
+        if td_launch.shape[0] == 1:
+            td_launch = td_launch[0, ...]
+            td_meas = td_meas[0, ...]
+            tr_launch = tr_launch[0, ...]
+            tf_meas = tf_meas[0, ...]
+        result = _get_result_table(td_launch, td_meas, tr_launch, tf_meas)
+        self.log(f'result:\n{pprint.pformat(result, width=100)}')
+
+        return True, MeasInfo('done', result)
+
+
+def _get_result_table(td_launch: np.ndarray, td_meas: np.ndarray,
+                      tr_launch: np.ndarray, tf_meas: np.ndarray) -> Dict[str, Any]:
+    return dict(
+        ckout=[
+            dict(
+                related='launch',
+                timing_type=TimingType.combinational_rise.name,
+                sense='positive_unate',
+                cond='rstb & !dcc_byp',
+                data=dict(
+                    cell_rise=td_launch,
+                    rise_transition=tr_launch,
+                )
+            ),
+            dict(
+                related='measure',
+                timing_type=TimingType.combinational_fall.name,
+                sense='negative_unate',
+                cond='rstb & !dcc_byp',
+                data=dict(
+                    cell_fall=td_meas,
+                    fall_transition=tf_meas,
+                )
+            ),
+        ],
+    )
diff --git a/src/aib_ams/measurement/driver_pu_pd.py b/src/aib_ams/measurement/driver_pu_pd.py
new file mode 100644
index 0000000..801180d
--- /dev/null
+++ b/src/aib_ams/measurement/driver_pu_pd.py
@@ -0,0 +1,144 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Union, Tuple, Optional, Mapping, Dict, cast
+
+import numpy as np
+
+from bag.simulation.core import TestbenchManager
+from bag.simulation.cache import SimulationDB, DesignInstance, SimResults, MeasureResult
+from bag.simulation.measure import MeasurementManager, MeasInfo
+from bag.util.math import Calculator
+
+from bag3_testbenches.measurement.dc.base import DCTB
+
+
+class DriverPullUpDownMM(MeasurementManager):
+    default_gate_bias = dict(pu='full', pd='full')
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        self._tbm_info: Optional[Tuple[DCTB, Mapping[str, Any]]] = None
+        self._mos_mapping = {}
+
+        super().__init__(*args, **kwargs)
+
+    def initialize(self, sim_db: SimulationDB, dut: DesignInstance) -> Tuple[bool, MeasInfo]:
+        specs = self.specs
+        vdd = specs['vdd']
+        v_offset_map = specs['v_offset_map']
+
+        gate_bias = self.default_gate_bias.copy()
+        if 'gate_bias' in specs:
+            gate_bias.update(specs['gate_bias'])
+
+        specs['stack_pu'] = dut.sch_master.params['stack_p']
+        specs['stack_pd'] = dut.sch_master.params['stack_n']
+        self._dut = dut
+
+        mos_mapping = specs['mos_mapping']['lay' if specs['extract'] else 'sch']
+
+        # Find all transistors that match the passed in transistor names
+        # The passed in transistor name can match multiple "transistors" in the netlist
+        # in cases like seg > 1 or stack > 1
+        # TODO: allow for more complex name matching (e.g., via regex)
+        for mos, term in mos_mapping.items():
+            voff_list = [v for k, v in v_offset_map.items() if term in k and k.endswith('_d')]
+            if len(voff_list) == 0:
+                raise ValueError(f"No matching transistor found for {term}")
+            self._mos_mapping[mos] = voff_list
+
+        for k, v in gate_bias.items():
+            if v == 'full':
+                gate_bias[k] = vdd if k == 'pd' else 0
+            else:
+                gate_bias = self._eval_expr(v)
+
+        sup_values = dict(VDD=vdd, pden=gate_bias['pd'], puenb=gate_bias['pu'], out=vdd / 2)
+
+        tbm_specs = dict(**specs['tbm_specs'])
+        tbm_specs['sweep_var'] = 'v_out'
+        tbm_specs['sweep_options'] = dict(type='LINEAR')
+        for k in ['pwr_domain', 'sim_params', 'pin_values']:
+            if k not in tbm_specs:
+                tbm_specs[k] = {}
+        tbm_specs['dut_pins'] = list(dut.sch_master.pins.keys())
+        tbm_specs['load_list'] = []
+        tbm_specs['sup_values'] = sup_values
+
+        # Set all internal DC sources to 0 (since these are just used for current measurements)
+        tbm_specs['sim_params'].update({k: 0 for k in v_offset_map.values()})
+
+        tbm = cast(DCTB, sim_db.make_tbm(DCTB, tbm_specs))
+        self._tbm_info = tbm, {}
+
+        return False, MeasInfo('pd', {})
+
+    def _eval_expr(self, expr) -> float:
+        if isinstance(expr, str):
+            return Calculator.evaluate(expr, dict(vdd=self.specs['vdd']))
+        else:
+            return expr
+
+    def get_sim_info(self, sim_db: SimulationDB, dut: DesignInstance, cur_info: MeasInfo
+                     ) -> Tuple[Union[Tuple[TestbenchManager, Mapping[str, Any]],
+                                      MeasurementManager], bool]:
+        tbm = self._tbm_info[0]
+        drain_bias = self.specs['drain_bias'][cur_info.state]
+        drain_bias = list(map(self._eval_expr, drain_bias))
+
+        swp_options = dict(num=len(drain_bias))
+        if len(drain_bias) == 1:
+            swp_options['start'] = swp_options['stop'] = drain_bias[0]
+        elif len(drain_bias) == 2:
+            swp_options['start'], swp_options['stop'] = drain_bias
+        else:
+            raise ValueError("Either 1 or 2 values must be given for drain_bias")
+        tbm.specs['sweep_options'].update(**swp_options)
+        return self._tbm_info, True
+
+    def process_output(self, cur_info: MeasInfo, sim_results: Union[SimResults, MeasureResult]
+                       ) -> Tuple[bool, MeasInfo]:
+        specs = self.specs
+        state = cur_info.state
+        data = cast(SimResults, sim_results).data
+        mos_mapping = self._mos_mapping[state]
+        stack = specs[f'stack_{state}']
+
+        # Compute the total current by the following:
+        # Find the drain current of all the unit transistors (the number of these transistors is seg * stack)
+        # Add all these currents together, then divide by the number of stacks (to approximate
+        # the sum of currents for each "finger"/parallel path of stacked transistors).
+        # This calculation assumes that the junction leakage is negligible compared to the measured current.
+        total_current = np.zeros(data.data_shape)
+        for sig in data.signals:
+            if any(filter(lambda x: x in sig, mos_mapping)):
+                total_current += data._cur_ana[sig]
+        total_current /= stack
+
+        # Calculate resistance
+        swp_options = self._tbm_info[0].specs['sweep_options']
+        if swp_options['num'] == 1:
+            res = swp_options['start'] / total_current[:, 0]
+        else:
+            res = (swp_options['stop'] - swp_options['start']) / (total_current[:, 1] - total_current[:, 0])
+        res = np.abs(res)
+
+        result = cur_info.prev_results.copy()
+        if state == 'pd':
+            result['sim_envs'] = data.sim_envs
+        result[f'res_{state}'] = res
+
+        next_state = 'done' if state == 'pu' else 'pu'
+        return next_state == 'done', MeasInfo(next_state, result)
diff --git a/src/aib_ams/measurement/phase_det.py b/src/aib_ams/measurement/phase_det.py
new file mode 100644
index 0000000..311bb5e
--- /dev/null
+++ b/src/aib_ams/measurement/phase_det.py
@@ -0,0 +1,142 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Any, Dict, Tuple, Optional, List, Mapping, Union, Sequence, cast, Set
+
+import numpy as np
+
+from bag.simulation.core import TestbenchManager
+from bag.simulation.cache import SimulationDB, DesignInstance, SimResults, MeasureResult
+from bag.simulation.measure import MeasurementManager, MeasInfo
+
+from bag3_digital.measurement.util import get_digital_wrapper_params
+from bag3_testbenches.measurement.data.tran import EdgeType
+from bag3_testbenches.measurement.digital.util import setup_digital_tran
+from bag3_testbenches.measurement.search import IntervalSearchMM, AcceptMode
+from bag3_testbenches.measurement.tran.digital import DigitalTranTB
+
+
+class PhaseDetMeasManagerUnit(IntervalSearchMM):
+    """
+    This measurement manager performs an interval search on the CLKA or CLKB to figure out what is the minimum
+    difference between the two edges that can be discerned
+    """
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        super().__init__(*args, **kwargs)
+        self.adj_dict: Mapping[str, Any] = {}
+
+    def process_init(self, cur_info: MeasInfo, sim_results: SimResults) -> Tuple[Dict[str, Any], bool]:
+        return {}, False
+
+    def init_search(self, sim_db: SimulationDB, dut: DesignInstance
+                    ) -> Tuple[TestbenchManager, Mapping[str, Any], Mapping[str, Mapping[str, Any]],
+                               Mapping[str, Any], bool, bool]:
+        specs = self.specs
+        assert specs['sigma_avt'] >= 0
+        intv_params: Mapping[str, Any] = specs['intv_params']
+        out_pins: Sequence[str] = specs.get('out_pins', ['t_up', 't_down'])  # specified as ['up', 'down']
+        early_clk: str = specs['early_clk']
+        late_clk: str = specs['late_clk']
+        reset_list: Sequence[Tuple[str, bool]] = specs.get('rst_pins', [('RSTb', False)])
+        invert_clk: bool = specs['invert_clk']
+        clk_pol = not invert_clk
+
+        clk_pins = [early_clk, late_clk]
+        load_list = [dict(pin=out_pin, value='cload', type='cap') for out_pin in out_pins]
+        early_clk_pulse = dict(pin=early_clk, tper='5/4*t_bit+t_delay', tpw='3/4*t_bit', trf='t_rf', td='t_bit+t_bit/4',
+                               pos=clk_pol)
+        late_clk_pulse = dict(pin=late_clk, tper='2*t_bit', tpw='t_bit', trf='t_rf', td='t_bit', pos=clk_pol)
+        pulse_list = [early_clk_pulse, late_clk_pulse]
+        digital_tran_tb_params = dict(
+            pulse_list=pulse_list,
+            reset_list=reset_list,
+            load_list=load_list,
+        )
+        wrapper_params = get_digital_wrapper_params(specs, dut, clk_pins)
+        tbm_specs, tb_params = setup_digital_tran(specs, dut, wrapper_params=wrapper_params,
+                                                  **digital_tran_tb_params)
+        # TODO Add this back in
+        # for v_offset in self.specs['strongarm_offset_params'][mos]:
+        #     tbm.sim_params[v_offset] = 3 * self.specs['sigma_avt'] * (1 if pol == 'pos' else -1)
+
+        tbm = cast(DigitalTranTB, sim_db.make_tbm(DigitalTranTB, tbm_specs))
+        self.adj_dict = {'t_delay': intv_params}
+
+        return tbm, tb_params, self.adj_dict, {}, False, True
+
+    def process_output_helper(self, cur_info: MeasInfo, sim_results: SimResults, remaining: Set[str]
+                              ) -> Mapping[str, Tuple[Tuple[float, float], Dict[str, Any], bool]]:
+        specs = self.specs
+        early_clk: str = specs['early_clk']
+        adj_up: bool = specs['adj_up']
+        out_sig: str = specs['out_sig']
+        out_edge = EdgeType.RISE if specs['out_rising'] else EdgeType.FALL
+        accept_mode = AcceptMode.POSITIVE if specs['accept_mode'] else AcceptMode.NEGATIVE
+        cur_state = cur_info.state
+        data = sim_results.data
+        tbm = cast(DigitalTranTB, sim_results.tbm)
+
+        t0 = tbm.get_t_rst_end(data)
+        td = tbm.calc_delay(data, early_clk, out_sig, EdgeType.RISE, out_edge, t_start=t0)[0, ...]
+        diff = 1-td
+        # We want td to look for when td never settles, (where it will be inf), 1 is used because td should never be 1s
+        arg, accept, low, high = self.get_adj_interval('t_delay', adj_up, data['t_delay'], diff,
+                                                       accept_mode=accept_mode)
+        delay = data['t_delay'][arg]
+        new_result = {'value': delay, 'low': low, 'high': high, accept: 'accept'}
+        self.log_result(cur_state, new_result)
+        return {'t_delay': ((low, high), new_result, accept)}
+
+
+class PhaseDetMeasManager(MeasurementManager):
+
+    def __init__(self, *args: Any, **kwargs: Any) -> None:
+        super().__init__(*args, **kwargs)
+
+    def initialize(self, sim_db: SimulationDB, dut: DesignInstance) -> Tuple[bool, MeasInfo]:
+        return False, MeasInfo("up_rising", {})
+
+    def process_output(self, cur_info: MeasInfo, sim_results: Union[SimResults, MeasureResult]
+                       ) -> Tuple[bool, MeasInfo]:
+        delay = sim_results.data['t_delay']['value']
+        t_bit = self.specs['tbm_specs']['sim_params']['t_bit']
+        delay = abs(delay-t_bit/2)
+        if cur_info.state == 'up_rising':
+            return False, MeasInfo("down_falling", dict(up_delay=delay))
+        else:
+            dct = cur_info.prev_results
+            dct['down_delay'] = delay
+            return True, MeasInfo("", dct)
+
+    def get_sim_info(self, sim_db: SimulationDB, dut: DesignInstance, cur_info: MeasInfo
+                     ) -> Tuple[Union[Tuple[TestbenchManager, Mapping[str, Any]], MeasurementManager], bool]:
+        unit_specs = self._specs.copy()
+        if cur_info.state == 'up_rising':
+            unit_specs['early_clk'] = 'CLKB'
+            unit_specs['late_clk'] = 'CLKA'
+            unit_specs['out_rising'] = False
+            unit_specs['out_sig'] = 't_up'
+            unit_specs['adj_up'] = False
+            unit_specs['invert_clk'] = False
+        elif cur_info.state == 'down_falling':
+            unit_specs['early_clk'] = 'CLKA'
+            unit_specs['late_clk'] = 'CLKB'
+            unit_specs['out_rising'] = False
+            unit_specs['out_sig'] = 't_down'
+            unit_specs['adj_up'] = False
+            unit_specs['invert_clk'] = True
+        mm = self.make_mm(PhaseDetMeasManagerUnit, unit_specs)
+        return mm, True
diff --git a/src/aib_ams/schematic/__init__.py b/src/aib_ams/schematic/__init__.py
new file mode 100644
index 0000000..5573caf
--- /dev/null
+++ b/src/aib_ams/schematic/__init__.py
@@ -0,0 +1,14 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
diff --git a/src/aib_ams/schematic/aib_dcc_helper.py b/src/aib_ams/schematic/aib_dcc_helper.py
new file mode 100644
index 0000000..a9a32da
--- /dev/null
+++ b/src/aib_ams/schematic/aib_dcc_helper.py
@@ -0,0 +1,77 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_dcc_helper(Module):
+    """Module for library aib_ams cell aib_dcc_helper.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_dcc_helper.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            core_params='dcc_helper_core parameters.',
+            sync_params='synchronizer flop parameters.',
+            buf_params='clock buffer parameters.',
+            nsync='number of synchronizer flops',
+        )
+
+    def design(self, core_params: Param, sync_params: Param, buf_params: Param, nsync: int) -> None:
+        if nsync < 2:
+            raise ValueError('nsync must be >= 2.')
+
+        if nsync != 2:
+            idx1 = nsync - 1
+            suf = f'<{idx1}:0>'
+            inst_name = 'XSYNC' + suf
+            dum_name = 'XDUMSYNC' + suf
+            inst_conns = [('outp', 'rstlb_p' + suf), ('outn', 'rstlb_n' + suf),
+                          ('inp', f'rstlb_p<{nsync - 2}:0>,VDD'),
+                          ('inn', f'rstlb_n<{nsync - 2}:0>,VSS')]
+            dum_conns = [('outp', 'dump' + suf), ('outn', 'dumn' + suf),
+                         ('inp', f'dump<{nsync - 2}:0>,VDD'),
+                         ('inn', f'dumn<{nsync - 2}:0>,VSS')]
+            self.rename_instance('XSYNC<1:0>', inst_name, conn_list=inst_conns)
+            self.rename_instance('XDUMSYNC<1:0>', dum_name, conn_list=dum_conns)
+            self.reconnect_instance_terminal('XCORE', 'rstlb', f'rstlb_p<{idx1}>')
+            nc_net = f'unused,rstlb_n<{idx1}>,dump<{idx1}>,dumn<{idx1}>'
+            self.reconnect_instance_terminal('XNC<3:0>', 'noConn', nc_net)
+        else:
+            inst_name = 'XSYNC<1:0>'
+            dum_name = 'XDUMSYNC<1:0>'
+
+        self.instances['XCORE'].design(**core_params)
+        self.instances[inst_name].design(**sync_params)
+        self.instances[dum_name].design(**sync_params)
+        self.instances['XCKBUF'].design(dual_output=False, **buf_params)
+        self.instances['XDUMBUF'].design(dual_output=False, **buf_params)
diff --git a/src/aib_ams/schematic/aib_dcc_helper_core.py b/src/aib_ams/schematic/aib_dcc_helper_core.py
new file mode 100644
index 0000000..cec122c
--- /dev/null
+++ b/src/aib_ams/schematic/aib_dcc_helper_core.py
@@ -0,0 +1,53 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_dcc_helper_core(Module):
+    """Module for library aib_ams cell aib_dcc_helper_core.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_dcc_helper_core.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            mux_params='clock mux parameters.',
+            flop_params='divider flop parameters.',
+            inv_params='inverter parameters.',
+        )
+
+    def design(self, mux_params: Param, flop_params: Param, inv_params: Param) -> None:
+        self.instances['XMUXI'].design(**mux_params)
+        self.instances['XMUXO'].design(**mux_params)
+        self.instances['XDIV'].design(**flop_params)
+        self.instances['XINV0'].design(dual_output=False, **inv_params)
+        self.instances['XINV1'].design(dual_output=True, **inv_params)
diff --git a/src/aib_ams/schematic/aib_dlycell.py b/src/aib_ams/schematic/aib_dlycell.py
new file mode 100644
index 0000000..d8faed5
--- /dev/null
+++ b/src/aib_ams/schematic/aib_dlycell.py
@@ -0,0 +1,140 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+from pybag.enum import TermType
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_dlycell(Module):
+    """Module for library aib_ams cell aib_dlycell.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_dlycell.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            so_inv_params='Schematic parameters for so inv',
+            scan_rst_flop_params='Schematic parameters for scan_rst_flop',
+            dc_core_params='Schematic parameters for delay cell core',
+            flop_char='True to add flop characterization pins.',
+            num_core='Number of delay cell cores in one delay cell',
+            is_dum='True if this is a dummy cell in the delay line',
+            output_sr_pins='True to output measurement pins.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            flop_char=False,
+            num_core=1,
+            is_dum=False,
+            output_sr_pins=False,
+        )
+
+    def design(self, so_inv_params: Param, scan_rst_flop_params: Param, dc_core_params: Param,
+               flop_char: bool, num_core: int, is_dum: bool, output_sr_pins: bool) -> None:
+        """To be overridden by subclasses to design this module.
+
+        This method should fill in values for all parameters in
+        self.parameters.  To design instances of this module, you can
+        call their design() method or any other ways you coded.
+
+        To modify schematic structure, call:
+
+        rename_pin()
+        delete_instance()
+        replace_instance_master()
+        reconnect_instance_terminal()
+        restore_instance()
+        array_instance()
+        """
+        self.instances['XSoInv0'].design(**so_inv_params)
+        self.instances['XSoInv1'].design(**so_inv_params)
+        self.instances['XDFF'].design(**scan_rst_flop_params)
+        self.instances['XCore'].design(**dc_core_params)
+
+        if num_core > 1:
+            inst_suf = f'<{num_core - 1}:0>'
+            if is_dum:
+                if num_core > 2:
+                    term_suf = f'<{num_core - 2}:0>'
+
+                    # no connections
+                    self.rename_instance('XNC_in', f'XNC_in{term_suf}',
+                                         [('noConn', f'NC_in{term_suf}')])
+                    self.rename_instance('XNC_out', f'XNC_out{term_suf}',
+                                         [('noConn', f'NC_out{term_suf}')])
+                    self.rename_instance('XNC_ci', f'XNC_ci{term_suf}',
+                                         [('noConn', f'NC_ci{term_suf}')])
+                    self.rename_instance('XNC_co', f'XNC_co{term_suf}',
+                                         [('noConn', f'NC_co{term_suf}')])
+                else:
+                    term_suf = ''
+
+                # terminal connections
+                conn_list = [
+                    ('in_p', f'in_p,NC_in{term_suf}'),
+                    ('co_p', f'NC_co{term_suf},co_p'),
+                    ('out_p', f'out_p,NC_out{term_suf}'),
+                    ('ci_p', f'NC_ci{term_suf},ci_p'),
+                ]
+            else:
+                term_suf = f'<{num_core - 2}:0>' if num_core > 2 else ''
+
+                # terminal connections
+                conn_list = [
+                    ('in_p', f'in_p,mid_in{term_suf}'),
+                    ('co_p', f'mid_in{term_suf},co_p'),
+                    ('out_p', f'out_p,mid_out{term_suf}'),
+                    ('ci_p', f'mid_out{term_suf},ci_p'),
+                ]
+            self.rename_instance('XCore', f'XCore{inst_suf}', conn_list)
+
+        if not is_dum or num_core == 1:
+            for inst in ['XNC_in', 'XNC_out', 'XNC_ci', 'XNC_co']:
+                self.remove_instance(inst)
+
+        if flop_char:
+            self.add_pin('bk1', TermType.output)
+
+        if output_sr_pins:
+            self.reconnect_instance_terminal('XCore', 'sr0_o', 'srqb')
+            self.reconnect_instance_terminal('XCore', 'sr1_o', 'srq')
+            self.add_pin('srq', TermType.output)
+            self.add_pin('srqb', TermType.output)
diff --git a/src/aib_ams/schematic/aib_dlycell_core.py b/src/aib_ams/schematic/aib_dlycell_core.py
new file mode 100644
index 0000000..ab17ee3
--- /dev/null
+++ b/src/aib_ams/schematic/aib_dlycell_core.py
@@ -0,0 +1,93 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+from pybag.enum import TermType
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_dlycell_core(Module):
+    """Module for library aib_ams cell aib_dlycell_core.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_dlycell_core.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            in_params='Parameters for input NAND',
+            sr0_params='Parameters for SR0 NAND',
+            sr1_params='Parameters for SR1 NAND',
+            out_params='Parameters for output NAND',
+            feedback='True to connect ci_p and co_p',
+            output_sr_pins='True to output sr1_o and sr0_o pins.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(feedback=False, output_sr_pins=False)
+
+    def design(self, in_params: Param, sr0_params: Param, sr1_params: Param,
+               out_params: Param, feedback: bool, output_sr_pins: bool) -> None:
+        """To be overridden by subclasses to design this module.
+
+        This method should fill in values for all parameters in
+        self.parameters.  To design instances of this module, you can
+        call their design() method or any other ways you coded.
+
+        To modify schematic structure, call:
+
+        rename_pin()
+        delete_instance()
+        replace_instance_master()
+        reconnect_instance_terminal()
+        restore_instance()
+        array_instance()
+        """
+        self.instances['XNAND_in'].design(**in_params)
+        self.instances['XNAND_out'].design(**out_params)
+        self.instances['XNAND_SR0'].design(**sr0_params)
+        self.instances['XNAND_SR1'].design(**sr1_params)
+
+        if feedback:
+            for pin in ['ci_p', 'co_p']:
+                self.remove_pin(pin)
+            self.reconnect_instance_terminal('XNAND_in', 'out', 'fb')
+            self.reconnect_instance_terminal('XNAND_out', 'in<1:0>', 'sr1_o,fb')
+
+        if output_sr_pins:
+            self.add_pin('sr1_o', TermType.output)
+            self.add_pin('sr0_o', TermType.output)
diff --git a/src/aib_ams/schematic/aib_dlycell_no_flop.py b/src/aib_ams/schematic/aib_dlycell_no_flop.py
new file mode 100644
index 0000000..e5ccad4
--- /dev/null
+++ b/src/aib_ams/schematic/aib_dlycell_no_flop.py
@@ -0,0 +1,123 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_dlycell_no_flop(Module):
+    """Module for library aib_ams cell aib_dlycell_no_flop.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_dlycell_no_flop.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            bk_inv_params='Schematic parameters for bk inv',
+            dc_core_params='Schematic parameters for delay cell core',
+            num_core='Number of delay cell cores in one delay cell',
+            is_dum='True if this is a dummy cell in the delay line',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            num_core=1,
+            is_dum=False,
+        )
+
+    def design(self, bk_inv_params: Param, dc_core_params: Param, num_core: int, is_dum: bool
+               ) -> None:
+        """To be overridden by subclasses to design this module.
+
+        This method should fill in values for all parameters in
+        self.parameters.  To design instances of this module, you can
+        call their design() method or any other ways you coded.
+
+        To modify schematic structure, call:
+
+        rename_pin()
+        delete_instance()
+        replace_instance_master()
+        reconnect_instance_terminal()
+        restore_instance()
+        array_instance()
+        """
+        self.instances['XBKInv0'].design(**bk_inv_params)
+        self.instances['XBKInv1'].design(**bk_inv_params)
+        self.instances['XCore'].design(**dc_core_params)
+
+        if num_core > 1:
+            inst_suf = f'<{num_core - 1}:0>'
+            if is_dum:
+                if num_core > 2:
+                    term_suf = f'<{num_core - 2}:0>'
+
+                    # no connections
+                    self.rename_instance('XNC_in', f'XNC_in{term_suf}',
+                                         [('noConn', f'NC_in{term_suf}')])
+                    self.rename_instance('XNC_out', f'XNC_out{term_suf}',
+                                         [('noConn', f'NC_out{term_suf}')])
+                    self.rename_instance('XNC_ci', f'XNC_ci{term_suf}',
+                                         [('noConn', f'NC_ci{term_suf}')])
+                    self.rename_instance('XNC_co', f'XNC_co{term_suf}',
+                                         [('noConn', f'NC_co{term_suf}')])
+                else:
+                    term_suf = ''
+
+                # terminal connections
+                conn_list = [
+                    ('in_p', f'in_p,NC_in{term_suf}'),
+                    ('co_p', f'NC_co{term_suf},co_p'),
+                    ('out_p', f'out_p,NC_out{term_suf}'),
+                    ('ci_p', f'NC_ci{term_suf},ci_p'),
+                ]
+            else:
+                term_suf = f'<{num_core - 2}:0>' if num_core > 2 else ''
+
+                # terminal connections
+                conn_list = [
+                    ('in_p', f'in_p,mid_in{term_suf}'),
+                    ('co_p', f'mid_in{term_suf},co_p'),
+                    ('out_p', f'out_p,mid_out{term_suf}'),
+                    ('ci_p', f'mid_out{term_suf},ci_p'),
+                ]
+            self.rename_instance('XCore', f'XCore{inst_suf}', conn_list)
+
+        if not is_dum or num_core == 1:
+            for inst in ['XNC_in', 'XNC_out', 'XNC_ci', 'XNC_co']:
+                self.remove_instance(inst)
diff --git a/src/aib_ams/schematic/aib_dlyline.py b/src/aib_ams/schematic/aib_dlyline.py
new file mode 100644
index 0000000..23542e5
--- /dev/null
+++ b/src/aib_ams/schematic/aib_dlyline.py
@@ -0,0 +1,197 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+from pybag.enum import TermType
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_dlyline(Module):
+    """Module for library aib_ams cell aib_dlyline.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_dlyline.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            dlycell_params='Delay Cell parameters',
+            num_insts='Number of instances of delay cells',
+            num_dum='Number of instances of dummy delay cells',
+            flop='True to have flops in delay cell',
+            flop_char='True to add flop characterization pins.',
+            output_sr_pins='True to output measurement pins.',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            num_dum=0,
+            flop=True,
+            flop_char=False,
+            output_sr_pins=False,
+        )
+
+    def design(self, dlycell_params: Param, num_insts: int, num_dum: int, flop: bool,
+               flop_char: bool, output_sr_pins: bool) -> None:
+        """To be overridden by subclasses to design this module.
+
+        This method should fill in values for all parameters in
+        self.parameters.  To design instances of this module, you can
+        call their design() method or any other ways you coded.
+
+        To modify schematic structure, call:
+
+        rename_pin()
+        delete_instance()
+        replace_instance_master()
+        reconnect_instance_terminal()
+        restore_instance()
+        array_instance()
+        """
+        if not flop:
+            self.replace_instance_master('XCELL', 'aib_ams', 'aib_dlycell_no_flop',
+                                         keep_connections=True)
+            self.replace_instance_master('XDUM', 'aib_ams', 'aib_dlycell_no_flop',
+                                         keep_connections=True)
+            for name in ['RSTb', 'CLKIN', 'iSI', 'SOOUT', 'iSE']:
+                self.remove_pin(name)
+
+        self.instances['XCELL'].design(**dlycell_params)
+
+        if num_insts > 2:
+
+            if output_sr_pins:
+                conn_list = [
+                    ('in_p', f'a<{num_insts - 2}:0>,dlyin'),
+                    ('bk', f'bk<{num_insts - 1}:0>'),
+                    ('ci_p', f'b<{num_insts - 1}:0>'),
+                    ('out_p', f'b<{num_insts-2}:0>,dlyout'),
+                    ('co_p', f'a<{num_insts - 1}:0>'),
+                    ('si', f'so<{num_insts-2}:0>,iSI'),
+                    ('so', f'SOOUT,so<{num_insts-2}:0>'),
+                    ('srqb', f'srqb<{num_insts - 1}:0>'),
+                    ('srq', f'srq<{num_insts - 1}:0>')
+                ]
+            else:
+                conn_list = [
+                    ('in_p', f'a<{num_insts - 2}:0>,dlyin'),
+                    ('bk', f'bk<{num_insts - 1}:0>'),
+                    ('ci_p', f'b{num_insts - 1},b<{num_insts - 2}:0>'),
+                    ('out_p', f'b<{num_insts - 2}:0>,dlyout'),
+                    ('co_p', f'a{num_insts - 1},a<{num_insts - 2}:0>'),
+                    ('si', f'so<{num_insts - 2}:0>,iSI'),
+                    ('so', f'SOOUT,so<{num_insts - 2}:0>'),
+                ]
+
+            if flop_char:
+                conn_list.append(('bk1', f'flop_q<{num_insts - 1}:0>'))
+                self.add_pin(f'flop_q<{num_insts - 1}:0>', TermType.output)
+            self.rename_instance('XCELL', f'XCELL<{num_insts - 1}:0>', conn_list)
+        elif num_insts == 2:
+            conn_list = [
+                ('in_p', f'a,dlyin'),
+                ('bk', f'bk<{num_insts - 1}:0>'),
+                ('ci_p', f'b{num_insts - 1},b'),
+                ('out_p', 'b,dlyout'),
+                ('co_p', f'a{num_insts - 1},a'),
+                ('si', f'so,iSI'),
+                ('so', f'SOOUT,so'),
+            ]
+
+            if output_sr_pins:
+                conn_list += [('srqb', f'srqb<1:0>'), ('srq', f'srq<1:0>')]
+
+            if flop_char:
+                conn_list.append(('bk1', f'flop_q<{num_insts - 1}:0>'))
+                self.add_pin(f'flop_q<{num_insts - 1}:0>', TermType.output)
+            self.rename_instance('XCELL', f'XCELL<{num_insts - 1}:0>', conn_list)
+        elif num_insts == 1:
+            if flop_char:
+                self.reconnect_instance_terminal('XCELL', 'bk1', 'flop_q<0>')
+                self.add_pin('flop_q<0>', TermType.output)
+            if output_sr_pins:
+                self.reconnect_instance_terminal('XCELL', 'srq', 'srq')
+                self.reconnect_instance_terminal('XCELL', 'srqb', 'srqb')
+
+        else:
+            raise ValueError(f'num_insts={num_insts} should be greater than 0.')
+
+        if num_dum > 0:
+            dc_core_params = dlycell_params['dc_core_params'].copy(remove=['output_sr_pins'])
+            dum_params = dlycell_params.copy(remove=['flop_char', 'output_sr_pins'],
+                                             append={'is_dum': True,
+                                                     'dc_core_params': dc_core_params})
+            self.instances['XDUM'].design(**dum_params)
+            if num_dum > 1:
+                suffix = f'<{num_dum - 1}:0>'
+                conn_list = [
+                    ('out_p', 'NC_out' + suffix),
+                    ('co_p', 'NC_co' + suffix),
+                    ('so', 'NC_so' + suffix),
+                ]
+                self.rename_instance('XDUM', 'XDUM' + suffix, conn_list)
+                if flop:
+                    self.rename_instance('XNC_so', 'XNC_so' + suffix,
+                                         [('noConn', 'NC_so' + suffix)])
+                else:
+                    self.remove_instance('XNC_so')
+                self.rename_instance('XNC_co', 'XNC_co' + suffix, [('noConn', 'NC_co' + suffix)])
+                self.rename_instance('XNC_out', 'XNC_out' + suffix, [('noConn', 'NC_out' + suffix)])
+        else:
+            for inst in ['XDUM', 'XNC_so', 'XNC_co', 'XNC_out']:
+                self.remove_instance(inst)
+
+        if output_sr_pins:
+            if num_insts == 2:
+                raise ValueError('oops not supported')
+            pin_name_list = [
+                ('bk', f'bk<{num_insts - 1}:0>'),
+                ('b', f'b<{num_insts - 1}:0>'),
+                ('a', f'a<{num_insts - 1}:0>'),
+            ] if num_insts > 1 else []
+            self.add_pin(f'srq<{num_insts-1}:0>', TermType.output)
+            self.add_pin(f'srqb<{num_insts-1}:0>', TermType.output)
+        else:
+            pin_name_list = [
+                ('bk', f'bk<{num_insts - 1}:0>'),
+                ('b', f'b{num_insts - 1}'),
+                ('a', f'a{num_insts - 1}'),
+            ] if num_insts > 1 else []
+
+        for old_name, new_name in pin_name_list:
+            self.rename_pin(old_name, new_name)
diff --git a/src/aib_ams/schematic/aib_driver_output_driver.py b/src/aib_ams/schematic/aib_driver_output_driver.py
new file mode 100644
index 0000000..7032d7f
--- /dev/null
+++ b/src/aib_ams/schematic/aib_driver_output_driver.py
@@ -0,0 +1,51 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_driver_output_driver(Module):
+    """Module for library aib_ams cell aib_driver_output_driver.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_driver_output_driver.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            unit_params='output unit cell parameters',
+            pupd_params='weak pull up pull down parameters',
+        )
+
+    def design(self, unit_params: Param, pupd_params: Param) -> None:
+        self.instances['XUNIT<5:0>'].design(**unit_params)
+        self.instances['XPUPD'].design(**pupd_params.copy(append=dict(strong=False)))
+        self.instances['XSUM'].design(nin=7)
+        self.reconnect_instance_terminal('XSUM', 'in<6:0>', 'txpadout_tmp<6:0>')
diff --git a/src/aib_ams/schematic/aib_driver_output_unit_cell.py b/src/aib_ams/schematic/aib_driver_output_unit_cell.py
new file mode 100644
index 0000000..d68245f
--- /dev/null
+++ b/src/aib_ams/schematic/aib_driver_output_unit_cell.py
@@ -0,0 +1,71 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+from pybag.enum import TermType
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_driver_output_unit_cell(Module):
+    """Module for library aib_ams cell aib_driver_output_unit_cell.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_driver_output_unit_cell.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            nand_params='nand params',
+            nor_params='nor params',
+            pupd_params='output stage params',
+            export_pins='Defaults to False.  True whether to export simulation pins',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            export_pins=False,
+        )
+
+    def design(self, nand_params: Param, nor_params: Param, pupd_params: Param,
+               export_pins: bool) -> None:
+        self.instances['XNAND'].design(**nand_params)
+        self.instances['XNOR'].design(**nor_params)
+        self.instances['Xpupd'].design(**pupd_params.copy(append=dict(strong=True)))
+
+        if export_pins:
+            self.add_pin('nand_pu', TermType.output)
+            self.add_pin('nor_pd', TermType.output)
diff --git a/src/aib_ams/schematic/aib_driver_pu_pd.py b/src/aib_ams/schematic/aib_driver_pu_pd.py
new file mode 100644
index 0000000..995dc51
--- /dev/null
+++ b/src/aib_ams/schematic/aib_driver_pu_pd.py
@@ -0,0 +1,83 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any, Optional, List
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_driver_pu_pd(Module):
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_driver_pu_pd.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            seg_p='segments of pmos',
+            seg_n='segments of nmos',
+            lch='channel length in resolution units.',
+            w_p='pmos width, in number of fins or resolution units.',
+            w_n='nmos width, in number of fins or resolution units.',
+            th_p='pmos threshold flavor.',
+            th_n='nmos threshold flavor.',
+            stack_p='number of transistors in a stack.',
+            stack_n='number of transistors in a stack.',
+            p_in_gate_numbers='a List indicating input number of the gate',
+            n_in_gate_numbers='a List indicating input number of the gate',
+            strong='True if strong pull up/dn, False if weak pull up/dn. used in behavioral model',
+        )
+
+    @classmethod
+    def get_default_param_values(cls) -> Dict[str, Any]:
+        return dict(
+            stack_p=1,
+            stack_n=1,
+            p_in_gate_numbers=None,
+            n_in_gate_numbers=None,
+            strong=True,
+        )
+
+    def design(self, seg_p: int, seg_n: int, lch: int, w_p: int, w_n: int, th_p: str,
+               th_n: str, stack_p: int, stack_n: int, p_in_gate_numbers: Optional[List[int]] = None,
+               n_in_gate_numbers: Optional[List[int]] = None, strong: bool = True) -> None:
+        self.instances['XN'].design(w=w_n, lch=lch, seg=seg_n, intent=th_n, stack=stack_n)
+        self.instances['XP'].design(w=w_p, lch=lch, seg=seg_p, intent=th_p, stack=stack_p)
+
+        self._reconnect_gate('XP', stack_p, p_in_gate_numbers, 'puenb', 'VSS')
+        self._reconnect_gate('XN', stack_n, n_in_gate_numbers, 'pden', 'VDD')
+
+    def _reconnect_gate(self, inst_name: str, stack: int, idx_list: Optional[List[int]],
+                        gate: str, sup: str) -> None:
+        if stack > 1:
+            g_term = f'g<{stack - 1}:0>'
+            if idx_list:
+                glist = [sup] * stack
+                for i in idx_list:
+                    glist[i] = gate
+                self.reconnect_instance_terminal(inst_name, g_term, ','.join(glist))
+            else:
+                self.reconnect_instance_terminal(inst_name, g_term, gate)
+        else:
+            self.reconnect_instance_terminal(inst_name, 'g', gate)
diff --git a/src/aib_ams/schematic/aib_frontend.py b/src/aib_ams/schematic/aib_frontend.py
new file mode 100644
index 0000000..3b67825
--- /dev/null
+++ b/src/aib_ams/schematic/aib_frontend.py
@@ -0,0 +1,54 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_frontend(Module):
+    """Module for library aib_ams cell aib_frontend.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_frontend.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            fe_params='frontend schematic parameters.',
+            nd_params='N-diode schematic parameters.',
+            pd_params='P-diode schematic parameters.',
+            ms_params='metal short schematic parameters.',
+        )
+
+    def design(self, fe_params: Param, nd_params: Param, pd_params: Param, ms_params: Param
+               ) -> None:
+        self.instances['XFE'].design(**fe_params)
+        self.instances['XND'].design(**nd_params)
+        self.instances['XPD'].design(**pd_params)
+        self.instances['XMS'].design(**ms_params)
diff --git a/src/aib_ams/schematic/aib_frontend_core.py b/src/aib_ams/schematic/aib_frontend_core.py
new file mode 100644
index 0000000..5c3d304
--- /dev/null
+++ b/src/aib_ams/schematic/aib_frontend_core.py
@@ -0,0 +1,56 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_frontend_core(Module):
+    """Module for library aib_ams cell aib_frontend_core.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_frontend_core.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            tx_params='Transmitter parameters.',
+            rx_params='Receiver parameters.',
+        )
+
+    def design(self, tx_params: Param, rx_params: Param) -> None:
+        self.instances['XTX'].design(**tx_params)
+        self.instances['XRX'].design(**rx_params)
diff --git a/src/aib_ams/schematic/aib_phase_interp.py b/src/aib_ams/schematic/aib_phase_interp.py
new file mode 100644
index 0000000..75f70af
--- /dev/null
+++ b/src/aib_ams/schematic/aib_phase_interp.py
@@ -0,0 +1,93 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any, List
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_phase_interp(Module):
+    """Module for library aib_ams cell aib_phase_interp.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_phase_interp.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            pi_params='Phase interpolator parameters',
+            dc_params='Delay cell parameters',
+            num_core='Number of delay cells',
+            export_dc_out='export delaycell output',
+            inv_params='Inverter input buffer params',
+            nand_params='Nand input buffer params',
+            export_dc_in='Export the input of the delay cell'
+        )
+
+    def design(self, pi_params: Param, dc_params: Param, inv_params: List[Param],
+               nand_params: List[Param], num_core: int, export_dc_out: bool, export_dc_in: bool,
+               ) -> None:
+        nbits = pi_params['nbits'] - 1
+        self.instances['XDC'].design(**dc_params)
+        self.instances['XINT'].design(**pi_params)
+        if len(inv_params) == 1:
+            self.instances['XINV'].design(**inv_params[0])
+        else:
+            self.array_instance('XINV', ['XINVL', 'XINVH'])
+            self.instances['XINVL'].design(**inv_params[0])
+            self.instances['XINVH'].design(**inv_params[1])
+        if len(nand_params) == 1:
+            self.instances['XNAND'].design(**nand_params[0])
+        else:
+            self.array_instance('XNAND', ['XNANDL', 'XNANDH'])
+            self.instances['XNANDL'].design(**nand_params[0])
+            self.instances['XNANDH'].design(**nand_params[1])
+        # NOTE: always-on input on MSB to help with nonlinearity
+        self.reconnect_instance('XINT', [
+            (f'a_en<{nbits}:0>', f'VDD,sn<{nbits - 1}:0>'),
+            (f'a_enb<{nbits}:0>', f'VSS,sp<{nbits - 1}:0>'),
+            (f'b_en<{nbits}:0>', f'VSS,sp<{nbits - 1}:0>'),
+            (f'b_enb<{nbits}:0>', f'VDD,sn<{nbits - 1}:0>'),
+        ])
+        if num_core > 1:
+            co_sig = f'co_p<{num_core-2}:0>' if num_core > 2 else 'co_p'
+            ci_sig = f'ci_p<{num_core-2}:0>' if num_core > 2 else 'ci_p'
+            dc_conn_list = [
+                ('bk1', 'VDD'),
+                ('in_p', 'a_in_buf,' + co_sig),
+                ('out_p', 'b_in,' + ci_sig),
+                ('co_p', co_sig + ',mid'),
+                ('ci_p', ci_sig + ',mid'),
+            ]
+            self.rename_instance('XDC', f'XDC<{num_core-1}:0>', conn_list=dc_conn_list)
+        self.rename_pin('sp', f'sp<{nbits - 1}:0>')
+        self.rename_pin('sn', f'sn<{nbits - 1}:0>')
+        if export_dc_out:
+            self.add_pin('b_in', 'output')
+        if export_dc_in:
+            self.add_pin('a_in_buf', 'output')
diff --git a/src/aib_ams/schematic/aib_phasedet.py b/src/aib_ams/schematic/aib_phasedet.py
new file mode 100644
index 0000000..eaaf10d
--- /dev/null
+++ b/src/aib_ams/schematic/aib_phasedet.py
@@ -0,0 +1,54 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_phasedet(Module):
+    """Module for library aib_ams cell aib_phasedet.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_phasedet.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            se_params='two-three splitter parameters.',
+            flop_params='strongarm flop parameters.',
+            inv_params='dummy inverter parameters.',
+        )
+
+    def design(self, se_params: Param, flop_params: Param, inv_params: Param) -> None:
+        self.instances['XSED'].design(**se_params)
+        self.instances['XSEU'].design(**se_params)
+        self.instances['XFLOPD'].design(**flop_params)
+        self.instances['XFLOPU'].design(**flop_params)
+        self.instances['XDUMD'].design(**inv_params)
+        self.instances['XDUMU'].design(**inv_params)
diff --git a/src/aib_ams/schematic/aib_rxanlg_core.py b/src/aib_ams/schematic/aib_rxanlg_core.py
new file mode 100644
index 0000000..3c89226
--- /dev/null
+++ b/src/aib_ams/schematic/aib_rxanlg_core.py
@@ -0,0 +1,70 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_rxanlg_core(Module):
+    """Module for library aib_ams cell aib_rxanlg_core.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_rxanlg_core.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        return dict(
+            data_params='data single-to-diff parameters.',
+            clk_params='clock single-to-diff-match parameters.',
+            data_lv_params='data level shifter parameters.',
+            ctrl_lv_params='control level shifter parameters.',
+            por_lv_params='power-on-reset level shifter parameters.',
+            buf_ctrl_lv_params='ctrl level shifter input buffer parameters.',
+            buf_por_lv_params='por level shifter input buffer parameters.',
+            inv_params='asnyc output inverter parameters.',
+        )
+
+    def design(self, data_params: Param, clk_params: Param, data_lv_params: Param,
+               ctrl_lv_params: Param, por_lv_params: Param, buf_ctrl_lv_params: Param,
+               buf_por_lv_params: Param, inv_params: Param) -> None:
+
+        self.instances['XSE_DATA'].design(**data_params)
+        self.instances['XSE_CLK'].design(**clk_params)
+        self.instances['XLV_DATA'].design(dual_output=True, **data_lv_params)
+        self.instances['XLV_CLK'].design(dual_output=True, **data_lv_params)
+        self.instances['XINV'].design(**inv_params)
+        self.instances['XDUM'].design(**inv_params)
+        self.instances['XLV_CLK_EN'].design(dual_output=True, lev_params=ctrl_lv_params,
+                                            buf_params=buf_ctrl_lv_params)
+        self.instances['XLV_DATA_EN'].design(dual_output=True, lev_params=ctrl_lv_params,
+                                             buf_params=buf_ctrl_lv_params)
+        self.instances['XPOR'].design(dual_output=True, **buf_por_lv_params)
+        self.instances['XPOR_DUM'].design(dual_output=True, **buf_por_lv_params)
+        self.instances['XLV_POR'].design(dual_output=True, **por_lv_params)
+        self.instances['XLV_DUM'].design(dual_output=True, **por_lv_params)
diff --git a/src/aib_ams/schematic/aib_se2diff.py b/src/aib_ams/schematic/aib_se2diff.py
new file mode 100644
index 0000000..8352129
--- /dev/null
+++ b/src/aib_ams/schematic/aib_se2diff.py
@@ -0,0 +1,56 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_se2diff(Module):
+    """A two-three splitter with enable functionality, meant to match aib_se2diff_match.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_se2diff.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            core_params='two-three splitter parameters.',
+            nand_params='NAND parameters.',
+            nor_params='dummy NOR parameters.',
+        )
+
+    def design(self, core_params: Param, nand_params: Param, nor_params: Param) -> None:
+        self.instances['XNAND'].design(**nand_params)
+        self.instances['XDUM'].design(**nor_params)
+        self.instances['XCORE'].design(**core_params)
diff --git a/src/aib_ams/schematic/aib_se2diff_match.py b/src/aib_ams/schematic/aib_se2diff_match.py
new file mode 100644
index 0000000..44928d4
--- /dev/null
+++ b/src/aib_ams/schematic/aib_se2diff_match.py
@@ -0,0 +1,63 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_se2diff_match(Module):
+    """A differential in to differential out buffer with differential enables.
+
+    Meant to match aib_se2diff.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_se2diff_match.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            core_params='inverter chain buffer parameters.',
+            nand_params='NAND parameters.',
+            nor_params='NOR parameters.',
+        )
+
+    def design(self, core_params: Param, nand_params: Param, nor_params: Param) -> None:
+        nstages = len(core_params['inv_params'])
+        if nstages != 3:
+            raise ValueError('Must have exactly 3 stages in inverter chain.')
+
+        self.instances['XNAND'].design(**nand_params)
+        self.instances['XNOR'].design(**nor_params)
+        self.instances['XBUFP'].design(dual_output=False, **core_params)
+        self.instances['XBUFN'].design(dual_output=False, **core_params)
diff --git a/src/aib_ams/schematic/aib_txanlg_core.py b/src/aib_ams/schematic/aib_txanlg_core.py
new file mode 100644
index 0000000..c46cdbe
--- /dev/null
+++ b/src/aib_ams/schematic/aib_txanlg_core.py
@@ -0,0 +1,63 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Dict, Any
+
+import pkg_resources
+from pathlib import Path
+
+from bag.design.module import Module
+from bag.design.database import ModuleDB
+from bag.util.immutable import Param
+
+
+# noinspection PyPep8Naming
+class aib_ams__aib_txanlg_core(Module):
+    """Module for library aib_ams cell aib_txanlg_core.
+
+    Fill in high level description here.
+    """
+
+    yaml_file = pkg_resources.resource_filename(__name__,
+                                                str(Path('netlist_info',
+                                                         'aib_txanlg_core.yaml')))
+
+    def __init__(self, database: ModuleDB, params: Param, **kwargs: Any) -> None:
+        Module.__init__(self, self.yaml_file, database, params, **kwargs)
+
+    @classmethod
+    def get_params_info(cls) -> Dict[str, str]:
+        """Returns a dictionary from parameter names to descriptions.
+
+        Returns
+        -------
+        param_info : Optional[Dict[str, str]]
+            dictionary from parameter names to descriptions.
+        """
+        return dict(
+            drv_params='output driver parameters.',
+            data_lv_params='data level shifter parameters.',
+            ctrl_lv_params='control signals level shifter parameters.',
+        )
+
+    def design(self, drv_params: Param, data_lv_params: Param, ctrl_lv_params: Param) -> None:
+        self.instances['XDRV'].design(**drv_params)
+        self.instances['XLV_DIN'].design(dual_output=False, **data_lv_params)
+        self.instances['XLV_ITX_EN'].design(dual_output=True, **ctrl_lv_params)
+        self.instances['XLV_PD'].design(dual_output=False, **ctrl_lv_params)
+        self.instances['XLV_PU'].design(dual_output=False, **ctrl_lv_params)
+        self.instances['XLV_PDRV<1:0>'].design(dual_output=False, **ctrl_lv_params)
+        self.instances['XLV_NDRV<1:0>'].design(dual_output=False, invert_out=True,
+                                               **ctrl_lv_params)
diff --git a/src/aib_ams/schematic/models/aib_driver_pu_pd.v b/src/aib_ams/schematic/models/aib_driver_pu_pd.v
new file mode 100644
index 0000000..a243978
--- /dev/null
+++ b/src/aib_ams/schematic/models/aib_driver_pu_pd.v
@@ -0,0 +1,34 @@
+// SPDX-License-Identifier: Apache-2.0
+// Copyright 2019 Blue Cheetah Analog Design Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{{ _header }}
+
+    logic out_temp;
+
+    always_comb begin
+        // puenb connects to PMOS, pden connects to NMOS
+        casez ({VDD, VSS, puenb, pden})
+           4'b10_00: out_temp = 1'b1;
+           4'b10_01: out_temp = 1'bx;
+           4'b10_10: out_temp = 1'bz;
+           4'b10_11: out_temp = 1'b0;
+           4'b00_??: out_temp = 1'b0;
+           default:  out_temp = 1'bx;
+        endcase
+    end
+
+    assign{% if not _sch_params['strong'] %} (weak0, weak1){% endif %} out = out_temp;
+
+endmodule
diff --git a/src/aib_ams/schematic/netlist_info/aib_dcc_helper.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_dcc_helper.symbol.yaml
new file mode 100644
index 0000000..001d4bf
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dcc_helper.symbol.yaml
@@ -0,0 +1,666 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dcc_helper
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 344
+  - 264
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 156
+          - 256
+          - 164
+          - 264
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 156
+          - -4
+          - 164
+          - 4
+    stype: 2
+    ttype: 2
+  ckout:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 336
+          - 66
+          - 344
+          - 74
+    stype: 0
+    ttype: 1
+  clk_dcd:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 56
+          - 4
+          - 64
+    stype: 0
+    ttype: 0
+  dcc_byp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 36
+          - 4
+          - 44
+    stype: 0
+    ttype: 0
+  launch:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 126
+          - 4
+          - 134
+    stype: 0
+    ttype: 0
+  measure:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 106
+          - 4
+          - 114
+    stype: 0
+    ttype: 0
+  rstb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 156
+          - 4
+          - 164
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 170
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstb
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - -4
+        - 120
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: measure
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - 80
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ckout
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 140
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: launch
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 50
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dcc_byp
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 70
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_dcd
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 340
+        - 260
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 140
+        - 264
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 150
+        - 6
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 340
+        - 260
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 200
+        - 250
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 55
+        - 245
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 130
+        - 100
+        - 210
+        - 200
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 130
+        -
+          - 140
+          - 120
+        -
+          - 130
+          - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 190
+          - 220
+        -
+          - 190
+          - 240
+        -
+          - 170
+          - 230
+        -
+          - 190
+          - 220
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 160
+        - 225
+        - 170
+        - 235
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 190
+          - 230
+        -
+          - 240
+          - 230
+        -
+          - 240
+          - 180
+        -
+          - 210
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 230
+        -
+          - 100
+          - 230
+        -
+          - 100
+          - 180
+        -
+          - 130
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 140
+        -
+          - 60
+          - 100
+        -
+          - 80
+          - 110
+        -
+          - 80
+          - 130
+        -
+          - 60
+          - 140
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 130
+        -
+          - 40
+          - 130
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 110
+        -
+          - 40
+          - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 120
+        -
+          - 80
+          - 120
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 70
+          - 105
+        -
+          - 70
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 70
+          - 100
+        -
+          - 70
+          - 80
+        -
+          - 80
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 80
+          - 80
+        -
+          - 240
+          - 80
+        -
+          - 240
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 260
+          - 90
+        -
+          - 260
+          - 50
+        -
+          - 280
+          - 60
+        -
+          - 280
+          - 80
+        -
+          - 260
+          - 90
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 260
+          - 80
+        -
+          - 240
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 260
+          - 60
+        -
+          - 240
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 55
+        -
+          - 270
+          - 50
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 70
+        -
+          - 340
+          - 70
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 60
+        -
+          - 0
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 160
+        -
+          - 0
+          - 160
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 130
+        -
+          - 0
+          - 130
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 110
+        -
+          - 0
+          - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 50
+        -
+          - 270
+          - 40
+        -
+          - 0
+          - 40
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1571240869
+  partName:
+    - 3
+    - aib_dcc_helper
+  pin#:
+    - 0
+    - 12
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("ckout" "VDD" "VSS" "clk_dcd" "dcc_byp" "launch" "measure" "rstb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 458
+  _dbvCvTimeStamp:
+    - 0
+    - 458
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_dcc_helper.yaml b/src/aib_ams/schematic/netlist_info/aib_dcc_helper.yaml
new file mode 100644
index 0000000..083704e
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dcc_helper.yaml
@@ -0,0 +1,1409 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dcc_helper
+view_name: schematic
+bbox:
+  - -1209
+  - -1620
+  - -390
+  - -550
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -1050
+            - -560
+            - R0
+          bbox:
+            - -1111
+            - -586
+            - -1040
+            - -550
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1075
+            - -560
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -1050
+            - -580
+            - R0
+          bbox:
+            - -1111
+            - -606
+            - -1040
+            - -570
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1075
+            - -580
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  ckout:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -960
+            - -630
+            - R0
+          bbox:
+            - -960
+            - -656
+            - -903
+            - -620
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -935
+            - -630
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  clk_dcd:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -690
+            - R0
+          bbox:
+            - -1097
+            - -716
+            - -1040
+            - -680
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -690
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  dcc_byp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -710
+            - R0
+          bbox:
+            - -1097
+            - -736
+            - -1040
+            - -700
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -710
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  launch:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -650
+            - R0
+          bbox:
+            - -1097
+            - -676
+            - -1040
+            - -640
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -650
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  measure:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -670
+            - R0
+          bbox:
+            - -1097
+            - -696
+            - -1040
+            - -660
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -670
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  rstb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -630
+            - R0
+          bbox:
+            - -1097
+            - -656
+            - -1040
+            - -620
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -630
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -687
+        - -1584
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -680
+          - -1620
+        -
+          - -680
+          - -1580
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -820
+          - -1530
+        -
+          - -780
+          - -1530
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -784
+        - -1523
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dump<1:0>
+      points:
+        -
+          - -580
+          - -1440
+        -
+          - -540
+          - -1440
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dump<1:0>
+      origin:
+        - -576
+        - -1433
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dump<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dumn<1:0>
+      points:
+        -
+          - -580
+          - -1460
+        -
+          - -540
+          - -1460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dumn<1:0>
+      origin:
+        - -576
+        - -1453
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dumn<1:0>
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused
+      origin:
+        - -916
+        - -1493
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dump<0>,VDD
+      points:
+        -
+          - -820
+          - -1440
+        -
+          - -780
+          - -1440
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dump<0>,VDD
+      origin:
+        - -784
+        - -1433
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dump<0>,VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -1040
+          - -1620
+        -
+          - -1040
+          - -1580
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -1047
+        - -1584
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dumn<0>,VSS
+      points:
+        -
+          - -820
+          - -1460
+        -
+          - -780
+          - -1460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dumn<0>,VSS
+      origin:
+        - -784
+        - -1453
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dumn<0>,VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -680
+          - -1360
+        -
+          - -680
+          - -1320
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -687
+        - -1356
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -680
+          - -1280
+        -
+          - -680
+          - -1240
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -687
+        - -1244
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -680
+          - -1020
+        -
+          - -680
+          - -980
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -687
+        - -1016
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -1040
+          - -1420
+        -
+          - -1040
+          - -1380
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -1047
+        - -1416
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused,rstlb_n<1>,dump<1>,dumn<1>
+      points:
+        -
+          - -400
+          - -1480
+        -
+          - -400
+          - -1440
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused,rstlb_n<1>,dump<1>,dumn<1>
+      origin:
+        - -407
+        - -1476
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused,rstlb_n<1>,dump<1>,dumn<1>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -820
+          - -1500
+        -
+          - -780
+          - -1500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -784
+        - -1493
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: rstlb_n<0>,VSS
+      points:
+        -
+          - -820
+          - -1120
+        -
+          - -780
+          - -1120
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: rstlb_n<0>,VSS
+      origin:
+        - -784
+        - -1113
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstlb_n<0>,VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: ckout
+      points:
+        -
+          - -460
+          - -810
+        -
+          - -420
+          - -810
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: ckout
+      origin:
+        - -456
+        - -803
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ckout
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -1040
+          - -1280
+        -
+          - -1040
+          - -1240
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: measure
+      points:
+        -
+          - -840
+          - -770
+        -
+          - -800
+          - -770
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: measure
+      origin:
+        - -804
+        - -763
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: measure
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: launch
+      points:
+        -
+          - -840
+          - -750
+        -
+          - -800
+          - -750
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: launch
+      origin:
+        - -804
+        - -743
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: launch
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -1047
+        - -1244
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: rstlb_p<0>,VDD
+      points:
+        -
+          - -820
+          - -1100
+        -
+          - -780
+          - -1100
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: launch
+      points:
+        -
+          - -1180
+          - -1160
+        -
+          - -1140
+          - -1160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: launch
+      origin:
+        - -1144
+        - -1153
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: launch
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dcc_byp
+      points:
+        -
+          - -840
+          - -840
+        -
+          - -800
+          - -840
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dcc_byp
+      origin:
+        - -804
+        - -833
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dcc_byp
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: rstlb_p<1:0>
+      origin:
+        - -576
+        - -1093
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstlb_p<1:0>
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: rstlb_p<0>,VDD
+      origin:
+        - -784
+        - -1093
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstlb_p<0>,VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -1040
+          - -1080
+        -
+          - -1040
+          - -1040
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -1047
+        - -1076
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -640
+          - -620
+        -
+          - -640
+          - -580
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -647
+        - -616
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -640
+          - -920
+        -
+          - -640
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -647
+        - -884
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_dcd
+      points:
+        -
+          - -840
+          - -820
+        -
+          - -800
+          - -820
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_dcd
+      origin:
+        - -804
+        - -813
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_dcd
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: rstlb_n<1:0>
+      points:
+        -
+          - -580
+          - -1120
+        -
+          - -540
+          - -1120
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: rstlb_n<1:0>
+      origin:
+        - -576
+        - -1113
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstlb_n<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused
+      points:
+        -
+          - -920
+          - -1500
+        -
+          - -880
+          - -1500
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: measure
+      points:
+        -
+          - -1180
+          - -1500
+        -
+          - -1140
+          - -1500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: measure
+      origin:
+        - -1144
+        - -1493
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: measure
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: rstb
+      origin:
+        - -784
+        - -1183
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: rstlb_p<1>
+      points:
+        -
+          - -840
+          - -720
+        -
+          - -800
+          - -720
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: rstlb_p<1>
+      origin:
+        - -804
+        - -713
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstlb_p<1>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: rstb
+      points:
+        -
+          - -820
+          - -1190
+        -
+          - -780
+          - -1190
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: rstlb_p<1:0>
+      points:
+        -
+          - -580
+          - -1100
+        -
+          - -540
+          - -1100
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: launch_buf
+      points:
+        -
+          - -920
+          - -1160
+        -
+          - -780
+          - -1160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: launch_buf
+      origin:
+        - -824
+        - -1153
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: launch_buf
+instances:
+  XCKBUF:
+    lib_name: bag3_digital
+    cell_name: inv_chain
+    view_name: symbol
+    xform:
+      - -1140
+      - -1240
+      - R0
+    bbox:
+      - -1144
+      - -1244
+      - -832
+      - -1076
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: launch
+      out: launch_buf
+      outb: net3
+    params:
+      {}
+    is_primitive: false
+  XCORE:
+    lib_name: aib_ams
+    cell_name: aib_dcc_helper_core
+    view_name: symbol
+    xform:
+      - -800
+      - -880
+      - R0
+    bbox:
+      - -804
+      - -884
+      - -456
+      - -616
+    connections:
+      VDD: VDD
+      VSS: VSS
+      clk_dcd: clk_dcd
+      clk_out: ckout
+      dcc_byp: dcc_byp
+      launch: launch
+      measure: measure
+      rstlb: rstlb_p<1>
+    params:
+      {}
+    is_primitive: false
+  XDUMBUF:
+    lib_name: bag3_digital
+    cell_name: inv_chain
+    view_name: symbol
+    xform:
+      - -1140
+      - -1580
+      - R0
+    bbox:
+      - -1144
+      - -1584
+      - -832
+      - -1416
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: measure
+      out: unused
+      outb: net05
+    params:
+      {}
+    is_primitive: false
+  XDUMSYNC<1:0>:
+    lib_name: bag3_digital
+    cell_name: flop_strongarm
+    view_name: symbol
+    xform:
+      - -780
+      - -1580
+      - R0
+    bbox:
+      - -784
+      - -1584
+      - -502
+      - -1356
+    connections:
+      VDD: <*2>VDD
+      VSS: <*2>VSS
+      clk: <*2>VSS
+      inn: dumn<0>,VSS
+      inp: dump<0>,VDD
+      outn: dumn<1:0>
+      outp: dump<1:0>
+      rstlb: <*2>VSS
+    params:
+      {}
+    is_primitive: false
+  XNC<3:0>:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - -400
+      - -1480
+      - R0
+    bbox:
+      - -410
+      - -1530
+      - -390
+      - -1476
+    connections:
+      noConn: unused,rstlb_n<1>,dump<1>,dumn<1>
+    params:
+      {}
+    is_primitive: true
+  XSYNC<1:0>:
+    lib_name: bag3_digital
+    cell_name: flop_strongarm
+    view_name: symbol
+    xform:
+      - -780
+      - -1240
+      - R0
+    bbox:
+      - -784
+      - -1244
+      - -502
+      - -1016
+    connections:
+      VDD: <*2>VDD
+      VSS: <*2>VSS
+      clk: <*2>launch_buf
+      inn: rstlb_n<0>,VSS
+      inp: rstlb_p<0>,VDD
+      outn: rstlb_n<1:0>
+      outp: rstlb_p<1:0>
+      rstlb: <*2>rstb
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 60565
+  instance#:
+    - 0
+    - 19
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1571240901
+  net#:
+    - 0
+    - 7
+  pin#:
+    - 0
+    - 8
+  schGeometryLastUpdated:
+    - 0
+    - 60565
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 60565
+  _dbvCvTimeStamp:
+    - 0
+    - 60565
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_dcc_helper_core.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_dcc_helper_core.symbol.yaml
new file mode 100644
index 0000000..0f8919f
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dcc_helper_core.symbol.yaml
@@ -0,0 +1,666 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dcc_helper_core
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 344
+  - 264
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 156
+          - 256
+          - 164
+          - 264
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 156
+          - -4
+          - 164
+          - 4
+    stype: 2
+    ttype: 2
+  clk_dcd:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 56
+          - 4
+          - 64
+    stype: 0
+    ttype: 0
+  clk_out:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 336
+          - 66
+          - 344
+          - 74
+    stype: 0
+    ttype: 1
+  dcc_byp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 36
+          - 4
+          - 44
+    stype: 0
+    ttype: 0
+  launch:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 126
+          - 4
+          - 134
+    stype: 0
+    ttype: 0
+  measure:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 106
+          - 4
+          - 114
+    stype: 0
+    ttype: 0
+  rstlb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 156
+          - 4
+          - 164
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 170
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstlb
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - -4
+        - 120
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: measure
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 140
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: launch
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - 80
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_out
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 50
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dcc_byp
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 70
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_dcd
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 340
+        - 260
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 140
+        - 264
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 150
+        - 6
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 340
+        - 260
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 200
+        - 250
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 55
+        - 245
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 130
+        - 100
+        - 210
+        - 200
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 130
+        -
+          - 140
+          - 120
+        -
+          - 130
+          - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 190
+          - 220
+        -
+          - 190
+          - 240
+        -
+          - 170
+          - 230
+        -
+          - 190
+          - 220
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 160
+        - 225
+        - 170
+        - 235
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 190
+          - 230
+        -
+          - 240
+          - 230
+        -
+          - 240
+          - 180
+        -
+          - 210
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 230
+        -
+          - 100
+          - 230
+        -
+          - 100
+          - 180
+        -
+          - 130
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 140
+        -
+          - 60
+          - 100
+        -
+          - 80
+          - 110
+        -
+          - 80
+          - 130
+        -
+          - 60
+          - 140
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 130
+        -
+          - 40
+          - 130
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 110
+        -
+          - 40
+          - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 120
+        -
+          - 80
+          - 120
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 70
+          - 105
+        -
+          - 70
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 70
+          - 100
+        -
+          - 70
+          - 80
+        -
+          - 80
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 80
+          - 80
+        -
+          - 240
+          - 80
+        -
+          - 240
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 260
+          - 90
+        -
+          - 260
+          - 50
+        -
+          - 280
+          - 60
+        -
+          - 280
+          - 80
+        -
+          - 260
+          - 90
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 260
+          - 80
+        -
+          - 240
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 260
+          - 60
+        -
+          - 240
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 55
+        -
+          - 270
+          - 50
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 70
+        -
+          - 340
+          - 70
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 60
+        -
+          - 0
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 160
+        -
+          - 0
+          - 160
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 130
+        -
+          - 0
+          - 130
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 110
+        -
+          - 0
+          - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 50
+        -
+          - 270
+          - 40
+        -
+          - 0
+          - 40
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1571179451
+  partName:
+    - 3
+    - aib_dcc_helper_core
+  pin#:
+    - 0
+    - 10
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("clk_out" "VDD" "VSS" "clk_dcd" "dcc_byp" "launch" "measure" "rstlb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 381
+  _dbvCvTimeStamp:
+    - 0
+    - 381
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_dcc_helper_core.yaml b/src/aib_ams/schematic/netlist_info/aib_dcc_helper_core.yaml
new file mode 100644
index 0000000..4e1635e
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dcc_helper_core.yaml
@@ -0,0 +1,1225 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dcc_helper_core
+view_name: schematic
+bbox:
+  - -1135
+  - -1580
+  - -280
+  - -620
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -1050
+            - -630
+            - R0
+          bbox:
+            - -1111
+            - -656
+            - -1040
+            - -620
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1075
+            - -630
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -1050
+            - -650
+            - R0
+          bbox:
+            - -1111
+            - -676
+            - -1040
+            - -640
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1075
+            - -650
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  clk_dcd:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -760
+            - R0
+          bbox:
+            - -1097
+            - -786
+            - -1040
+            - -750
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -760
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  clk_out:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -960
+            - -700
+            - R0
+          bbox:
+            - -960
+            - -726
+            - -903
+            - -690
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -935
+            - -700
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  dcc_byp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -780
+            - R0
+          bbox:
+            - -1097
+            - -806
+            - -1040
+            - -770
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -780
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  launch:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -720
+            - R0
+          bbox:
+            - -1097
+            - -746
+            - -1040
+            - -710
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -720
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  measure:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -740
+            - R0
+          bbox:
+            - -1097
+            - -766
+            - -1040
+            - -730
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -740
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  rstlb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -1040
+            - -700
+            - R0
+          bbox:
+            - -1097
+            - -726
+            - -1040
+            - -690
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -1070
+            - -700
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clkp
+      origin:
+        - -924
+        - -973
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clkp
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clkp
+      points:
+        -
+          - -960
+          - -980
+        -
+          - -920
+          - -980
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: measure,launch
+      origin:
+        - -924
+        - -928
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: measure,launch
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: measure,launch
+      width: 10
+      points:
+        -
+          - -960
+          - -940
+        -
+          - -920
+          - -940
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -807
+        - -856
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -800
+          - -860
+        -
+          - -800
+          - -820
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: clk_dcd,clkp
+      width: 10
+      points:
+        -
+          - -960
+          - -1200
+        -
+          - -920
+          - -1200
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clkn
+      points:
+        -
+          - -960
+          - -900
+        -
+          - -920
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -807
+        - -1024
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -487
+        - -1544
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_dcd,clkp
+      origin:
+        - -924
+        - -1188
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_dcd,clkp
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -800
+          - -1320
+        -
+          - -800
+          - -1280
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dcc_byp_buf
+      points:
+        -
+          - -960
+          - -1240
+        -
+          - -920
+          - -1240
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dcc_byp_buf
+      origin:
+        - -924
+        - -1233
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dcc_byp_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dcc_byp
+      points:
+        -
+          - -940
+          - -1460
+        -
+          - -900
+          - -1460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dcc_byp
+      origin:
+        - -904
+        - -1453
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dcc_byp
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -800
+          - -1060
+        -
+          - -800
+          - -1020
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -807
+        - -1284
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dcc_byp_bar
+      points:
+        -
+          - -960
+          - -1160
+        -
+          - -920
+          - -1160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dcc_byp_bar
+      origin:
+        - -924
+        - -1153
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dcc_byp_bar
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dcc_byp_bar
+      points:
+        -
+          - -700
+          - -1460
+        -
+          - -580
+          - -1460
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -480
+          - -1380
+        -
+          - -480
+          - -1340
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -487
+        - -1376
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_out
+      origin:
+        - -692
+        - -1193
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -800
+          - -1380
+        -
+          - -800
+          - -1340
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -807
+        - -1376
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -800
+          - -1580
+        -
+          - -800
+          - -1540
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -807
+        - -1544
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_out
+      points:
+        -
+          - -720
+          - -1200
+        -
+          - -660
+          - -1200
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dcc_byp_buf
+      points:
+        -
+          - -380
+          - -1460
+        -
+          - -340
+          - -1460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dcc_byp_bar
+      origin:
+        - -676
+        - -1453
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dcc_byp_bar
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clkn
+      origin:
+        - -924
+        - -893
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clkn
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: rstlb
+      origin:
+        - -564
+        - -963
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rstlb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: rstlb
+      points:
+        -
+          - -600
+          - -970
+        -
+          - -560
+          - -970
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clkn
+      origin:
+        - -564
+        - -873
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clkn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clkn
+      points:
+        -
+          - -600
+          - -880
+        -
+          - -560
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clkp
+      origin:
+        - -564
+        - -893
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clkp
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clkp
+      points:
+        -
+          - -600
+          - -900
+        -
+          - -560
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_dbl
+      origin:
+        - -664
+        - -933
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_dbl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_dbl
+      points:
+        -
+          - -720
+          - -940
+        -
+          - -560
+          - -940
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clkp
+      origin:
+        - -356
+        - -873
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clkp
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clkp
+      points:
+        -
+          - -360
+          - -880
+        -
+          - -320
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clkn
+      origin:
+        - -356
+        - -893
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clkn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clkn
+      points:
+        -
+          - -360
+          - -900
+        -
+          - -320
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -467
+        - -1024
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -460
+          - -1060
+        -
+          - -460
+          - -1020
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -467
+        - -796
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -460
+          - -800
+        -
+          - -460
+          - -760
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -807
+        - -1116
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -480
+          - -1580
+        -
+          - -480
+          - -1540
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dcc_byp_buf
+      origin:
+        - -376
+        - -1453
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dcc_byp_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -800
+          - -1120
+        -
+          - -800
+          - -1080
+instances:
+  XDIV:
+    lib_name: bag3_digital
+    cell_name: flop_strongarm
+    view_name: symbol
+    xform:
+      - -560
+      - -1020
+      - R0
+    bbox:
+      - -564
+      - -1024
+      - -282
+      - -796
+    connections:
+      VDD: VDD
+      VSS: VSS
+      clk: clk_dbl
+      inn: clkp
+      inp: clkn
+      outn: clkn
+      outp: clkp
+      rstlb: rstlb
+    params:
+      {}
+    is_primitive: false
+  XINV0:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - -900
+      - -1560
+      - R0
+    bbox:
+      - -904
+      - -1544
+      - -696
+      - -1376
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: dcc_byp
+      out: dcc_byp_bar
+    params:
+      {}
+    is_primitive: false
+  XINV1:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - -580
+      - -1560
+      - R0
+    bbox:
+      - -584
+      - -1544
+      - -376
+      - -1376
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: dcc_byp_bar
+      out: dcc_byp_buf
+    params:
+      {}
+    is_primitive: false
+  XMUXI:
+    lib_name: bag3_digital
+    cell_name: mux2to1_matched
+    view_name: symbol
+    xform:
+      - -920
+      - -1020
+      - R0
+    bbox:
+      - -924
+      - -1024
+      - -632
+      - -849
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: measure,launch
+      out: clk_dbl
+      sel: clkp
+      selb: clkn
+    params:
+      {}
+    is_primitive: false
+  XMUXO:
+    lib_name: bag3_digital
+    cell_name: mux2to1_matched
+    view_name: symbol
+    xform:
+      - -920
+      - -1280
+      - R0
+    bbox:
+      - -924
+      - -1284
+      - -632
+      - -1109
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: clk_dcd,clkp
+      out: clk_out
+      sel: dcc_byp_buf
+      selb: dcc_byp_bar
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 54560
+  instance#:
+    - 0
+    - 17
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1571206790
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 8
+  schGeometryLastUpdated:
+    - 0
+    - 54560
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 54560
+  _dbvCvTimeStamp:
+    - 0
+    - 54560
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_dlycell.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_dlycell.symbol.yaml
new file mode 100644
index 0000000..d24c37d
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dlycell.symbol.yaml
@@ -0,0 +1,922 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dlycell
+view_name: symbol
+bbox:
+  - 0
+  - 0
+  - 560
+  - 800
+terminals:
+  RSTb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 616
+          - 24
+          - 624
+    stype: 0
+    ttype: 0
+  SE:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 656
+          - 24
+          - 664
+    stype: 0
+    ttype: 0
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 776
+          - 244
+          - 784
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 16
+          - 244
+          - 24
+    stype: 2
+    ttype: 2
+  bk:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 696
+          - 24
+          - 704
+    stype: 0
+    ttype: 0
+  ci_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 536
+          - 76
+          - 544
+          - 84
+    stype: 0
+    ttype: 0
+  ck:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 576
+          - 24
+          - 584
+    stype: 0
+    ttype: 0
+  co_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 536
+          - 476
+          - 544
+          - 484
+    stype: 0
+    ttype: 1
+  in_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 496
+          - 24
+          - 504
+    stype: 0
+    ttype: 0
+  out_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 96
+          - 24
+          - 104
+    stype: 0
+    ttype: 1
+  si:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 676
+          - 24
+          - 684
+    stype: 0
+    ttype: 0
+  so:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 536
+          - 696
+          - 544
+          - 704
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 690
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: si
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 30
+          - 620
+        -
+          - 20
+          - 620
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 20
+          - 680
+        -
+          - 80
+          - 680
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 20
+          - 660
+        -
+          - 80
+          - 660
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 20
+          - 580
+        -
+          - 80
+          - 580
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 590
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ck
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 710
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 20
+          - 700
+        -
+          - 80
+          - 700
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 670
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: SE
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 20
+          - 620
+        -
+          - 80
+          - 620
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 630
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: RSTb
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 534
+        - 710
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: so
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 560
+        - 800
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 400
+        - 790
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 130
+        - 765
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 20
+        - 20
+        - 540
+        - 780
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 80
+          - 600
+        -
+          - 100
+          - 580
+        -
+          - 80
+          - 560
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 330
+          - 100
+        -
+          - 20
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 500
+        -
+          - 20
+          - 500
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 460
+        -
+          - 350
+          - 460
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 460
+        -
+          - 250
+          - 200
+        -
+          - 350
+          - 200
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 290
+          - 500
+        -
+          - 290
+          - 380
+        -
+          - 350
+          - 380
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 330
+        - 90
+        - 350
+        - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 390
+        -
+          - 350
+          - 330
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 250
+        -
+          - 350
+          - 190
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 510
+        -
+          - 350
+          - 450
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 1.6814535479687922
+      ang_stop: 4.6017317592107938
+      bbox:
+        - 350
+        - 70
+        - 408
+        - 130
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 352
+        - 330
+        - 410
+        - 390
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 352
+        - 450
+        - 410
+        - 510
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 352
+        - 190
+        - 410
+        - 250
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 410
+          - 130
+        -
+          - 410
+          - 70
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 410
+        - 210
+        - 430
+        - 230
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 410
+        - 350
+        - 430
+        - 370
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 410
+        - 470
+        - 430
+        - 490
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 430
+          - 360
+        -
+          - 460
+          - 360
+        -
+          - 460
+          - 320
+        -
+          - 320
+          - 260
+        -
+          - 320
+          - 240
+        -
+          - 350
+          - 240
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 430
+          - 220
+        -
+          - 460
+          - 220
+        -
+          - 460
+          - 260
+        -
+          - 320
+          - 320
+        -
+          - 320
+          - 340
+        -
+          - 350
+          - 340
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 410
+          - 120
+        -
+          - 500
+          - 120
+        -
+          - 500
+          - 360
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 360
+        -
+          - 500
+          - 360
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 540
+          - 80
+        -
+          - 410
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 430
+          - 480
+        -
+          - 540
+          - 480
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 80
+          - 710
+        -
+          - 80
+          - 560
+        -
+          - 210
+          - 560
+        -
+          - 210
+          - 720
+        -
+          - 80
+          - 720
+        -
+          - 80
+          - 710
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 450
+        -
+          - 250
+          - 690
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 210
+          - 690
+        -
+          - 300
+          - 690
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 110
+      alignment: 7
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 510
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: in_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 26
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 774
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 534
+        - 490
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: co_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 534
+        - 90
+      alignment: 1
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ci_p
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 300
+          - 730
+        -
+          - 300
+          - 660
+        -
+          - 360
+          - 700
+        -
+          - 300
+          - 730
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 360
+          - 700
+        -
+          - 540
+          - 700
+instances:
+  {}
+props:
+  interfaceLastChanged:
+    - 4
+    - time_val: 1568921273
+  partName:
+    - 3
+    - aib_dlycell
+  pin#:
+    - 0
+    - 18
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("co_p" "out_p" "so" "VDD" "VSS" "RSTb" "SE" "bk" "ci_p" "ck" "in_p" "si")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 714
+  _dbvCvTimeStamp:
+    - 0
+    - 714
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_dlycell.yaml b/src/aib_ams/schematic/netlist_info/aib_dlycell.yaml
new file mode 100644
index 0000000..3389012
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dlycell.yaml
@@ -0,0 +1,1410 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dlycell
+view_name: schematic
+bbox:
+  - -507
+  - -920
+  - 908
+  - 320
+terminals:
+  RSTb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -290
+            - R0
+          bbox:
+            - -497
+            - -316
+            - -440
+            - -280
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -290
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  SE:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -250
+            - R0
+          bbox:
+            - -497
+            - -276
+            - -440
+            - -240
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -250
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 290
+            - 310
+            - R0
+          bbox:
+            - 229
+            - 284
+            - 300
+            - 320
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 265
+            - 310
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 290
+            - 250
+            - R0
+          bbox:
+            - 229
+            - 224
+            - 300
+            - 260
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 265
+            - 250
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  bk:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -90
+            - R0
+          bbox:
+            - -497
+            - -116
+            - -440
+            - -80
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -90
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  ci_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -130
+            - R0
+          bbox:
+            - -497
+            - -156
+            - -440
+            - -120
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -130
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  ck:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -170
+            - R0
+          bbox:
+            - -497
+            - -196
+            - -440
+            - -160
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -170
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  co_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 840
+            - -40
+            - R0
+          bbox:
+            - 840
+            - -66
+            - 897
+            - -30
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 865
+            - -40
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  in_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -50
+            - R0
+          bbox:
+            - -497
+            - -76
+            - -440
+            - -40
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -50
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  out_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 840
+            - 0
+            - R0
+          bbox:
+            - 840
+            - -26
+            - 897
+            - 10
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 865
+            - 0
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  si:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -210
+            - R0
+          bbox:
+            - -497
+            - -236
+            - -440
+            - -200
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -210
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  so:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 840
+            - -80
+            - R0
+          bbox:
+            - 840
+            - -106
+            - 897
+            - -70
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 865
+            - -80
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: SE
+      origin:
+        - 16
+        - 37
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: SE
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: si
+      points:
+        -
+          - -20
+          - 10
+        -
+          - 20
+          - 10
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 120
+          - -90
+        -
+          - 120
+          - -50
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: so
+      points:
+        -
+          - -270
+          - -290
+        -
+          - -230
+          - -290
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: so
+      origin:
+        - -234
+        - -283
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: so
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: RSTb
+      points:
+        -
+          - 0
+          - 50
+        -
+          - 20
+          - 50
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -137
+        - -206
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_ci
+      points:
+        -
+          - 370
+          - -750
+        -
+          - 370
+          - -710
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_ci
+      origin:
+        - 363
+        - -746
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_ci
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: si
+      origin:
+        - 16
+        - 17
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: si
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 113
+        - -54
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 120
+          - 170
+        -
+          - 120
+          - 210
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 113
+        - 174
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk1
+      points:
+        -
+          - 220
+          - 90
+        -
+          - 290
+          - 90
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: bk1
+      origin:
+        - 254
+        - 97
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk1
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_in
+      points:
+        -
+          - 370
+          - -500
+        -
+          - 370
+          - -460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_in
+      origin:
+        - 363
+        - -496
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_in
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_out
+      points:
+        -
+          - 370
+          - -620
+        -
+          - 370
+          - -580
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: RSTb
+      origin:
+        - 10
+        - 57
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: RSTb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk
+      points:
+        -
+          - -20
+          - 90
+        -
+          - 20
+          - 90
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: bk
+      origin:
+        - 16
+        - 97
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: SE
+      points:
+        -
+          - -10
+          - 30
+        -
+          - 20
+          - 30
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_out
+      origin:
+        - 363
+        - -616
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: ck
+      points:
+        -
+          - -20
+          - 70
+        -
+          - 20
+          - 70
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: ck
+      origin:
+        - 16
+        - 77
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ck
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 590
+          - -390
+        -
+          - 590
+          - -350
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 583
+        - -354
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 590
+          - 170
+        -
+          - 590
+          - 210
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 583
+        - 174
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: co_p
+      points:
+        -
+          - 710
+          - 110
+        -
+          - 750
+          - 110
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: co_p
+      origin:
+        - 714
+        - 117
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: co_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: out_p
+      points:
+        -
+          - 330
+          - -270
+        -
+          - 370
+          - -270
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: out_p
+      origin:
+        - 366
+        - -263
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: ci_p
+      points:
+        -
+          - 710
+          - -290
+        -
+          - 750
+          - -290
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: ci_p
+      origin:
+        - 714
+        - -283
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ci_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: in_p
+      points:
+        -
+          - 330
+          - 130
+        -
+          - 370
+          - 130
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: in_p
+      origin:
+        - 366
+        - 137
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: in_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -130
+          - -410
+        -
+          - -130
+          - -370
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -137
+        - -374
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 110
+          - -410
+        -
+          - 110
+          - -370
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 103
+        - -374
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -130
+          - -210
+        -
+          - -130
+          - -170
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 103
+        - -226
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk1
+      points:
+        -
+          - 290
+          - 90
+        -
+          - 370
+          - 90
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_co
+      points:
+        -
+          - 370
+          - -870
+        -
+          - 370
+          - -830
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: so_mid
+      points:
+        -
+          - -30
+          - -290
+        -
+          - 10
+          - -290
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: so_mid
+      origin:
+        - 6
+        - -283
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: so_mid
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 110
+          - -210
+        -
+          - 110
+          - -170
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk1
+      points:
+        -
+          - 210
+          - -290
+        -
+          - 290
+          - -290
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk1
+      points:
+        -
+          - 290
+          - -290
+        -
+          - 290
+          - 90
+  -
+    - 4
+    - layer: 228
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 285
+        - 85
+        - 295
+        - 95
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_co
+      origin:
+        - 363
+        - -866
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_co
+instances:
+  XCore:
+    lib_name: aib_ams
+    cell_name: aib_dlycell_core
+    view_name: symbol
+    xform:
+      - 350
+      - -370
+      - R0
+    bbox:
+      - 350
+      - -370
+      - 738
+      - 190
+    connections:
+      VDD: VDD
+      VSS: VSS
+      bk1: bk1
+      ci_p: ci_p
+      co_p: co_p
+      in_p: in_p
+      out_p: out_p
+    params:
+      {}
+    is_primitive: false
+  XDFF:
+    lib_name: bag3_digital
+    cell_name: flop_scan_rstlb
+    view_name: symbol
+    xform:
+      - 20
+      - -50
+      - R0
+    bbox:
+      - 16
+      - -54
+      - 298
+      - 174
+    connections:
+      VDD: VDD
+      VSS: VSS
+      clk: ck
+      in: bk
+      out: bk1
+      rstlb: RSTb
+      scan_en: SE
+      scan_in: si
+    params:
+      {}
+    is_primitive: false
+  XNC_ci:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 370
+      - -750
+      - R0
+    bbox:
+      - 360
+      - -800
+      - 380
+      - -746
+    connections:
+      noConn: NC_ci
+    params:
+      {}
+    is_primitive: true
+  XNC_co:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 370
+      - -870
+      - R0
+    bbox:
+      - 360
+      - -920
+      - 380
+      - -866
+    connections:
+      noConn: NC_co
+    params:
+      {}
+    is_primitive: true
+  XNC_in:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 370
+      - -500
+      - R0
+    bbox:
+      - 360
+      - -550
+      - 380
+      - -496
+    connections:
+      noConn: NC_in
+    params:
+      {}
+    is_primitive: true
+  XNC_out:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 370
+      - -620
+      - R0
+    bbox:
+      - 360
+      - -670
+      - 380
+      - -616
+    connections:
+      noConn: NC_out
+    params:
+      {}
+    is_primitive: true
+  XSoInv0:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - -30
+      - -390
+      - MY
+    bbox:
+      - -234
+      - -374
+      - -26
+      - -206
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: so_mid
+      out: so
+    params:
+      {}
+    is_primitive: false
+  XSoInv1:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - 210
+      - -390
+      - MY
+    bbox:
+      - 6
+      - -374
+      - 214
+      - -206
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: bk1
+      out: so_mid
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 6107
+  instance#:
+    - 0
+    - 3
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1572904895
+  net#:
+    - 0
+    - 2
+  pin#:
+    - 0
+    - 13
+  schGeometryLastUpdated:
+    - 0
+    - 6107
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 6107
+  _dbvCvTimeStamp:
+    - 0
+    - 6107
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_dlycell_core.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_dlycell_core.symbol.yaml
new file mode 100644
index 0000000..9f5705b
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dlycell_core.symbol.yaml
@@ -0,0 +1,612 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dlycell_core
+view_name: symbol
+bbox:
+  - 0
+  - 0
+  - 388
+  - 560
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 536
+          - 244
+          - 544
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 16
+          - 244
+          - 24
+    stype: 2
+    ttype: 2
+  bk1:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 456
+          - 24
+          - 464
+    stype: 0
+    ttype: 0
+  ci_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 356
+          - 76
+          - 364
+          - 84
+    stype: 0
+    ttype: 0
+  co_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 356
+          - 476
+          - 364
+          - 484
+    stype: 0
+    ttype: 1
+  in_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 496
+          - 24
+          - 504
+    stype: 0
+    ttype: 0
+  out_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 96
+          - 24
+          - 104
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 510
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: in_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 110
+      alignment: 7
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 354
+        - 90
+      alignment: 1
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ci_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 470
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk1
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 1.6814535479687922
+      ang_stop: 4.6017317592107938
+      bbox:
+        - 170
+        - 70
+        - 228
+        - 130
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 150
+        - 90
+        - 170
+        - 110
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 354
+        - 490
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: co_p
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 150
+          - 100
+        -
+          - 20
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 534
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 230
+          - 130
+        -
+          - 230
+          - 70
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 26
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 380
+        - 560
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 260
+        - 550
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 100
+        - 525
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 20
+        - 20
+        - 360
+        - 540
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 220
+        -
+          - 280
+          - 220
+        -
+          - 280
+          - 260
+        -
+          - 140
+          - 320
+        -
+          - 140
+          - 340
+        -
+          - 170
+          - 340
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 172
+        - 190
+        - 230
+        - 250
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 170
+          - 510
+        -
+          - 170
+          - 450
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 170
+          - 250
+        -
+          - 170
+          - 190
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 500
+        -
+          - 110
+          - 380
+        -
+          - 170
+          - 380
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 172
+        - 450
+        - 230
+        - 510
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 230
+        - 470
+        - 250
+        - 490
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 170
+          - 390
+        -
+          - 170
+          - 330
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 170
+          - 460
+        -
+          - 20
+          - 460
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 172
+        - 330
+        - 230
+        - 390
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 230
+        - 350
+        - 250
+        - 370
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 230
+        - 210
+        - 250
+        - 230
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 230
+          - 120
+        -
+          - 320
+          - 120
+        -
+          - 320
+          - 360
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 70
+          - 460
+        -
+          - 70
+          - 200
+        -
+          - 170
+          - 200
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 360
+        -
+          - 280
+          - 360
+        -
+          - 280
+          - 320
+        -
+          - 140
+          - 260
+        -
+          - 140
+          - 240
+        -
+          - 170
+          - 240
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 170
+          - 500
+        -
+          - 20
+          - 500
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 360
+        -
+          - 320
+          - 360
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 360
+          - 80
+        -
+          - 230
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 480
+        -
+          - 360
+          - 480
+instances:
+  {}
+props:
+  interfaceLastChanged:
+    - 4
+    - time_val: 1567633246
+  partName:
+    - 3
+    - aib_dlycell_core
+  pin#:
+    - 0
+    - 12
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("co_p" "out_p" "VDD" "VSS" "bk1" "ci_p" "in_p")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 590
+  _dbvCvTimeStamp:
+    - 0
+    - 590
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_dlycell_core.yaml b/src/aib_ams/schematic/netlist_info/aib_dlycell_core.yaml
new file mode 100644
index 0000000..d68f2cd
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dlycell_core.yaml
@@ -0,0 +1,879 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dlycell_core
+view_name: schematic
+bbox:
+  - -422
+  - -310
+  - 888
+  - 470
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -220
+            - 370
+            - R0
+          bbox:
+            - -281
+            - 344
+            - -210
+            - 380
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -245
+            - 370
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -220
+            - 340
+            - R0
+          bbox:
+            - -281
+            - 314
+            - -210
+            - 350
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -245
+            - 340
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  bk1:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -360
+            - 170
+            - R0
+          bbox:
+            - -417
+            - 144
+            - -360
+            - 180
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -390
+            - 170
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  ci_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -360
+            - 130
+            - R0
+          bbox:
+            - -417
+            - 104
+            - -360
+            - 140
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -390
+            - 130
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  co_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 820
+            - 120
+            - R0
+          bbox:
+            - 820
+            - 94
+            - 877
+            - 130
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 845
+            - 120
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  in_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -360
+            - 210
+            - R0
+          bbox:
+            - -417
+            - 184
+            - -360
+            - 220
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -390
+            - 210
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  out_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 820
+            - 160
+            - R0
+          bbox:
+            - 820
+            - 134
+            - 877
+            - 170
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 845
+            - 160
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 90
+          - -50
+        -
+          - 90
+          - -10
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 83
+        - -14
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 90
+          - 150
+        -
+          - 90
+          - 190
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 83
+        - 154
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: sr1_o
+      points:
+        -
+          - 210
+          - 70
+        -
+          - 250
+          - 70
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sr1_o
+      origin:
+        - 214
+        - 77
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sr1_o
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: sr0_o,in_p
+      width: 10
+      points:
+        -
+          - -50
+          - 70
+        -
+          - -10
+          - 70
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sr0_o,in_p
+      origin:
+        - -14
+        - 82
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sr0_o,in_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 90
+          - -310
+        -
+          - 90
+          - -270
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 83
+        - -274
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 90
+          - -110
+        -
+          - 90
+          - -70
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 83
+        - -106
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: sr0_o
+      points:
+        -
+          - 210
+          - -190
+        -
+          - 250
+          - -190
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sr0_o
+      origin:
+        - 214
+        - -183
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sr0_o
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: sr1_o,bk1
+      width: 10
+      points:
+        -
+          - -50
+          - -190
+        -
+          - -10
+          - -190
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sr1_o,bk1
+      origin:
+        - -14
+        - -178
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sr1_o,bk1
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 520
+          - -50
+        -
+          - 520
+          - -10
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 513
+        - -14
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 520
+          - 150
+        -
+          - 520
+          - 190
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 513
+        - 154
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: out_p
+      points:
+        -
+          - 640
+          - 70
+        -
+          - 680
+          - 70
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: out_p
+      origin:
+        - 644
+        - 77
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out_p
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: sr1_o,ci_p
+      width: 10
+      points:
+        -
+          - 380
+          - 70
+        -
+          - 420
+          - 70
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sr1_o,ci_p
+      origin:
+        - 416
+        - 82
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sr1_o,ci_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 90
+          - 230
+        -
+          - 90
+          - 270
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 83
+        - 266
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 90
+          - 430
+        -
+          - 90
+          - 470
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 83
+        - 434
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: co_p
+      points:
+        -
+          - 210
+          - 350
+        -
+          - 250
+          - 350
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: co_p
+      origin:
+        - 214
+        - 357
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: co_p
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: bk1,in_p
+      width: 10
+      points:
+        -
+          - -50
+          - 350
+        -
+          - -10
+          - 350
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: bk1,in_p
+      origin:
+        - -14
+        - 362
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk1,in_p
+instances:
+  XNAND_SR0:
+    lib_name: bag3_digital
+    cell_name: nand
+    view_name: symbol
+    xform:
+      - -10
+      - -270
+      - R0
+    bbox:
+      - -14
+      - -274
+      - 288
+      - -106
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: sr1_o,bk1
+      out: sr0_o
+    params:
+      {}
+    is_primitive: false
+  XNAND_SR1:
+    lib_name: bag3_digital
+    cell_name: nand
+    view_name: symbol
+    xform:
+      - -10
+      - -10
+      - R0
+    bbox:
+      - -14
+      - -14
+      - 288
+      - 154
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: sr0_o,in_p
+      out: sr1_o
+    params:
+      {}
+    is_primitive: false
+  XNAND_in:
+    lib_name: bag3_digital
+    cell_name: nand
+    view_name: symbol
+    xform:
+      - -10
+      - 270
+      - R0
+    bbox:
+      - -14
+      - 266
+      - 288
+      - 434
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: bk1,in_p
+      out: co_p
+    params:
+      {}
+    is_primitive: false
+  XNAND_out:
+    lib_name: bag3_digital
+    cell_name: nand
+    view_name: symbol
+    xform:
+      - 420
+      - -10
+      - R0
+    bbox:
+      - 416
+      - -14
+      - 718
+      - 154
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: sr1_o,ci_p
+      out: out_p
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 4973
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1567642119
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 7
+  schGeometryLastUpdated:
+    - 0
+    - 4973
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 4973
+  _dbvCvTimeStamp:
+    - 0
+    - 4973
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_dlycell_no_flop.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_dlycell_no_flop.symbol.yaml
new file mode 100644
index 0000000..2f8a860
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dlycell_no_flop.symbol.yaml
@@ -0,0 +1,654 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dlycell_no_flop
+view_name: symbol
+bbox:
+  - 0
+  - 0
+  - 560
+  - 580
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 556
+          - 244
+          - 564
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 16
+          - 244
+          - 24
+    stype: 2
+    ttype: 2
+  bk:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 456
+          - 24
+          - 464
+    stype: 0
+    ttype: 0
+  ci_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 536
+          - 76
+          - 544
+          - 84
+    stype: 0
+    ttype: 0
+  co_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 536
+          - 476
+          - 544
+          - 484
+    stype: 0
+    ttype: 1
+  in_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 496
+          - 24
+          - 504
+    stype: 0
+    ttype: 0
+  out_p:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 16
+          - 96
+          - 24
+          - 104
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 470
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 560
+        - 580
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 400
+        - 570
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 130
+        - 555
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 20
+        - 20
+        - 540
+        - 560
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 460
+        -
+          - 20
+          - 460
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 330
+          - 100
+        -
+          - 20
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 500
+        -
+          - 20
+          - 500
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 460
+        -
+          - 350
+          - 460
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 460
+        -
+          - 250
+          - 200
+        -
+          - 350
+          - 200
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 290
+          - 500
+        -
+          - 290
+          - 380
+        -
+          - 350
+          - 380
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 330
+        - 90
+        - 350
+        - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 390
+        -
+          - 350
+          - 330
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 250
+        -
+          - 350
+          - 190
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 510
+        -
+          - 350
+          - 450
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 1.6814535479687922
+      ang_stop: 4.6017317592107938
+      bbox:
+        - 350
+        - 70
+        - 408
+        - 130
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 352
+        - 330
+        - 410
+        - 390
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 352
+        - 450
+        - 410
+        - 510
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 352
+        - 190
+        - 410
+        - 250
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 410
+          - 130
+        -
+          - 410
+          - 70
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 410
+        - 210
+        - 430
+        - 230
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 410
+        - 350
+        - 430
+        - 370
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 410
+        - 470
+        - 430
+        - 490
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 430
+          - 360
+        -
+          - 460
+          - 360
+        -
+          - 460
+          - 320
+        -
+          - 320
+          - 260
+        -
+          - 320
+          - 240
+        -
+          - 350
+          - 240
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 430
+          - 220
+        -
+          - 460
+          - 220
+        -
+          - 460
+          - 260
+        -
+          - 320
+          - 320
+        -
+          - 320
+          - 340
+        -
+          - 350
+          - 340
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 410
+          - 120
+        -
+          - 500
+          - 120
+        -
+          - 500
+          - 360
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 360
+        -
+          - 500
+          - 360
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 540
+          - 80
+        -
+          - 410
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 430
+          - 480
+        -
+          - 540
+          - 480
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 180
+          - 460
+        -
+          - 250
+          - 460
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 110
+      alignment: 7
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 26
+        - 510
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: in_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 26
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 554
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 534
+        - 490
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: co_p
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 534
+        - 90
+      alignment: 1
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ci_p
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 490
+        -
+          - 120
+          - 420
+        -
+          - 180
+          - 460
+        -
+          - 120
+          - 490
+instances:
+  {}
+props:
+  interfaceLastChanged:
+    - 4
+    - time_val: 1570145524
+  partName:
+    - 3
+    - aib_dlycell_no_flop
+  pin#:
+    - 0
+    - 18
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("co_p" "out_p" "VDD" "VSS" "bk" "ci_p" "in_p")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 816
+  _dbvCvTimeStamp:
+    - 0
+    - 816
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_dlycell_no_flop.yaml b/src/aib_ams/schematic/netlist_info/aib_dlycell_no_flop.yaml
new file mode 100644
index 0000000..f381310
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dlycell_no_flop.yaml
@@ -0,0 +1,945 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dlycell_no_flop
+view_name: schematic
+bbox:
+  - -502
+  - -910
+  - 908
+  - 320
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 290
+            - 310
+            - R0
+          bbox:
+            - 229
+            - 284
+            - 300
+            - 320
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 265
+            - 310
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 290
+            - 250
+            - R0
+          bbox:
+            - 229
+            - 224
+            - 300
+            - 260
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 265
+            - 250
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  bk:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -90
+            - R0
+          bbox:
+            - -497
+            - -116
+            - -440
+            - -80
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -90
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  ci_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -130
+            - R0
+          bbox:
+            - -497
+            - -156
+            - -440
+            - -120
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -130
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  co_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 840
+            - -40
+            - R0
+          bbox:
+            - 840
+            - -66
+            - 897
+            - -30
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 865
+            - -40
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  in_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -440
+            - -50
+            - R0
+          bbox:
+            - -497
+            - -76
+            - -440
+            - -40
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -470
+            - -50
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  out_p:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 840
+            - 0
+            - R0
+          bbox:
+            - 840
+            - -26
+            - 897
+            - 10
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 865
+            - 0
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -130
+          - 170
+        -
+          - -130
+          - 210
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: bk_mid
+      origin:
+        - 6
+        - 97
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk_mid
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_co
+      points:
+        -
+          - 370
+          - -860
+        -
+          - 370
+          - -820
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_in
+      origin:
+        - 363
+        - -486
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_in
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_ci
+      points:
+        -
+          - 370
+          - -740
+        -
+          - 370
+          - -700
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -137
+        - 174
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -130
+          - -30
+        -
+          - -130
+          - 10
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 110
+          - -30
+        -
+          - 110
+          - 10
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: bk1
+      origin:
+        - 254
+        - 97
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk1
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk
+      points:
+        -
+          - -270
+          - 90
+        -
+          - -230
+          - 90
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: bk
+      origin:
+        - -234
+        - 97
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -137
+        - 6
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 103
+        - 174
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk_mid
+      points:
+        -
+          - -30
+          - 90
+        -
+          - 10
+          - 90
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 590
+          - -390
+        -
+          - 590
+          - -350
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 583
+        - -354
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 590
+          - 170
+        -
+          - 590
+          - 210
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 583
+        - 174
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: co_p
+      points:
+        -
+          - 710
+          - 110
+        -
+          - 750
+          - 110
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: co_p
+      origin:
+        - 714
+        - 117
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: co_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: out_p
+      points:
+        -
+          - 330
+          - -270
+        -
+          - 370
+          - -270
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: out_p
+      origin:
+        - 366
+        - -263
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: ci_p
+      points:
+        -
+          - 710
+          - -290
+        -
+          - 750
+          - -290
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: ci_p
+      origin:
+        - 714
+        - -283
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ci_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: in_p
+      points:
+        -
+          - 330
+          - 130
+        -
+          - 370
+          - 130
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: in_p
+      origin:
+        - 366
+        - 137
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: in_p
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_ci
+      origin:
+        - 363
+        - -736
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_ci
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk1
+      points:
+        -
+          - 210
+          - 90
+        -
+          - 370
+          - 90
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_out
+      origin:
+        - 363
+        - -606
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_out
+      points:
+        -
+          - 370
+          - -610
+        -
+          - 370
+          - -570
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_co
+      origin:
+        - 363
+        - -856
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_co
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_in
+      points:
+        -
+          - 370
+          - -490
+        -
+          - 370
+          - -450
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 110
+          - 170
+        -
+          - 110
+          - 210
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 103
+        - 6
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+instances:
+  XBKInv0:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - -230
+      - -10
+      - R0
+    bbox:
+      - -234
+      - 6
+      - -26
+      - 174
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: bk
+      out: bk_mid
+    params:
+      {}
+    is_primitive: false
+  XBKInv1:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - 10
+      - -10
+      - R0
+    bbox:
+      - 6
+      - 6
+      - 214
+      - 174
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: bk_mid
+      out: bk1
+    params:
+      {}
+    is_primitive: false
+  XCore:
+    lib_name: aib_ams
+    cell_name: aib_dlycell_core
+    view_name: symbol
+    xform:
+      - 350
+      - -370
+      - R0
+    bbox:
+      - 350
+      - -370
+      - 738
+      - 190
+    connections:
+      VDD: VDD
+      VSS: VSS
+      bk1: bk1
+      ci_p: ci_p
+      co_p: co_p
+      in_p: in_p
+      out_p: out_p
+    params:
+      {}
+    is_primitive: false
+  XNC_ci:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 370
+      - -740
+      - R0
+    bbox:
+      - 360
+      - -790
+      - 380
+      - -736
+    connections:
+      noConn: NC_ci
+    params:
+      {}
+    is_primitive: true
+  XNC_co:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 370
+      - -860
+      - R0
+    bbox:
+      - 360
+      - -910
+      - 380
+      - -856
+    connections:
+      noConn: NC_co
+    params:
+      {}
+    is_primitive: true
+  XNC_in:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 370
+      - -490
+      - R0
+    bbox:
+      - 360
+      - -540
+      - 380
+      - -486
+    connections:
+      noConn: NC_in
+    params:
+      {}
+    is_primitive: true
+  XNC_out:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 370
+      - -610
+      - R0
+    bbox:
+      - 360
+      - -660
+      - 380
+      - -606
+    connections:
+      noConn: NC_out
+    params:
+      {}
+    is_primitive: true
+props:
+  connectivityLastUpdated:
+    - 0
+    - 6284
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1573758512
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 13
+  schGeometryLastUpdated:
+    - 0
+    - 6284
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 6284
+  _dbvCvTimeStamp:
+    - 0
+    - 6284
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_dlyline.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_dlyline.symbol.yaml
new file mode 100644
index 0000000..bcf5b1e
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dlyline.symbol.yaml
@@ -0,0 +1,600 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dlyline
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 314
+  - 294
+terminals:
+  CLKIN:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 156
+          - 4
+          - 164
+    stype: 0
+    ttype: 0
+  RSTb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 116
+          - 4
+          - 124
+    stype: 0
+    ttype: 0
+  SOOUT:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 306
+          - 156
+          - 314
+          - 164
+    stype: 0
+    ttype: 1
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 156
+          - 286
+          - 164
+          - 294
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 156
+          - -4
+          - 164
+          - 4
+    stype: 2
+    ttype: 2
+  a:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 306
+          - 196
+          - 314
+          - 204
+    stype: 0
+    ttype: 1
+  b:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 196
+          - 4
+          - 204
+    stype: 0
+    ttype: 0
+  bk:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 76
+          - 4
+          - 84
+    stype: 0
+    ttype: 0
+  dlyin:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 176
+          - 4
+          - 184
+    stype: 0
+    ttype: 0
+  dlyout:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 306
+          - 176
+          - 314
+          - 184
+    stype: 0
+    ttype: 1
+  iSE:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 136
+          - 4
+          - 144
+    stype: 0
+    ttype: 0
+  iSI:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 96
+          - 4
+          - 104
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 100
+        -
+          - 40
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 100
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iSI
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 120
+        -
+          - 40
+          - 120
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 120
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: RSTb
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 140
+        -
+          - 40
+          - 140
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 140
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iSE
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 160
+        -
+          - 40
+          - 160
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 160
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: CLKIN
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 180
+        -
+          - 40
+          - 180
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 180
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dlyin
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 200
+        -
+          - 40
+          - 200
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 200
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: b
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 310
+          - 180
+        -
+          - 270
+          - 180
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 264
+        - 180
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dlyout
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 310
+          - 200
+        -
+          - 270
+          - 200
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 264
+        - 200
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 290
+        -
+          - 160
+          - 250
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 160
+        - 244
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 0
+        -
+          - 160
+          - 40
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 160
+        - 46
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 310
+        - 290
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 180
+        - 260
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 95
+        - 235
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - 40
+        - 270
+        - 250
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 80
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 80
+        -
+          - 40
+          - 80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 264
+        - 160
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: SOOUT
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 310
+          - 160
+        -
+          - 270
+          - 160
+instances:
+  {}
+props:
+  interfaceLastChanged:
+    - 4
+    - time_val: 1569253956
+  partName:
+    - 3
+    - aib_dlyline
+  pin#:
+    - 0
+    - 12
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("a" "SOOUT" "VDD" "VSS" "b" "dlyin" "CLKIN" "iSE" "RSTb" "iSI" "bk" "dlyout")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 453
+  _dbvCvTimeStamp:
+    - 0
+    - 453
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_dlyline.yaml b/src/aib_ams/schematic/netlist_info/aib_dlyline.yaml
new file mode 100644
index 0000000..e4846d2
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_dlyline.yaml
@@ -0,0 +1,1400 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_dlyline
+view_name: schematic
+bbox:
+  - -473
+  - -1390
+  - 425
+  - 805
+terminals:
+  CLKIN:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -400
+            - 250
+            - R0
+          bbox:
+            - -457
+            - 224
+            - -400
+            - 260
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -430
+            - 250
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  RSTb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -400
+            - 170
+            - R0
+          bbox:
+            - -457
+            - 144
+            - -400
+            - 180
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -430
+            - 170
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  SOOUT:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -320
+            - 250
+            - R0
+          bbox:
+            - -320
+            - 224
+            - -263
+            - 260
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -295
+            - 250
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -340
+            - 430
+            - R0
+          bbox:
+            - -401
+            - 404
+            - -330
+            - 440
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -365
+            - 430
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -340
+            - 390
+            - R0
+          bbox:
+            - -401
+            - 364
+            - -330
+            - 400
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -365
+            - 390
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  a:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -320
+            - 330
+            - R0
+          bbox:
+            - -320
+            - 304
+            - -263
+            - 340
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -295
+            - 330
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  b:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -400
+            - 330
+            - R0
+          bbox:
+            - -457
+            - 304
+            - -400
+            - 340
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -430
+            - 330
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  bk:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -400
+            - 90
+            - R0
+          bbox:
+            - -457
+            - 64
+            - -400
+            - 100
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -430
+            - 90
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  dlyin:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -400
+            - 290
+            - R0
+          bbox:
+            - -457
+            - 264
+            - -400
+            - 300
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -430
+            - 290
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  dlyout:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -320
+            - 290
+            - R0
+          bbox:
+            - -320
+            - 264
+            - -263
+            - 300
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -295
+            - 290
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  iSE:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -400
+            - 210
+            - R0
+          bbox:
+            - -457
+            - 184
+            - -400
+            - 220
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -430
+            - 210
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  iSI:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -400
+            - 130
+            - R0
+          bbox:
+            - -457
+            - 104
+            - -400
+            - 140
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -430
+            - 130
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dlyin
+      points:
+        -
+          - -220
+          - 470
+        -
+          - -160
+          - 470
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: bk
+      points:
+        -
+          - -220
+          - 670
+        -
+          - -160
+          - 670
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iSI
+      points:
+        -
+          - -220
+          - 650
+        -
+          - -160
+          - 650
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iSE
+      points:
+        -
+          - -220
+          - 630
+        -
+          - -160
+          - 630
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: RSTb
+      points:
+        -
+          - -220
+          - 590
+        -
+          - -160
+          - 590
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: CLKIN
+      points:
+        -
+          - -220
+          - 550
+        -
+          - -160
+          - 550
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: SOOUT
+      points:
+        -
+          - 360
+          - 670
+        -
+          - 420
+          - 670
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dlyout
+      points:
+        -
+          - -220
+          - 70
+        -
+          - -160
+          - 70
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 60
+          - 750
+        -
+          - 60
+          - 800
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 60
+          - -60
+        -
+          - 60
+          - -10
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 53
+        - 790
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 53
+        - -40
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dlyin
+      origin:
+        - -200
+        - 477
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dlyin
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dlyout
+      origin:
+        - -200
+        - 77
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dlyout
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: a
+      points:
+        -
+          - 360
+          - 450
+        -
+          - 420
+          - 450
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: b
+      points:
+        -
+          - 360
+          - 50
+        -
+          - 420
+          - 50
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: a
+      origin:
+        - 390
+        - 457
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: b
+      origin:
+        - 390
+        - 57
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: b
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: bk
+      origin:
+        - -200
+        - 677
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: bk
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iSI
+      origin:
+        - -200
+        - 657
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iSI
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iSE
+      origin:
+        - -200
+        - 637
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iSE
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: RSTb
+      origin:
+        - -210
+        - 597
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: RSTb
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: CLKIN
+      origin:
+        - -210
+        - 557
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: CLKIN
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: SOOUT
+      origin:
+        - 400
+        - 677
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: SOOUT
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_co
+      points:
+        -
+          - 360
+          - -500
+        -
+          - 400
+          - -500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_co
+      origin:
+        - 364
+        - -493
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_co
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 60
+          - -1000
+        -
+          - 60
+          - -960
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 53
+        - -964
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 60
+          - -200
+        -
+          - 60
+          - -160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 53
+        - -196
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 360
+          - -900
+        -
+          - 400
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 364
+        - -893
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_so
+      points:
+        -
+          - 360
+          - -280
+        -
+          - 400
+          - -280
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_so
+      origin:
+        - 364
+        - -273
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_so
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -200
+          - -360
+        -
+          - -160
+          - -360
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -164
+        - -353
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -200
+          - -320
+        -
+          - -160
+          - -320
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -164
+        - -313
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -200
+          - -280
+        -
+          - -160
+          - -280
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -164
+        - -273
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_out
+      points:
+        -
+          - -200
+          - -880
+        -
+          - -160
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_out
+      origin:
+        - -164
+        - -873
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -200
+          - -400
+        -
+          - -160
+          - -400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -164
+        - -393
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -200
+          - -480
+        -
+          - -160
+          - -480
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -164
+        - -473
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -200
+          - -300
+        -
+          - -160
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -164
+        - -293
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_out
+      points:
+        -
+          - 60
+          - -1340
+        -
+          - 60
+          - -1300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_out
+      origin:
+        - 53
+        - -1336
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_co
+      points:
+        -
+          - 60
+          - -1210
+        -
+          - 60
+          - -1170
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_co
+      origin:
+        - 53
+        - -1206
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_co
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: NC_so
+      points:
+        -
+          - 60
+          - -1080
+        -
+          - 60
+          - -1040
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: NC_so
+      origin:
+        - 53
+        - -1076
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: NC_so
+instances:
+  XCELL:
+    lib_name: aib_ams
+    cell_name: aib_dlycell
+    view_name: symbol
+    xform:
+      - -180
+      - -30
+      - R0
+    bbox:
+      - -180
+      - -30
+      - 380
+      - 770
+    connections:
+      RSTb: RSTb
+      SE: iSE
+      VDD: VDD
+      VSS: VSS
+      bk: bk
+      ci_p: b
+      ck: CLKIN
+      co_p: a
+      in_p: dlyin
+      out_p: dlyout
+      si: iSI
+      so: SOOUT
+    params:
+      {}
+    is_primitive: false
+  XDUM:
+    lib_name: aib_ams
+    cell_name: aib_dlycell
+    view_name: symbol
+    xform:
+      - -180
+      - -980
+      - R0
+    bbox:
+      - -180
+      - -980
+      - 380
+      - -180
+    connections:
+      RSTb: VSS
+      SE: VSS
+      VDD: VDD
+      VSS: VSS
+      bk: VSS
+      ci_p: VSS
+      ck: VSS
+      co_p: NC_co
+      in_p: VSS
+      out_p: NC_out
+      si: VSS
+      so: NC_so
+    params:
+      {}
+    is_primitive: false
+  XNC_co:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 60
+      - -1210
+      - R0
+    bbox:
+      - 50
+      - -1260
+      - 70
+      - -1206
+    connections:
+      noConn: NC_co
+    params:
+      {}
+    is_primitive: true
+  XNC_out:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 60
+      - -1340
+      - R0
+    bbox:
+      - 50
+      - -1390
+      - 70
+      - -1336
+    connections:
+      noConn: NC_out
+    params:
+      {}
+    is_primitive: true
+  XNC_so:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 60
+      - -1080
+      - R0
+    bbox:
+      - 50
+      - -1130
+      - 70
+      - -1076
+    connections:
+      noConn: NC_so
+    params:
+      {}
+    is_primitive: true
+props:
+  connectivityLastUpdated:
+    - 0
+    - 8162
+  instance#:
+    - 0
+    - 5
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1569519035
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 12
+  schGeometryLastUpdated:
+    - 0
+    - 8162
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 8162
+  _dbvCvTimeStamp:
+    - 0
+    - 8162
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_driver_output_driver.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_driver_output_driver.symbol.yaml
new file mode 100644
index 0000000..29605c3
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_driver_output_driver.symbol.yaml
@@ -0,0 +1,875 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_driver_output_driver
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 644
+  - 444
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 316
+          - 436
+          - 324
+          - 444
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 316
+          - -4
+          - 324
+          - 4
+    stype: 2
+    ttype: 2
+  din:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 336
+          - 4
+          - 344
+    stype: 0
+    ttype: 0
+  n_enb_drv<1:0>:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 316
+          - 4
+          - 324
+    stype: 0
+    ttype: 0
+  p_en_drv<1:0>:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 296
+          - 4
+          - 304
+    stype: 0
+    ttype: 0
+  tristate:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 276
+          - 4
+          - 284
+    stype: 0
+    ttype: 0
+  tristateb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 256
+          - 4
+          - 264
+    stype: 0
+    ttype: 0
+  txpadout:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 636
+          - 236
+          - 644
+          - 244
+    stype: 0
+    ttype: 1
+  weak_pden:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 236
+          - 4
+          - 244
+    stype: 0
+    ttype: 0
+  weak_puenb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 216
+          - 4
+          - 224
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 220
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_puenb
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 240
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pden
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 260
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: tristateb
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 280
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: tristate
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 300
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: p_en_drv<1:0>
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 320
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: n_enb_drv<1:0>
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 340
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 594
+        - 240
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 320
+        - 394
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 320
+        - 46
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 640
+        - 440
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 200
+        - 100
+        - 480
+        - 300
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 220
+        -
+          - 0
+          - 220
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 460
+        - 410
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 270
+        -
+          - 250
+          - 270
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 140
+        -
+          - 250
+          - 140
+        -
+          - 250
+          - 140
+        -
+          - 260
+          - 140
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 210
+        -
+          - 260
+          - 210
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 270
+        -
+          - 250
+          - 270
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 290
+        -
+          - 280
+          - 230
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 250
+        -
+          - 260
+          - 250
+        -
+          - 260
+          - 160
+        -
+          - 286
+          - 160
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 260
+          - 140
+        -
+          - 286
+          - 140
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 5.497787143782138
+      ang_stop: 0.78539816339744828
+      bbox:
+        - 280
+        - 130
+        - 288
+        - 170
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 130
+        -
+          - 300
+          - 130
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 170
+        -
+          - 300
+          - 170
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.7123889803846897
+      ang_stop: 5.497787143782138
+      bbox:
+        - 300
+        - 130
+        - 328
+        - 151
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 0.78539816339744828
+      ang_stop: 1.5707963267948966
+      bbox:
+        - 300
+        - 149
+        - 328
+        - 170
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 328
+        - 145
+        - 338
+        - 155
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 282
+        - 230
+        - 340
+        - 290
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 340
+        - 255
+        - 350
+        - 265
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 640
+          - 240
+        -
+          - 600
+          - 240
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 280
+        -
+          - 0
+          - 280
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 350
+          - 260
+        -
+          - 410
+          - 260
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 340
+          - 150
+        -
+          - 420
+          - 150
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 410
+        - 255
+        - 420
+        - 265
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 420
+          - 160
+        -
+          - 420
+          - 140
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 420
+          - 270
+        -
+          - 420
+          - 250
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 300
+        -
+          - 0
+          - 300
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 320
+        -
+          - 0
+          - 320
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 450
+          - 160
+        -
+          - 450
+          - 250
+        -
+          - 430
+          - 250
+        -
+          - 430
+          - 270
+        -
+          - 450
+          - 270
+        -
+          - 450
+          - 290
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 450
+          - 160
+        -
+          - 430
+          - 160
+        -
+          - 430
+          - 140
+        -
+          - 450
+          - 140
+        -
+          - 450
+          - 120
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 300
+        -
+          - 220
+          - 320
+        -
+          - 500
+          - 320
+        -
+          - 500
+          - 120
+        -
+          - 480
+          - 120
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 355
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 320
+          - 440
+        -
+          - 320
+          - 400
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 40
+        -
+          - 40
+          - 400
+        -
+          - 600
+          - 400
+        -
+          - 600
+          - 40
+        -
+          - 40
+          - 40
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 320
+          - 40
+        -
+          - 320
+          - 0
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 340
+        -
+          - 0
+          - 340
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 260
+        -
+          - 0
+          - 260
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 40
+          - 240
+        -
+          - 0
+          - 240
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 320
+        -
+          - 240
+          - 340
+        -
+          - 520
+          - 340
+        -
+          - 520
+          - 130
+        -
+          - 500
+          - 130
+instances:
+  {}
+props:
+  interfaceLastChanged:
+    - 4
+    - time_val: 1560551419
+  partName:
+    - 3
+    - aib_driver_output_driver
+  pin#:
+    - 0
+    - 16
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("txpadout" "VDD" "VSS" "din" "n_enb_drv<1:0>" "p_en_drv<1:0>" "tristate" "tristateb" "weak_pden" "weak_puenb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 521
+  _dbvCvTimeStamp:
+    - 0
+    - 521
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_driver_output_driver.yaml b/src/aib_ams/schematic/netlist_info/aib_driver_output_driver.yaml
new file mode 100644
index 0000000..33ae60a
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_driver_output_driver.yaml
@@ -0,0 +1,886 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_driver_output_driver
+view_name: schematic
+bbox:
+  - -861
+  - -40
+  - 658
+  - 770
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -730
+            - 620
+            - R0
+          bbox:
+            - -791
+            - 594
+            - -720
+            - 630
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -755
+            - 620
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -730
+            - 550
+            - R0
+          bbox:
+            - -791
+            - 524
+            - -720
+            - 560
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -755
+            - 550
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  din:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -720
+            - 400
+            - R0
+          bbox:
+            - -777
+            - 374
+            - -720
+            - 410
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -750
+            - 400
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  n_enb_drv<1:0>:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -720
+            - 190
+            - R0
+          bbox:
+            - -777
+            - 164
+            - -720
+            - 200
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -750
+            - 190
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  p_en_drv<1:0>:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -720
+            - 240
+            - R0
+          bbox:
+            - -777
+            - 214
+            - -720
+            - 250
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -750
+            - 240
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  tristate:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -720
+            - 340
+            - R0
+          bbox:
+            - -777
+            - 314
+            - -720
+            - 350
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -750
+            - 340
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  tristateb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -720
+            - 300
+            - R0
+          bbox:
+            - -777
+            - 274
+            - -720
+            - 310
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -750
+            - 300
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  txpadout:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -590
+            - 400
+            - R0
+          bbox:
+            - -590
+            - 374
+            - -533
+            - 410
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -565
+            - 400
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  weak_pden:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -720
+            - 90
+            - R0
+          bbox:
+            - -777
+            - 64
+            - -720
+            - 100
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -750
+            - 90
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  weak_puenb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -720
+            - 140
+            - R0
+          bbox:
+            - -777
+            - 114
+            - -720
+            - 150
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -750
+            - 140
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -60
+          - 730
+        -
+          - -60
+          - 770
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: txpadout_tmp<1:0>
+      origin:
+        - 296
+        - 452
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout_tmp<1:0>
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: txpadout_tmp<1:0>
+      width: 10
+      points:
+        -
+          - 260
+          - 440
+        -
+          - 300
+          - 440
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -60
+          - 440
+        -
+          - -60
+          - 480
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -67
+        - 476
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: txpadout_tmp<6>
+      points:
+        -
+          - 100
+          - 600
+        -
+          - 140
+          - 600
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: txpadout_tmp<6>
+      origin:
+        - 104
+        - 607
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout_tmp<6>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: weak_pden
+      points:
+        -
+          - -180
+          - 580
+        -
+          - -140
+          - 580
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: weak_pden
+      origin:
+        - -144
+        - 587
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pden
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: weak_puenb
+      points:
+        -
+          - -180
+          - 650
+        -
+          - -140
+          - 650
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: weak_puenb
+      origin:
+        - -144
+        - 657
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_puenb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: din
+      points:
+        -
+          - -300
+          - 180
+        -
+          - -260
+          - 180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: din
+      origin:
+        - -264
+        - 187
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -60
+          - -40
+        -
+          - -60
+          - 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -67
+        - -4
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -60
+          - 360
+        -
+          - -60
+          - 400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -67
+        - 364
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: txpadout_tmp<5:0>
+      points:
+        -
+          - 140
+          - 180
+        -
+          - 180
+          - 180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: txpadout_tmp<5:0>
+      origin:
+        - 144
+        - 187
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout_tmp<5:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: p_en_drv<0>,<*2>p_en_drv<1>,<*3>tristateb
+      points:
+        -
+          - -300
+          - 240
+        -
+          - -260
+          - 240
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: p_en_drv<0>,<*2>p_en_drv<1>,<*3>tristateb
+      origin:
+        - -264
+        - 247
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: p_en_drv<0>,<*2>p_en_drv<1>,<*3>tristateb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: n_enb_drv<0>,<*2>n_enb_drv<1>,<*3>tristate
+      points:
+        -
+          - -300
+          - 120
+        -
+          - -260
+          - 120
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: n_enb_drv<0>,<*2>n_enb_drv<1>,<*3>tristate
+      origin:
+        - -264
+        - 127
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: n_enb_drv<0>,<*2>n_enb_drv<1>,<*3>tristate
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -67
+        - 734
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: txpadout
+      points:
+        -
+          - 580
+          - 440
+        -
+          - 620
+          - 440
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: txpadout
+      origin:
+        - 584
+        - 447
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout
+instances:
+  XPUPD:
+    lib_name: aib_ams
+    cell_name: aib_driver_pu_pd
+    view_name: symbol
+    xform:
+      - -140
+      - 480
+      - R0
+    bbox:
+      - -144
+      - 476
+      - 104
+      - 734
+    connections:
+      VDD: VDD
+      VSS: VSS
+      out: txpadout_tmp<6>
+      pden: weak_pden
+      puenb: weak_puenb
+    params:
+      {}
+    is_primitive: false
+  XSUM:
+    lib_name: xbase
+    cell_name: current_summer
+    view_name: symbol
+    xform:
+      - 300
+      - 380
+      - R0
+    bbox:
+      - 296
+      - 380
+      - 658
+      - 516
+    connections:
+      in<1:0>: txpadout_tmp<1:0>
+      out: txpadout
+    params:
+      {}
+    is_primitive: false
+  XUNIT<5:0>:
+    lib_name: aib_ams
+    cell_name: aib_driver_output_unit_cell
+    view_name: symbol
+    xform:
+      - -260
+      - 0
+      - R0
+    bbox:
+      - -264
+      - -4
+      - 144
+      - 380
+    connections:
+      VDD: <*6>VDD
+      VSS: <*6>VSS
+      en: p_en_drv<0>,<*2>p_en_drv<1>,<*3>tristateb
+      enb: n_enb_drv<0>,<*2>n_enb_drv<1>,<*3>tristate
+      in: <*6>din
+      out: txpadout_tmp<5:0>
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 17974
+  instance#:
+    - 0
+    - 1
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1567704027
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 12
+  schGeometryLastUpdated:
+    - 0
+    - 17974
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 17974
+  _dbvCvTimeStamp:
+    - 0
+    - 17974
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_driver_output_unit_cell.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_driver_output_unit_cell.symbol.yaml
new file mode 100644
index 0000000..066c2d6
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_driver_output_unit_cell.symbol.yaml
@@ -0,0 +1,651 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_driver_output_unit_cell
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 404
+  - 381
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 196
+          - 356
+          - 204
+          - 364
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 196
+          - -4
+          - 204
+          - 4
+    stype: 2
+    ttype: 2
+  en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 236
+          - 4
+          - 244
+    stype: 0
+    ttype: 0
+  enb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 116
+          - 4
+          - 124
+    stype: 0
+    ttype: 0
+  in:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 176
+          - 4
+          - 184
+    stype: 0
+    ttype: 0
+  out:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 396
+          - 176
+          - 404
+          - 184
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 36
+        - 130
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: enb
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 250
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: en
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 190
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: in
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 400
+          - 180
+        -
+          - 280
+          - 180
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 354
+        - 200
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 200
+          - 360
+        -
+          - 200
+          - 320
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 190
+        - 324
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 200
+          - 0
+        -
+          - 200
+          - 40
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 190
+        - 46
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 400
+        - 360
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 50
+        - 370
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 320
+        - 375
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - 40
+        - 360
+        - 340
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 130
+        -
+          - 260
+          - 130
+        -
+          - 260
+          - 110
+        -
+          - 280
+          - 110
+        -
+          - 280
+          - 90
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 130
+        -
+          - 280
+          - 220
+        -
+          - 260
+          - 220
+        -
+          - 260
+          - 240
+        -
+          - 280
+          - 240
+        -
+          - 280
+          - 260
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 240
+        -
+          - 250
+          - 220
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 250
+          - 130
+        -
+          - 250
+          - 110
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 240
+        - 225
+        - 250
+        - 235
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 240
+        -
+          - 80
+          - 240
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 170
+        - 225
+        - 180
+        - 235
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 5.497787143782138
+      ang_stop: 0.78539816339744828
+      bbox:
+        - 110
+        - 100
+        - 118
+        - 140
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 140
+        -
+          - 130
+          - 140
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 100
+        -
+          - 130
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 180
+        -
+          - 90
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 260
+        -
+          - 110
+          - 200
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 0.78539816339744828
+      ang_stop: 1.5707963267948966
+      bbox:
+        - 130
+        - 119
+        - 158
+        - 140
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.7123889803846897
+      ang_stop: 5.497787143782138
+      bbox:
+        - 130
+        - 100
+        - 158
+        - 121
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 158
+        - 115
+        - 168
+        - 125
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 120
+        -
+          - 80
+          - 120
+        -
+          - 80
+          - 110
+        -
+          - 90
+          - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 240
+        -
+          - 80
+          - 240
+  -
+    - 2
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      ang_start: 4.8230462015585855
+      ang_stop: 1.4601391056210009
+      bbox:
+        - 112
+        - 200
+        - 170
+        - 260
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 280
+          - 90
+        -
+          - 280
+          - 60
+        -
+          - 200
+          - 60
+        -
+          - 200
+          - 40
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 180
+          - 230
+        -
+          - 240
+          - 230
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 90
+          - 110
+        -
+          - 116
+          - 110
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 220
+        -
+          - 90
+          - 220
+        -
+          - 90
+          - 130
+        -
+          - 116
+          - 130
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 170
+          - 120
+        -
+          - 250
+          - 120
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 200
+          - 320
+        -
+          - 200
+          - 310
+        -
+          - 280
+          - 310
+        -
+          - 280
+          - 260
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1560214412
+  partName:
+    - 3
+    - aib_driver_output_unit_cell
+  pin#:
+    - 0
+    - 14
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("out" "VDD" "VSS" "in" "en" "enb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 730
+  _dbvCvTimeStamp:
+    - 0
+    - 730
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_driver_output_unit_cell.yaml b/src/aib_ams/schematic/netlist_info/aib_driver_output_unit_cell.yaml
new file mode 100644
index 0000000..bf35292
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_driver_output_unit_cell.yaml
@@ -0,0 +1,723 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_driver_output_unit_cell
+view_name: schematic
+bbox:
+  - -561
+  - -260
+  - 570
+  - 280
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -500
+            - 260
+            - R0
+          bbox:
+            - -561
+            - 234
+            - -490
+            - 270
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -525
+            - 260
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -500
+            - 210
+            - R0
+          bbox:
+            - -561
+            - 184
+            - -490
+            - 220
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -525
+            - 210
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -500
+            - 130
+            - R0
+          bbox:
+            - -557
+            - 104
+            - -500
+            - 140
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -530
+            - 130
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  enb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -500
+            - 90
+            - R0
+          bbox:
+            - -557
+            - 64
+            - -500
+            - 100
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -530
+            - 90
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  in:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -500
+            - 40
+            - R0
+          bbox:
+            - -557
+            - 14
+            - -500
+            - 50
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -530
+            - 40
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  out:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -410
+            - 130
+            - R0
+          bbox:
+            - -410
+            - 104
+            - -353
+            - 140
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -385
+            - 130
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 0
+          - -260
+        -
+          - 0
+          - -220
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -7
+        - -224
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 0
+          - -60
+        -
+          - 0
+          - -20
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -7
+        - -56
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nor_pd
+      points:
+        -
+          - 240
+          - -20
+        -
+          - 290
+          - -20
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nor_pd
+      origin:
+        - 114
+        - -133
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nor_pd
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: enb,in
+      width: 10
+      points:
+        -
+          - -140
+          - -140
+        -
+          - -100
+          - -140
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: enb,in
+      origin:
+        - -104
+        - -128
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: enb,in
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 0
+          - 40
+        -
+          - 0
+          - 80
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -7
+        - 76
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 0
+          - 240
+        -
+          - 0
+          - 280
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -7
+        - 244
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nand_pu
+      points:
+        -
+          - 120
+          - 160
+        -
+          - 240
+          - 160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nand_pu
+      origin:
+        - 134
+        - 167
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nand_pu
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: en,in
+      width: 10
+      points:
+        -
+          - -140
+          - 160
+        -
+          - -100
+          - 160
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: en,in
+      origin:
+        - -104
+        - 172
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: en,in
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: out
+      points:
+        -
+          - 530
+          - 0
+        -
+          - 570
+          - 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: out
+      origin:
+        - 534
+        - 7
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 370
+          - -160
+        -
+          - 370
+          - -120
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 363
+        - -124
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 370
+          - 130
+        -
+          - 370
+          - 170
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 363
+        - 134
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nor_pd
+      points:
+        -
+          - 240
+          - -140
+        -
+          - 240
+          - -20
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nor_pd
+      points:
+        -
+          - 100
+          - -140
+        -
+          - 240
+          - -140
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nand_pu
+      points:
+        -
+          - 240
+          - 50
+        -
+          - 240
+          - 160
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nand_pu
+      points:
+        -
+          - 240
+          - 50
+        -
+          - 290
+          - 50
+instances:
+  XNAND:
+    lib_name: bag3_digital
+    cell_name: nand
+    view_name: symbol
+    xform:
+      - -100
+      - 80
+      - R0
+    bbox:
+      - -104
+      - 76
+      - 198
+      - 244
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: en,in
+      out: nand_pu
+    params:
+      {}
+    is_primitive: false
+  XNOR:
+    lib_name: bag3_digital
+    cell_name: nor
+    view_name: symbol
+    xform:
+      - -100
+      - -220
+      - R0
+    bbox:
+      - -104
+      - -224
+      - 188
+      - -56
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: enb,in
+      out: nor_pd
+    params:
+      {}
+    is_primitive: false
+  Xpupd:
+    lib_name: aib_ams
+    cell_name: aib_driver_pu_pd
+    view_name: symbol
+    xform:
+      - 290
+      - -120
+      - R0
+    bbox:
+      - 286
+      - -124
+      - 534
+      - 134
+    connections:
+      VDD: VDD
+      VSS: VSS
+      out: out
+      pden: nor_pd
+      puenb: nand_pu
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 5600
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1573764662
+  net#:
+    - 0
+    - 2
+  pin#:
+    - 0
+    - 9
+  schGeometryLastUpdated:
+    - 0
+    - 5600
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 5600
+  _dbvCvTimeStamp:
+    - 0
+    - 5600
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_driver_pu_pd.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_driver_pu_pd.symbol.yaml
new file mode 100644
index 0000000..5121e17
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_driver_pu_pd.symbol.yaml
@@ -0,0 +1,470 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_driver_pu_pd
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 244
+  - 254
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 76
+          - 246
+          - 84
+          - 254
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 76
+          - -4
+          - 84
+          - 4
+    stype: 2
+    ttype: 2
+  out:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 116
+          - 244
+          - 124
+    stype: 0
+    ttype: 1
+  pden:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 96
+          - 4
+          - 104
+    stype: 0
+    ttype: 0
+  puenb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 166
+          - 4
+          - 174
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 170
+        -
+          - 80
+          - 170
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 180
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: puenb
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 100
+        -
+          - 80
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 6
+        - 110
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: pden
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 120
+        -
+          - 140
+          - 120
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 234
+        - 130
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 80
+          - 210
+        -
+          - 80
+          - 250
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 80
+        - 204
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 80
+          - 0
+        -
+          - 80
+          - 40
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 80
+        - 46
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 240
+        - 250
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 110
+        - 240
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 165
+        - 225
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 50
+        - 40
+        - 200
+        - 210
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 140
+          - 110
+        -
+          - 120
+          - 110
+        -
+          - 120
+          - 90
+        -
+          - 140
+          - 90
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 110
+        -
+          - 110
+          - 90
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 140
+          - 90
+        -
+          - 140
+          - 70
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 140
+          - 110
+        -
+          - 140
+          - 160
+        -
+          - 120
+          - 160
+        -
+          - 120
+          - 180
+        -
+          - 140
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 140
+          - 180
+        -
+          - 140
+          - 200
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 180
+        -
+          - 110
+          - 160
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 100
+        -
+          - 80
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 70
+        -
+          - 150
+          - 70
+        -
+          - 140
+          - 60
+        -
+          - 130
+          - 70
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 200
+        -
+          - 150
+          - 200
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 100
+        - 165
+        - 110
+        - 175
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 100
+          - 170
+        -
+          - 80
+          - 170
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1566573721
+  partName:
+    - 3
+    - aib_driver_pu_pd
+  pin#:
+    - 0
+    - 5
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("out" "VDD" "VSS" "pden" "puenb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 270
+  _dbvCvTimeStamp:
+    - 0
+    - 270
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_driver_pu_pd.yaml b/src/aib_ams/schematic/netlist_info/aib_driver_pu_pd.yaml
new file mode 100644
index 0000000..dddbd87
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_driver_pu_pd.yaml
@@ -0,0 +1,530 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_driver_pu_pd
+view_name: schematic
+bbox:
+  - -496
+  - -260
+  - 198
+  - 340
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -420
+            - 260
+            - R0
+          bbox:
+            - -481
+            - 234
+            - -410
+            - 270
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -445
+            - 260
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -420
+            - 210
+            - R0
+          bbox:
+            - -481
+            - 184
+            - -410
+            - 220
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -445
+            - 210
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  out:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -360
+            - 140
+            - R0
+          bbox:
+            - -360
+            - 114
+            - -303
+            - 150
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -335
+            - 140
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  pden:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -420
+            - 140
+            - R0
+          bbox:
+            - -477
+            - 114
+            - -420
+            - 150
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -450
+            - 140
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  puenb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -420
+            - 90
+            - R0
+          bbox:
+            - -477
+            - 64
+            - -420
+            - 100
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -450
+            - 90
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 80
+          - 200
+        -
+          - 120
+          - 200
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 84
+        - -113
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 0
+          - 300
+        -
+          - 0
+          - 340
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -7
+        - 304
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: puenb
+      width: 10
+      points:
+        -
+          - -160
+          - 200
+        -
+          - -120
+          - 200
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: pden
+      origin:
+        - -124
+        - -108
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: pden
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: out
+      points:
+        -
+          - 0
+          - 60
+        -
+          - 0
+          - 100
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: out
+      origin:
+        - -7
+        - 96
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 80
+          - -120
+        -
+          - 120
+          - -120
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: puenb
+      origin:
+        - -124
+        - 212
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: puenb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: out
+      points:
+        -
+          - 0
+          - -20
+        -
+          - 0
+          - 20
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: pden
+      width: 10
+      points:
+        -
+          - -160
+          - -120
+        -
+          - -120
+          - -120
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 84
+        - 207
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 0
+          - -260
+        -
+          - 0
+          - -220
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -7
+        - -224
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: out
+      origin:
+        - -7
+        - -16
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: out
+instances:
+  XN:
+    lib_name: xbase
+    cell_name: nmos4_stack
+    view_name: symbol
+    xform:
+      - -120
+      - -220
+      - R0
+    bbox:
+      - -124
+      - -224
+      - 198
+      - 1
+    connections:
+      b: VSS
+      d: out
+      g<1:0>: <*2>pden
+      s: VSS
+    params:
+      {}
+    is_primitive: false
+  XP:
+    lib_name: xbase
+    cell_name: pmos4_stack
+    view_name: symbol
+    xform:
+      - -120
+      - 100
+      - R0
+    bbox:
+      - -124
+      - 96
+      - 198
+      - 311
+    connections:
+      b: VDD
+      d: out
+      g<1:0>: <*2>puenb
+      s: VDD
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 4251
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1571063509
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 7
+  schGeometryLastUpdated:
+    - 0
+    - 4251
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 4251
+  _dbvCvTimeStamp:
+    - 0
+    - 4251
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_frontend.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_frontend.symbol.yaml
new file mode 100644
index 0000000..80e817a
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_frontend.symbol.yaml
@@ -0,0 +1,887 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_frontend
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 538
+  - 404
+terminals:
+  VDDCore:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 396
+          - 244
+          - 404
+    stype: 1
+    ttype: 2
+  VDDIO:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 216
+          - 396
+          - 224
+          - 404
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 216
+          - -4
+          - 224
+          - 4
+    stype: 2
+    ttype: 2
+  clk_en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 96
+          - 4
+          - 104
+    stype: 0
+    ttype: 0
+  data_en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 76
+          - 4
+          - 84
+    stype: 0
+    ttype: 0
+  din:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 296
+          - 4
+          - 304
+    stype: 0
+    ttype: 0
+  iclkn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 256
+          - 4
+          - 264
+    stype: 0
+    ttype: 0
+  indrv_buf<1:0>:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 196
+          - 4
+          - 204
+    stype: 0
+    ttype: 0
+  iopad:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 296
+          - 464
+          - 304
+    stype: 0
+    ttype: 2
+  iopad_out:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 276
+          - 464
+          - 284
+    stype: 0
+    ttype: 1
+  ipdrv_buf<1:0>:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 176
+          - 4
+          - 184
+    stype: 0
+    ttype: 0
+  itx_en_buf:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 216
+          - 4
+          - 224
+    stype: 0
+    ttype: 0
+  oclkn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 156
+          - 464
+          - 164
+    stype: 0
+    ttype: 1
+  oclkp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 176
+          - 464
+          - 184
+    stype: 0
+    ttype: 1
+  odat:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 216
+          - 464
+          - 224
+    stype: 0
+    ttype: 1
+  odat_async:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 236
+          - 464
+          - 244
+    stype: 0
+    ttype: 1
+  por:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 56
+          - 4
+          - 64
+    stype: 0
+    ttype: 0
+  weak_pulldownen:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 136
+          - 4
+          - 144
+    stype: 0
+    ttype: 0
+  weak_pullupenb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 156
+          - 4
+          - 164
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 160
+        -
+          - 40
+          - 160
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 160
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pullupenb
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 140
+        -
+          - 40
+          - 140
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 140
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pulldownen
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 60
+        -
+          - 40
+          - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 60
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 220
+        -
+          - 40
+          - 220
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 220
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: itx_en_buf
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 180
+        -
+          - 40
+          - 180
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 180
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ipdrv_buf<1:0>
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 200
+        -
+          - 40
+          - 200
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 200
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: indrv_buf<1:0>
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 260
+        -
+          - 40
+          - 260
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 260
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iclkn
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 300
+        -
+          - 40
+          - 300
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 300
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 80
+        -
+          - 40
+          - 80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 80
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_en
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 100
+        -
+          - 40
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 100
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_en
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 240
+        -
+          - 420
+          - 240
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 240
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat_async
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 220
+        -
+          - 420
+          - 220
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 220
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 180
+        -
+          - 420
+          - 180
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 180
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkp
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 160
+        -
+          - 420
+          - 160
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 160
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkn
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 280
+        -
+          - 420
+          - 280
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 280
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iopad_out
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 300
+        -
+          - 420
+          - 300
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 300
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iopad
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 400
+        -
+          - 220
+          - 360
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 220
+        - 354
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 400
+        -
+          - 240
+          - 360
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 354
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 0
+        -
+          - 220
+          - 40
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 220
+        - 46
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 460
+        - 400
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 410
+        - 370
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 230
+        - 205
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - 40
+        - 420
+        - 360
+instances:
+  {}
+props:
+  interfaceLastChanged:
+    - 4
+    - time_val: 1570651779
+  partName:
+    - 3
+    - aib_frontend
+  pin#:
+    - 0
+    - 19
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("iopad_out" "oclkn" "oclkp" "odat" "odat_async" "VDDCore" "VDDIO" "VSS" "iopad" "clk_en" "data_en" "din" "iclkn" "indrv_buf<1:0>" "ipdrv_buf<1:0>" "itx_en_buf" "por" "weak_pulldownen" "weak_pullupenb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 603
+  _dbvCvTimeStamp:
+    - 0
+    - 603
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_frontend.yaml b/src/aib_ams/schematic/netlist_info/aib_frontend.yaml
new file mode 100644
index 0000000..2e97ca4
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_frontend.yaml
@@ -0,0 +1,1604 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_frontend
+view_name: schematic
+bbox:
+  - -218
+  - -520
+  - 1058
+  - 230
+terminals:
+  VDDCore:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 130
+            - 220
+            - R0
+          bbox:
+            - 69
+            - 194
+            - 140
+            - 230
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 105
+            - 220
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VDDIO:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 130
+            - 200
+            - R0
+          bbox:
+            - 69
+            - 174
+            - 140
+            - 210
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 105
+            - 200
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 130
+            - 180
+            - R0
+          bbox:
+            - 69
+            - 154
+            - 140
+            - 190
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 105
+            - 180
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  clk_en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - 80
+            - R0
+          bbox:
+            - -117
+            - 54
+            - -60
+            - 90
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - 80
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  data_en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - 100
+            - R0
+          bbox:
+            - -117
+            - 74
+            - -60
+            - 110
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - 100
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  din:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - 20
+            - R0
+          bbox:
+            - -117
+            - -6
+            - -60
+            - 30
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - 20
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  iclkn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - 140
+            - R0
+          bbox:
+            - -117
+            - 114
+            - -60
+            - 150
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - 140
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  indrv_buf<1:0>:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - -40
+            - R0
+          bbox:
+            - -117
+            - -66
+            - -60
+            - -30
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - -40
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  iopad:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 130
+            - 140
+            - R0
+          bbox:
+            - 69
+            - 114
+            - 140
+            - 150
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 105
+            - 140
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 2
+  iopad_out:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -20
+            - 40
+            - R0
+          bbox:
+            - -20
+            - 14
+            - 37
+            - 50
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 5
+            - 40
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  ipdrv_buf<1:0>:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - -20
+            - R0
+          bbox:
+            - -117
+            - -46
+            - -60
+            - -10
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - -20
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  itx_en_buf:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - -60
+            - R0
+          bbox:
+            - -117
+            - -86
+            - -60
+            - -50
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - -60
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  oclkn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -20
+            - 80
+            - R0
+          bbox:
+            - -20
+            - 54
+            - 37
+            - 90
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 5
+            - 80
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  oclkp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -20
+            - 100
+            - R0
+          bbox:
+            - -20
+            - 74
+            - 37
+            - 110
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 5
+            - 100
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  odat:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -20
+            - 140
+            - R0
+          bbox:
+            - -20
+            - 114
+            - 37
+            - 150
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 5
+            - 140
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  odat_async:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -20
+            - 120
+            - R0
+          bbox:
+            - -20
+            - 94
+            - 37
+            - 130
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 5
+            - 120
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  por:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - 60
+            - R0
+          bbox:
+            - -117
+            - 34
+            - -60
+            - 70
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - 60
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  weak_pulldownen:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - -80
+            - R0
+          bbox:
+            - -117
+            - -106
+            - -60
+            - -70
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - -80
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  weak_pullupenb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -60
+            - -100
+            - R0
+          bbox:
+            - -117
+            - -126
+            - -60
+            - -90
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -90
+            - -100
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 420
+          - -340
+        -
+          - 420
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 413
+        - -304
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 440
+          - 60
+        -
+          - 440
+          - 100
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 433
+        - 64
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 420
+          - 60
+        -
+          - 420
+          - 100
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 413
+        - 64
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: oclkn
+      points:
+        -
+          - 660
+          - -60
+        -
+          - 700
+          - -60
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: oclkn
+      origin:
+        - 664
+        - -53
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: oclkp
+      points:
+        -
+          - 660
+          - -40
+        -
+          - 700
+          - -40
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: oclkp
+      origin:
+        - 664
+        - -33
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkp
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odat
+      points:
+        -
+          - 660
+          - 0
+        -
+          - 700
+          - 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odat
+      origin:
+        - 664
+        - 7
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odat_async
+      points:
+        -
+          - 660
+          - -20
+        -
+          - 700
+          - -20
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odat_async
+      origin:
+        - 664
+        - -13
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat_async
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad_out
+      points:
+        -
+          - 50
+          - 0
+        -
+          - 200
+          - 0
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad_out
+      points:
+        -
+          - 50
+          - -520
+        -
+          - 50
+          - 0
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_en
+      points:
+        -
+          - 160
+          - -80
+        -
+          - 200
+          - -80
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_en
+      origin:
+        - 196
+        - -73
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_en
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: data_en
+      points:
+        -
+          - 160
+          - -60
+        -
+          - 200
+          - -60
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: data_en
+      origin:
+        - 196
+        - -53
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_en
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: din
+      points:
+        -
+          - 160
+          - -120
+        -
+          - 200
+          - -120
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: din
+      origin:
+        - 196
+        - -113
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad_out
+      points:
+        -
+          - 50
+          - -520
+        -
+          - 720
+          - -520
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: indrv_buf<1:0>
+      width: 10
+      points:
+        -
+          - 160
+          - -140
+        -
+          - 200
+          - -140
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: indrv_buf<1:0>
+      origin:
+        - 196
+        - -128
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: indrv_buf<1:0>
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: ipdrv_buf<1:0>
+      width: 10
+      points:
+        -
+          - 160
+          - -160
+        -
+          - 200
+          - -160
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: ipdrv_buf<1:0>
+      origin:
+        - 196
+        - -148
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ipdrv_buf<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: itx_en_buf
+      points:
+        -
+          - 160
+          - -180
+        -
+          - 200
+          - -180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: itx_en_buf
+      origin:
+        - 196
+        - -173
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: itx_en_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por
+      points:
+        -
+          - 160
+          - -200
+        -
+          - 200
+          - -200
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por
+      origin:
+        - 196
+        - -193
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: weak_pulldownen
+      points:
+        -
+          - 160
+          - -220
+        -
+          - 200
+          - -220
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: weak_pulldownen
+      origin:
+        - 196
+        - -213
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pulldownen
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: weak_pullupenb
+      points:
+        -
+          - 160
+          - -240
+        -
+          - 200
+          - -240
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: weak_pullupenb
+      origin:
+        - 196
+        - -233
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pullupenb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad
+      points:
+        -
+          - 900
+          - -240
+        -
+          - 900
+          - -160
+  -
+    - 4
+    - layer: 228
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 895
+        - -165
+        - 905
+        - -155
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iclkn
+      points:
+        -
+          - 160
+          - -20
+        -
+          - 200
+          - -20
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 893
+        - 84
+      alignment: 8
+      orient: MYR90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 900
+          - -420
+        -
+          - 900
+          - -460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 893
+        - -424
+      alignment: 2
+      orient: MYR90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad
+      points:
+        -
+          - 720
+          - -160
+        -
+          - 720
+          - -120
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad
+      points:
+        -
+          - 720
+          - -160
+        -
+          - 900
+          - -160
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad_out
+      points:
+        -
+          - 720
+          - -520
+        -
+          - 720
+          - -360
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad
+      points:
+        -
+          - 720
+          - -180
+        -
+          - 720
+          - -160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iopad_out
+      origin:
+        - 713
+        - -390
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iopad_out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad
+      points:
+        -
+          - 660
+          - -120
+        -
+          - 720
+          - -120
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad
+      points:
+        -
+          - 900
+          - -160
+        -
+          - 900
+          - -100
+  -
+    - 4
+    - layer: 228
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 715
+        - -165
+        - 725
+        - -155
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iopad
+      origin:
+        - 664
+        - -113
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iopad
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 900
+          - 80
+        -
+          - 900
+          - 120
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iclkn
+      origin:
+        - 196
+        - -13
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iclkn
+instances:
+  XFE:
+    lib_name: aib_ams
+    cell_name: aib_frontend_core
+    view_name: symbol
+    xform:
+      - 200
+      - -300
+      - R0
+    bbox:
+      - 196
+      - -304
+      - 664
+      - 64
+    connections:
+      VDDCore: VDDCore
+      VDDIO: VDDIO
+      VSS: VSS
+      clk_en: clk_en
+      data_en: data_en
+      din: din
+      iclkn: iclkn
+      indrv_buf<1:0>: indrv_buf<1:0>
+      ipdrv_buf<1:0>: ipdrv_buf<1:0>
+      itx_en_buf: itx_en_buf
+      oclkn: oclkn
+      oclkp: oclkp
+      odat: odat
+      odat_async: odat_async
+      por: por
+      rxpadin: iopad_out
+      txpadout: iopad
+      weak_pulldownen: weak_pulldownen
+      weak_pullupenb: weak_pullupenb
+    params:
+      {}
+    is_primitive: false
+  XMS:
+    lib_name: xbase
+    cell_name: metal_short
+    view_name: symbol
+    xform:
+      - 680
+      - -360
+      - R0
+    bbox:
+      - 672
+      - -364
+      - 878
+      - -176
+    connections:
+      MINUS: iopad_out
+      PLUS: iopad
+    params:
+      {}
+    is_primitive: false
+  XND:
+    lib_name: xbase
+    cell_name: esd_diode
+    view_name: symbol
+    xform:
+      - 860
+      - -240
+      - MX
+    bbox:
+      - 852
+      - -424
+      - 1058
+      - -236
+    connections:
+      MINUS: iopad
+      PLUS: VSS
+    params:
+      {}
+    is_primitive: false
+  XPD:
+    lib_name: xbase
+    cell_name: esd_diode
+    view_name: symbol
+    xform:
+      - 860
+      - 80
+      - MX
+    bbox:
+      - 852
+      - -104
+      - 1058
+      - 84
+    connections:
+      MINUS: VDDIO
+      PLUS: iopad
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 11745
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1570658284
+  net#:
+    - 0
+    - 3
+  pin#:
+    - 0
+    - 19
+  schGeometryLastUpdated:
+    - 0
+    - 11745
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 11745
+  _dbvCvTimeStamp:
+    - 0
+    - 11745
+  cdbRevision:
+    - 0
+    - 227612
diff --git a/src/aib_ams/schematic/netlist_info/aib_frontend_core.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_frontend_core.symbol.yaml
new file mode 100644
index 0000000..bf8efc4
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_frontend_core.symbol.yaml
@@ -0,0 +1,893 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_frontend_core
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 464
+  - 364
+terminals:
+  VDDCore:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 356
+          - 244
+          - 364
+    stype: 1
+    ttype: 2
+  VDDIO:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 216
+          - 356
+          - 224
+          - 364
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 216
+          - -4
+          - 224
+          - 4
+    stype: 2
+    ttype: 2
+  clk_en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 216
+          - 4
+          - 224
+    stype: 0
+    ttype: 0
+  data_en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 236
+          - 4
+          - 244
+    stype: 0
+    ttype: 0
+  din:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 176
+          - 4
+          - 184
+    stype: 0
+    ttype: 0
+  iclkn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 276
+          - 4
+          - 284
+    stype: 0
+    ttype: 0
+  indrv_buf<1:0>:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 156
+          - 4
+          - 164
+    stype: 0
+    ttype: 0
+  ipdrv_buf<1:0>:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 136
+          - 4
+          - 144
+    stype: 0
+    ttype: 0
+  itx_en_buf:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 116
+          - 4
+          - 124
+    stype: 0
+    ttype: 0
+  oclkn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 236
+          - 464
+          - 244
+    stype: 0
+    ttype: 1
+  oclkp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 256
+          - 464
+          - 264
+    stype: 0
+    ttype: 1
+  odat:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 296
+          - 464
+          - 304
+    stype: 0
+    ttype: 1
+  odat_async:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 276
+          - 464
+          - 284
+    stype: 0
+    ttype: 1
+  por:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 96
+          - 4
+          - 104
+    stype: 0
+    ttype: 0
+  rxpadin:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 296
+          - 4
+          - 304
+    stype: 0
+    ttype: 0
+  txpadout:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 456
+          - 176
+          - 464
+          - 184
+    stype: 0
+    ttype: 1
+  weak_pulldownen:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 76
+          - 4
+          - 84
+    stype: 0
+    ttype: 0
+  weak_pullupenb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 56
+          - 4
+          - 64
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 60
+        -
+          - 40
+          - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 60
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pullupenb
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 80
+        -
+          - 40
+          - 80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 80
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pulldownen
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 100
+        -
+          - 40
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 100
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 120
+        -
+          - 40
+          - 120
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 120
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: itx_en_buf
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 140
+        -
+          - 40
+          - 140
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 140
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ipdrv_buf<1:0>
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 160
+        -
+          - 40
+          - 160
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 160
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: indrv_buf<1:0>
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 280
+        -
+          - 40
+          - 280
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 280
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iclkn
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 180
+        -
+          - 40
+          - 180
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 180
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 240
+        -
+          - 40
+          - 240
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 240
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_en
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 220
+        -
+          - 40
+          - 220
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 220
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_en
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 300
+        -
+          - 40
+          - 300
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 280
+        -
+          - 420
+          - 280
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 280
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat_async
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 300
+        -
+          - 420
+          - 300
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 300
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 260
+        -
+          - 420
+          - 260
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 260
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkp
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 240
+        -
+          - 420
+          - 240
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 240
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkn
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 360
+        -
+          - 220
+          - 320
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 220
+        - 314
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 360
+        -
+          - 240
+          - 320
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 314
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 0
+        -
+          - 220
+          - 40
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 220
+        - 46
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 460
+        - 360
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 420
+        - 330
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 230
+        - 215
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - 40
+        - 420
+        - 320
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 300
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rxpadin
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 460
+          - 180
+        -
+          - 420
+          - 180
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 414
+        - 180
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1570658046
+  partName:
+    - 3
+    - aib_frontend_core
+  pin#:
+    - 0
+    - 20
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("oclkn" "oclkp" "odat" "odat_async" "txpadout" "VDDCore" "VDDIO" "VSS" "clk_en" "data_en" "din" "iclkn" "indrv_buf<1:0>" "ipdrv_buf<1:0>" "itx_en_buf" "por" "rxpadin" "weak_pulldownen" "weak_pullupenb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 682
+  _dbvCvTimeStamp:
+    - 0
+    - 682
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_frontend_core.yaml b/src/aib_ams/schematic/netlist_info/aib_frontend_core.yaml
new file mode 100644
index 0000000..c202c72
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_frontend_core.yaml
@@ -0,0 +1,1604 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_frontend_core
+view_name: schematic
+bbox:
+  - -278
+  - -820
+  - 712
+  - 7
+terminals:
+  VDDCore:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 70
+            - -20
+            - R0
+          bbox:
+            - 9
+            - -46
+            - 80
+            - -10
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 45
+            - -20
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VDDIO:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 70
+            - -40
+            - R0
+          bbox:
+            - 9
+            - -66
+            - 80
+            - -30
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 45
+            - -40
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 70
+            - -60
+            - R0
+          bbox:
+            - 9
+            - -86
+            - 80
+            - -50
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 45
+            - -60
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  clk_en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -160
+            - R0
+          bbox:
+            - -177
+            - -186
+            - -120
+            - -150
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -160
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  data_en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -140
+            - R0
+          bbox:
+            - -177
+            - -166
+            - -120
+            - -130
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -140
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  din:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -220
+            - R0
+          bbox:
+            - -177
+            - -246
+            - -120
+            - -210
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -220
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  iclkn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -100
+            - R0
+          bbox:
+            - -177
+            - -126
+            - -120
+            - -90
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -100
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  indrv_buf<1:0>:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -280
+            - R0
+          bbox:
+            - -177
+            - -306
+            - -120
+            - -270
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -280
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  ipdrv_buf<1:0>:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -260
+            - R0
+          bbox:
+            - -177
+            - -286
+            - -120
+            - -250
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -260
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  itx_en_buf:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -300
+            - R0
+          bbox:
+            - -177
+            - -326
+            - -120
+            - -290
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -300
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  oclkn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -80
+            - -160
+            - R0
+          bbox:
+            - -80
+            - -186
+            - -23
+            - -150
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -55
+            - -160
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  oclkp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -80
+            - -140
+            - R0
+          bbox:
+            - -80
+            - -166
+            - -23
+            - -130
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -55
+            - -140
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  odat:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -80
+            - -100
+            - R0
+          bbox:
+            - -80
+            - -126
+            - -23
+            - -90
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -55
+            - -100
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  odat_async:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -80
+            - -120
+            - R0
+          bbox:
+            - -80
+            - -146
+            - -23
+            - -110
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -55
+            - -120
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  por:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -180
+            - R0
+          bbox:
+            - -177
+            - -206
+            - -120
+            - -170
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -180
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  rxpadin:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -380
+            - R0
+          bbox:
+            - -177
+            - -406
+            - -120
+            - -370
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -380
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  txpadout:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -80
+            - -200
+            - R0
+          bbox:
+            - -80
+            - -226
+            - -23
+            - -190
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -55
+            - -200
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  weak_pulldownen:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -320
+            - R0
+          bbox:
+            - -177
+            - -346
+            - -120
+            - -310
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -320
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  weak_pullupenb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - -340
+            - R0
+          bbox:
+            - -177
+            - -366
+            - -120
+            - -330
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - -340
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 620
+          - -300
+        -
+          - 580
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 584
+        - -293
+      alignment: 8
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 380
+          - -440
+        -
+          - 380
+          - -400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 387
+        - -404
+      alignment: 8
+      orient: MXR90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 380
+          - -60
+        -
+          - 380
+          - -20
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 387
+        - -56
+      alignment: 2
+      orient: MXR90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 340
+          - -60
+        -
+          - 340
+          - -20
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 347
+        - -56
+      alignment: 2
+      orient: MXR90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: txpadout
+      points:
+        -
+          - 140
+          - -160
+        -
+          - 100
+          - -160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: txpadout
+      origin:
+        - 136
+        - -153
+      alignment: 2
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: din
+      points:
+        -
+          - 620
+          - -160
+        -
+          - 580
+          - -160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: din
+      origin:
+        - 584
+        - -153
+      alignment: 8
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: ipdrv_buf<1:0>
+      width: 10
+      points:
+        -
+          - 620
+          - -180
+        -
+          - 580
+          - -180
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: ipdrv_buf<1:0>
+      origin:
+        - 584
+        - -168
+      alignment: 8
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ipdrv_buf<1:0>
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: indrv_buf<1:0>
+      width: 10
+      points:
+        -
+          - 620
+          - -200
+        -
+          - 580
+          - -200
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: indrv_buf<1:0>
+      origin:
+        - 584
+        - -188
+      alignment: 8
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: indrv_buf<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: itx_en_buf
+      points:
+        -
+          - 620
+          - -220
+        -
+          - 580
+          - -220
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: itx_en_buf
+      origin:
+        - 584
+        - -213
+      alignment: 8
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: itx_en_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 620
+          - -320
+        -
+          - 580
+          - -320
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 584
+        - -313
+      alignment: 8
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: weak_pulldownen
+      points:
+        -
+          - 620
+          - -240
+        -
+          - 580
+          - -240
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: weak_pulldownen
+      origin:
+        - 584
+        - -233
+      alignment: 8
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pulldownen
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: weak_pullupenb
+      points:
+        -
+          - 620
+          - -260
+        -
+          - 580
+          - -260
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: weak_pullupenb
+      origin:
+        - 584
+        - -253
+      alignment: 8
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pullupenb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iclkn
+      points:
+        -
+          - 120
+          - -700
+        -
+          - 160
+          - -700
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iclkn
+      origin:
+        - 156
+        - -693
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iclkn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 380
+          - -560
+        -
+          - 380
+          - -520
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 373
+        - -556
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 360
+          - -560
+        -
+          - 360
+          - -520
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 353
+        - -556
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 340
+          - -560
+        -
+          - 340
+          - -520
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 333
+        - -556
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: oclkn
+      points:
+        -
+          - 540
+          - -660
+        -
+          - 580
+          - -660
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: oclkn
+      origin:
+        - 544
+        - -653
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: oclkp
+      points:
+        -
+          - 540
+          - -680
+        -
+          - 580
+          - -680
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: oclkp
+      origin:
+        - 544
+        - -673
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkp
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odat
+      points:
+        -
+          - 540
+          - -700
+        -
+          - 580
+          - -700
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odat
+      origin:
+        - 544
+        - -693
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odat_async
+      points:
+        -
+          - 540
+          - -720
+        -
+          - 580
+          - -720
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odat_async
+      origin:
+        - 544
+        - -713
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat_async
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_en
+      points:
+        -
+          - 120
+          - -660
+        -
+          - 160
+          - -660
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_en
+      origin:
+        - 156
+        - -653
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_en
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: data_en
+      points:
+        -
+          - 120
+          - -680
+        -
+          - 160
+          - -680
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: data_en
+      origin:
+        - 156
+        - -673
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_en
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 540
+          - -800
+        -
+          - 580
+          - -800
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 544
+        - -793
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: rxpadin
+      points:
+        -
+          - 120
+          - -720
+        -
+          - 160
+          - -720
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: rxpadin
+      origin:
+        - 156
+        - -713
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: rxpadin
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por
+      points:
+        -
+          - 120
+          - -740
+        -
+          - 160
+          - -740
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por
+      origin:
+        - 156
+        - -733
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 540
+          - -780
+        -
+          - 580
+          - -780
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 544
+        - -773
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+instances:
+  XRX:
+    lib_name: aib_ams
+    cell_name: aib_rxanlg_core
+    view_name: symbol
+    xform:
+      - 160
+      - -660
+      - R0
+    bbox:
+      - 156
+      - -820
+      - 638
+      - -556
+    connections:
+      VDDCore: VDDCore
+      VDDIO: VDDIO
+      VSS: VSS
+      clk_en: clk_en
+      data_en: data_en
+      iclkn: iclkn
+      iopad: rxpadin
+      oclkn: oclkn
+      oclkp: oclkp
+      odat: odat
+      odat_async: odat_async
+      por: por
+      por_vccl: por_vccl
+      porb_vccl: porb_vccl
+    params:
+      {}
+    is_primitive: false
+  XTX:
+    lib_name: aib_ams
+    cell_name: aib_txanlg_core
+    view_name: symbol
+    xform:
+      - 580
+      - -160
+      - MY
+    bbox:
+      - 136
+      - -404
+      - 584
+      - -56
+    connections:
+      VDDCore: VDDCore
+      VDDIO: VDDIO
+      VSS: VSS
+      din: din
+      indrv_buf<1:0>: indrv_buf<1:0>
+      ipdrv_buf<1:0>: ipdrv_buf<1:0>
+      itx_en_buf: itx_en_buf
+      por_vccl: por_vccl
+      porb_vccl: porb_vccl
+      txpadout: txpadout
+      weak_pulldownen: weak_pulldownen
+      weak_pullupenb: weak_pullupenb
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 6194
+  instance#:
+    - 0
+    - 1
+  instancesLastChanged:
+    - 4
+    - time_val: 1570052914
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1570658082
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 22
+  schGeometryLastUpdated:
+    - 0
+    - 6194
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 6194
+  _dbvCvTimeStamp:
+    - 0
+    - 6194
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_phase_interp.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_phase_interp.symbol.yaml
new file mode 100644
index 0000000..d2a9f97
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_phase_interp.symbol.yaml
@@ -0,0 +1,1365 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_phase_interp
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 384
+  - 224
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 196
+          - 216
+          - 204
+          - 224
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 196
+          - -4
+          - 204
+          - 4
+    stype: 2
+    ttype: 2
+  a_in:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 116
+          - 4
+          - 124
+    stype: 0
+    ttype: 0
+  intout:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 376
+          - 116
+          - 384
+          - 124
+    stype: 0
+    ttype: 1
+  sn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 56
+          - 4
+          - 64
+    stype: 0
+    ttype: 0
+  sp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 76
+          - 4
+          - 84
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 80
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sp
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 120
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a_in
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - 130
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: intout
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 120
+        -
+          - 40
+          - 120
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 80
+        -
+          - 40
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 60
+        -
+          - 40
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 380
+          - 120
+        -
+          - 340
+          - 120
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 60
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sn
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 200
+          - 220
+        -
+          - 200
+          - 180
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 180
+        - 214
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 200
+          - 0
+        -
+          - 200
+          - 40
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 200
+        - 46
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 380
+        - 220
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 210
+        - 190
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 265
+        - 165
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - 40
+        - 340
+        - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 100
+          - 120
+        -
+          - 120
+          - 120
+        -
+          - 130
+          - 140
+        -
+          - 150
+          - 140
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 110
+          - 80
+        -
+          - 150
+          - 80
+        -
+          - 160
+          - 100
+        -
+          - 180
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 190
+          - 110
+        -
+          - 220
+          - 110
+        -
+          - 210
+          - 120
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 110
+        -
+          - 210
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 100
+        -
+          - 260
+          - 100
+        -
+          - 270
+          - 120
+        -
+          - 290
+          - 120
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 140
+        -
+          - 130
+          - 139
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 138
+        -
+          - 130
+          - 137
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 136
+        -
+          - 130
+          - 135
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 134
+        -
+          - 130
+          - 133
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 132
+        -
+          - 130
+          - 131
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 130
+        -
+          - 130
+          - 129
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 128
+        -
+          - 130
+          - 127
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 126
+        -
+          - 130
+          - 125
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 124
+        -
+          - 130
+          - 123
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 122
+        -
+          - 130
+          - 121
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 120
+        -
+          - 130
+          - 119
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 118
+        -
+          - 130
+          - 117
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 116
+        -
+          - 130
+          - 115
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 114
+        -
+          - 130
+          - 113
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 112
+        -
+          - 130
+          - 111
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 110
+        -
+          - 130
+          - 109
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 108
+        -
+          - 130
+          - 107
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 106
+        -
+          - 130
+          - 105
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 104
+        -
+          - 130
+          - 103
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 102
+        -
+          - 130
+          - 101
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 100
+        -
+          - 130
+          - 99
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 98
+        -
+          - 130
+          - 97
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 96
+        -
+          - 130
+          - 95
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 94
+        -
+          - 130
+          - 93
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 92
+        -
+          - 130
+          - 91
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 90
+        -
+          - 130
+          - 89
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 88
+        -
+          - 130
+          - 87
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 86
+        -
+          - 130
+          - 85
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 84
+        -
+          - 130
+          - 83
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 82
+        -
+          - 130
+          - 81
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 140
+        -
+          - 160
+          - 139
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 138
+        -
+          - 160
+          - 137
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 136
+        -
+          - 160
+          - 135
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 134
+        -
+          - 160
+          - 133
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 132
+        -
+          - 160
+          - 131
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 130
+        -
+          - 160
+          - 129
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 128
+        -
+          - 160
+          - 127
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 126
+        -
+          - 160
+          - 125
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 124
+        -
+          - 160
+          - 123
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 122
+        -
+          - 160
+          - 121
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 120
+        -
+          - 160
+          - 119
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 118
+        -
+          - 160
+          - 117
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 116
+        -
+          - 160
+          - 115
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 114
+        -
+          - 160
+          - 113
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 112
+        -
+          - 160
+          - 111
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 110
+        -
+          - 160
+          - 109
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 108
+        -
+          - 160
+          - 107
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 106
+        -
+          - 160
+          - 105
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 104
+        -
+          - 160
+          - 103
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 102
+        -
+          - 160
+          - 101
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 100
+        -
+          - 160
+          - 99
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 98
+        -
+          - 160
+          - 97
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 96
+        -
+          - 160
+          - 95
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 94
+        -
+          - 160
+          - 93
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 92
+        -
+          - 160
+          - 91
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 90
+        -
+          - 160
+          - 89
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 88
+        -
+          - 160
+          - 87
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 86
+        -
+          - 160
+          - 85
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 84
+        -
+          - 160
+          - 83
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 82
+        -
+          - 160
+          - 81
+  -
+    - 8
+    - layer: 231
+      purpose: 240
+      net: ""
+      origin:
+        - 131
+        - 74
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 5
+      overbar: false
+      visible: true
+      drafting: true
+      text: t1
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 240
+      net: ""
+      origin:
+        - 161
+        - 74
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 5
+      overbar: false
+      visible: true
+      drafting: true
+      text: t2
+      evaluator: cdsNLPEvalText
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 124
+        -
+          - 270
+          - 123
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 122
+        -
+          - 270
+          - 121
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 120
+        -
+          - 270
+          - 119
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 118
+        -
+          - 270
+          - 117
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 116
+        -
+          - 270
+          - 115
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 114
+        -
+          - 270
+          - 113
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 112
+        -
+          - 270
+          - 111
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 110
+        -
+          - 270
+          - 109
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 108
+        -
+          - 270
+          - 107
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 106
+        -
+          - 270
+          - 105
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 104
+        -
+          - 270
+          - 103
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 102
+        -
+          - 270
+          - 101
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 270
+          - 100
+        -
+          - 270
+          - 99
+  -
+    - 8
+    - layer: 231
+      purpose: 240
+      net: ""
+      origin:
+        - 271
+        - 91
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 5
+      overbar: false
+      visible: true
+      drafting: true
+      text: t1<t<t2
+      evaluator: cdsNLPEvalText
+instances:
+  {}
+props:
+  interfaceLastChanged:
+    - 4
+    - time_val: 1570146023
+  partName:
+    - 3
+    - aib_phase_interp
+  pin#:
+    - 0
+    - 12
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("intout" "VDD" "VSS" "a_in" "sn" "sp")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 1750
+  _dbvCvTimeStamp:
+    - 0
+    - 1750
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_phase_interp.yaml b/src/aib_ams/schematic/netlist_info/aib_phase_interp.yaml
new file mode 100644
index 0000000..061ec39
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_phase_interp.yaml
@@ -0,0 +1,1058 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_phase_interp
+view_name: schematic
+bbox:
+  - -482
+  - -570
+  - 912
+  - 585
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -420
+            - 230
+            - R0
+          bbox:
+            - -481
+            - 204
+            - -410
+            - 240
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -445
+            - 230
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -420
+            - 210
+            - R0
+          bbox:
+            - -481
+            - 184
+            - -410
+            - 220
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -445
+            - 210
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  a_in:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -420
+            - 130
+            - R0
+          bbox:
+            - -477
+            - 104
+            - -420
+            - 140
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -450
+            - 130
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  intout:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -360
+            - 130
+            - R0
+          bbox:
+            - -360
+            - 104
+            - -303
+            - 140
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -335
+            - 130
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  sn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -420
+            - 50
+            - R0
+          bbox:
+            - -477
+            - 24
+            - -420
+            - 60
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -450
+            - 50
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  sp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -420
+            - 90
+            - R0
+          bbox:
+            - -477
+            - 64
+            - -420
+            - 100
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -450
+            - 90
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: a_in_buf
+      origin:
+        - 460
+        - 447
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a_in_buf
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: b_in
+      origin:
+        - 460
+        - 427
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: b_in
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 40
+          - 510
+        -
+          - 40
+          - 550
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 33
+        - 540
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: mid
+      points:
+        -
+          - 160
+          - 450
+        -
+          - 200
+          - 450
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: a_in_buf
+      points:
+        -
+          - 440
+          - 440
+        -
+          - 490
+          - 440
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -237
+        - -360
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -230
+          - -380
+        -
+          - -230
+          - -350
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: b_in
+      points:
+        -
+          - -220
+          - 70
+        -
+          - -180
+          - 70
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: a_in_buf
+      points:
+        -
+          - -220
+          - 470
+        -
+          - -180
+          - 470
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 690
+          - 280
+        -
+          - 690
+          - 320
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 683
+        - 300
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -237
+        - -310
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -230
+          - -320
+        -
+          - -230
+          - -290
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -230
+          - -570
+        -
+          - -230
+          - -540
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: mid
+      points:
+        -
+          - 160
+          - 50
+        -
+          - 200
+          - 50
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: b_in
+      points:
+        -
+          - 440
+          - 420
+        -
+          - 490
+          - 420
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -230
+          - -130
+        -
+          - -230
+          - -100
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -237
+        - -110
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: b_in
+      origin:
+        - -210
+        - 77
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: b_in
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: a_in_buf
+      origin:
+        - -210
+        - 477
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a_in_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -220
+          - 430
+        -
+          - -180
+          - 430
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -210
+        - 437
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: mid
+      origin:
+        - 180
+        - 457
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: mid
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: mid
+      points:
+        -
+          - 200
+          - 50
+        -
+          - 200
+          - 450
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 690
+          - 540
+        -
+          - 690
+          - 580
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 40
+          - -50
+        -
+          - 40
+          - -10
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 683
+        - 570
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 33
+        - -30
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: intout
+      points:
+        -
+          - 870
+          - 440
+        -
+          - 910
+          - 440
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: intout
+      origin:
+        - 890
+        - 447
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: intout
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: sn
+      points:
+        -
+          - 440
+          - 480
+        -
+          - 490
+          - 480
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: sp
+      points:
+        -
+          - 440
+          - 460
+        -
+          - 490
+          - 460
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: sp
+      points:
+        -
+          - 440
+          - 400
+        -
+          - 490
+          - 400
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: sn
+      points:
+        -
+          - 440
+          - 380
+        -
+          - 490
+          - 380
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sn
+      origin:
+        - 460
+        - 487
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sn
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sp
+      origin:
+        - 460
+        - 467
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sp
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sp
+      origin:
+        - 460
+        - 407
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sp
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: sn
+      origin:
+        - 460
+        - 387
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: sn
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -237
+        - -550
+      alignment: 5
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: a_inb,VDD
+      points:
+        -
+          - -360
+          - -460
+        -
+          - -330
+          - -460
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: a_inb
+      points:
+        -
+          - -130
+          - -210
+        -
+          - -100
+          - -210
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: a_inb
+      origin:
+        - -110
+        - -203
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a_inb
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: a_inb,VDD
+      origin:
+        - -340
+        - -453
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a_inb,VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: a_in_buf
+      points:
+        -
+          - -110
+          - -460
+        -
+          - -70
+          - -460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: a_in_buf
+      origin:
+        - -80
+        - -453
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a_in_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: a_in
+      points:
+        -
+          - -360
+          - -210
+        -
+          - -330
+          - -210
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: a_in
+      origin:
+        - -350
+        - -203
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: a_in
+instances:
+  XDC:
+    lib_name: aib_ams
+    cell_name: aib_dlycell_core
+    view_name: symbol
+    xform:
+      - -200
+      - -30
+      - R0
+    bbox:
+      - -200
+      - -30
+      - 188
+      - 530
+    connections:
+      VDD: VDD
+      VSS: VSS
+      bk1: VDD
+      ci_p: mid
+      co_p: mid
+      in_p: a_in_buf
+      out_p: b_in
+    params:
+      {}
+    is_primitive: false
+  XINT:
+    lib_name: bag3_analog
+    cell_name: phase_interp
+    view_name: symbol
+    xform:
+      - 490
+      - 320
+      - R0
+    bbox:
+      - 486
+      - 316
+      - 874
+      - 544
+    connections:
+      VDD: VDD
+      VSS: VSS
+      a_en: sn
+      a_enb: sp
+      a_in: a_in_buf
+      b_en: sp
+      b_enb: sn
+      b_in: b_in
+      out: intout
+    params:
+      {}
+    is_primitive: false
+  XINV:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - -330
+      - -310
+      - R0
+    bbox:
+      - -334
+      - -294
+      - -126
+      - -126
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: a_in
+      out: a_inb
+    params:
+      {}
+    is_primitive: false
+  XNAND:
+    lib_name: bag3_digital
+    cell_name: nand
+    view_name: symbol
+    xform:
+      - -330
+      - -540
+      - R0
+    bbox:
+      - -334
+      - -544
+      - -32
+      - -376
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: a_inb,VDD
+      out: a_in_buf
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 11103
+  instance#:
+    - 0
+    - 6
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1575261712
+  net#:
+    - 0
+    - 2
+  pin#:
+    - 0
+    - 15
+  schGeometryLastUpdated:
+    - 0
+    - 11103
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 11103
+  _dbvCvTimeStamp:
+    - 0
+    - 11103
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_phasedet.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_phasedet.symbol.yaml
new file mode 100644
index 0000000..37a171e
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_phasedet.symbol.yaml
@@ -0,0 +1,420 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_phasedet
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 314
+  - 204
+terminals:
+  CLKA:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 116
+          - 4
+          - 124
+    stype: 0
+    ttype: 0
+  CLKB:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 96
+          - 4
+          - 104
+    stype: 0
+    ttype: 0
+  RSTb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 76
+          - 4
+          - 84
+    stype: 0
+    ttype: 0
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 156
+          - 196
+          - 164
+          - 204
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 156
+          - -4
+          - 164
+          - 4
+    stype: 2
+    ttype: 2
+  t_down:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 306
+          - 116
+          - 314
+          - 124
+    stype: 0
+    ttype: 1
+  t_up:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 306
+          - 96
+          - 314
+          - 104
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 80
+        -
+          - 40
+          - 80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 80
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: RSTb
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 100
+        -
+          - 40
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 100
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: CLKB
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 120
+        -
+          - 40
+          - 120
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 120
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: CLKA
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 310
+          - 100
+        -
+          - 270
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 264
+        - 100
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: t_up
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 310
+          - 120
+        -
+          - 270
+          - 120
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 264
+        - 120
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: t_down
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 40
+        -
+          - 160
+          - 0
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 160
+        - 46
+      alignment: 1
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 160
+          - 200
+        -
+          - 160
+          - 160
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 150
+        - 194
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 310
+        - 200
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 180
+        - 170
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 55
+        - 180
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - 40
+        - 270
+        - 160
+  -
+    - 4
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 140
+        - 80
+        - 180
+        - 120
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 180
+          - 130
+        -
+          - 140
+          - 70
+instances:
+  {}
+props:
+  interfaceLastChanged:
+    - 4
+    - time_val: 1565823633
+  partName:
+    - 3
+    - aib_phasedet
+  pin#:
+    - 0
+    - 7
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("t_down" "t_up" "VDD" "VSS" "CLKA" "CLKB" "RSTb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 192
+  _dbvCvTimeStamp:
+    - 0
+    - 192
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_phasedet.yaml b/src/aib_ams/schematic/netlist_info/aib_phasedet.yaml
new file mode 100644
index 0000000..0e337c0
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_phasedet.yaml
@@ -0,0 +1,1407 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_phasedet
+view_name: schematic
+bbox:
+  - -191
+  - -740
+  - 590
+  - 540
+terminals:
+  CLKA:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - 410
+            - R0
+          bbox:
+            - -177
+            - 384
+            - -120
+            - 420
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - 410
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  CLKB:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - 390
+            - R0
+          bbox:
+            - -177
+            - 364
+            - -120
+            - 400
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - 390
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  RSTb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -120
+            - 370
+            - R0
+          bbox:
+            - -177
+            - 344
+            - -120
+            - 380
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -150
+            - 370
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -130
+            - 480
+            - R0
+          bbox:
+            - -191
+            - 454
+            - -120
+            - 490
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -155
+            - 480
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -130
+            - 460
+            - R0
+          bbox:
+            - -191
+            - 434
+            - -120
+            - 470
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -155
+            - 460
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  t_down:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -60
+            - 390
+            - R0
+          bbox:
+            - -60
+            - 364
+            - -3
+            - 400
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -35
+            - 390
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  t_up:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -60
+            - 410
+            - R0
+          bbox:
+            - -60
+            - 384
+            - -3
+            - 420
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -35
+            - 410
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: phase_clk
+      origin:
+        - 270
+        - 87
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: phase_clk
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: phase_clkb
+      origin:
+        - 260
+        - -613
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: phase_clkb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: phase_clkb
+      points:
+        -
+          - 200
+          - -280
+        -
+          - 300
+          - -280
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: i_del_n
+      points:
+        -
+          - 100
+          - 60
+        -
+          - 200
+          - 60
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -20
+          - -380
+        -
+          - -20
+          - -420
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -27
+        - -384
+      alignment: 2
+      orient: MYR90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: CLKB
+      points:
+        -
+          - -180
+          - -260
+        -
+          - -140
+          - -260
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: CLKB
+      origin:
+        - -144
+        - -267
+      alignment: 8
+      orient: MX
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: CLKB
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: i_del_n
+      points:
+        -
+          - 200
+          - 60
+        -
+          - 200
+          - 120
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -20
+          - -100
+        -
+          - -20
+          - -140
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -27
+        - -136
+      alignment: 8
+      orient: MYR90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 400
+          - 220
+        -
+          - 400
+          - 260
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 393
+        - 224
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 400
+          - -200
+        -
+          - 400
+          - -160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 393
+        - -196
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<1>
+      points:
+        -
+          - 500
+          - 120
+        -
+          - 540
+          - 120
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<1>
+      origin:
+        - 504
+        - 127
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<1>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: t_up
+      points:
+        -
+          - 500
+          - 140
+        -
+          - 540
+          - 140
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: t_up
+      origin:
+        - 504
+        - 147
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: t_up
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: phase_clk
+      points:
+        -
+          - 220
+          - 80
+        -
+          - 300
+          - 80
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: i_del_n
+      origin:
+        - 270
+        - -333
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: i_del_n
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: i_del_n
+      points:
+        -
+          - 200
+          - 120
+        -
+          - 300
+          - 120
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: phase_clkb
+      points:
+        -
+          - 200
+          - -280
+        -
+          - 200
+          - -220
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: RSTb
+      points:
+        -
+          - 260
+          - 50
+        -
+          - 300
+          - 50
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: RSTb
+      origin:
+        - 296
+        - 57
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: RSTb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 400
+          - -40
+        -
+          - 400
+          - 0
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 400
+          - -460
+        -
+          - 400
+          - -420
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 393
+        - -424
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<2>
+      points:
+        -
+          - 500
+          - -300
+        -
+          - 540
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<2>
+      origin:
+        - 504
+        - -293
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<2>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: t_down
+      points:
+        -
+          - 500
+          - -280
+        -
+          - 540
+          - -280
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: t_down
+      origin:
+        - 504
+        - -273
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: t_down
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: i_del_n
+      points:
+        -
+          - 220
+          - -340
+        -
+          - 300
+          - -340
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: phase_clk
+      origin:
+        - 250
+        - -293
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: phase_clk
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: phase_clk
+      points:
+        -
+          - 100
+          - -300
+        -
+          - 300
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: phase_clkb
+      origin:
+        - 250
+        - -273
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: phase_clkb
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: i_del_p
+      origin:
+        - 270
+        - 427
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: i_del_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: RSTb
+      points:
+        -
+          - 260
+          - -370
+        -
+          - 300
+          - -370
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: RSTb
+      origin:
+        - 296
+        - -363
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: RSTb
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 393
+        - -4
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 400
+          - 300
+        -
+          - 400
+          - 340
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 393
+        - 336
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 400
+          - 500
+        -
+          - 400
+          - 540
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 393
+        - 504
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: i_del_p
+      points:
+        -
+          - 220
+          - 420
+        -
+          - 300
+          - 420
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: phase_clkb
+      points:
+        -
+          - 100
+          - -220
+        -
+          - 200
+          - -220
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 400
+          - -540
+        -
+          - 400
+          - -500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: i_del_n
+      origin:
+        - 260
+        - 127
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: i_del_n
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 400
+          - -740
+        -
+          - 400
+          - -700
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 393
+        - -704
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 393
+        - -556
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: phase_clkb
+      points:
+        -
+          - 220
+          - -620
+        -
+          - 300
+          - -620
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: i_del_p
+      points:
+        -
+          - 100
+          - 140
+        -
+          - 300
+          - 140
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<3>
+      points:
+        -
+          - 500
+          - -620
+        -
+          - 540
+          - -620
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<0>
+      origin:
+        - 504
+        - 427
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<3:0>
+      points:
+        -
+          - 400
+          - -90
+        -
+          - 440
+          - -90
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<3:0>
+      origin:
+        - 436
+        - -83
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<3:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<0>
+      points:
+        -
+          - 500
+          - 420
+        -
+          - 540
+          - 420
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<3>
+      origin:
+        - 504
+        - -613
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<3>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -20
+          - -60
+        -
+          - -20
+          - -20
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -27
+        - -24
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -20
+          - 220
+        -
+          - -20
+          - 260
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -27
+        - 224
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: i_del_p
+      origin:
+        - 260
+        - 147
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: i_del_p
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: CLKA
+      points:
+        -
+          - -180
+          - 100
+        -
+          - -140
+          - 100
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: CLKA
+      origin:
+        - -144
+        - 107
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: CLKA
+instances:
+  XDUMD:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - 300
+      - -720
+      - R0
+    bbox:
+      - 296
+      - -704
+      - 504
+      - -536
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: phase_clkb
+      out: unused<3>
+    params:
+      {}
+    is_primitive: false
+  XDUMU:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - 300
+      - 320
+      - R0
+    bbox:
+      - 296
+      - 336
+      - 504
+      - 504
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: i_del_p
+      out: unused<0>
+    params:
+      {}
+    is_primitive: false
+  XFLOPD:
+    lib_name: bag3_digital
+    cell_name: flop_strongarm
+    view_name: symbol
+    xform:
+      - 300
+      - -420
+      - R0
+    bbox:
+      - 296
+      - -424
+      - 578
+      - -196
+    connections:
+      VDD: VDD
+      VSS: VSS
+      clk: i_del_n
+      inn: phase_clk
+      inp: phase_clkb
+      outn: unused<2>
+      outp: t_down
+      rstlb: RSTb
+    params:
+      {}
+    is_primitive: false
+  XFLOPU:
+    lib_name: bag3_digital
+    cell_name: flop_strongarm
+    view_name: symbol
+    xform:
+      - 300
+      - 0
+      - R0
+    bbox:
+      - 296
+      - -4
+      - 578
+      - 224
+    connections:
+      VDD: VDD
+      VSS: VSS
+      clk: phase_clk
+      inn: i_del_n
+      inp: i_del_p
+      outn: unused<1>
+      outp: t_up
+      rstlb: RSTb
+    params:
+      {}
+    is_primitive: false
+  XNC<3:0>:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 440
+      - -90
+      - R90
+    bbox:
+      - 436
+      - -100
+      - 490
+      - -80
+    connections:
+      noConn: unused<3:0>
+    params:
+      {}
+    is_primitive: true
+  XSED:
+    lib_name: bag3_digital
+    cell_name: se_to_diff
+    view_name: symbol
+    xform:
+      - -140
+      - -140
+      - MX
+    bbox:
+      - -144
+      - -384
+      - 178
+      - -136
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: CLKB
+      outn: phase_clkb
+      outp: phase_clk
+    params:
+      {}
+    is_primitive: false
+  XSEU:
+    lib_name: bag3_digital
+    cell_name: se_to_diff
+    view_name: symbol
+    xform:
+      - -140
+      - -20
+      - R0
+    bbox:
+      - -144
+      - -24
+      - 178
+      - 224
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: CLKA
+      outn: i_del_n
+      outp: i_del_p
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 21256
+  instance#:
+    - 0
+    - 8
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1571110357
+  net#:
+    - 0
+    - 2
+  pin#:
+    - 0
+    - 7
+  schGeometryLastUpdated:
+    - 0
+    - 21256
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 21256
+  _dbvCvTimeStamp:
+    - 0
+    - 21256
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_rxanlg_core.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_rxanlg_core.symbol.yaml
new file mode 100644
index 0000000..b488490
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_rxanlg_core.symbol.yaml
@@ -0,0 +1,688 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_rxanlg_core
+view_name: symbol
+bbox:
+  - -4
+  - -160
+  - 478
+  - 104
+terminals:
+  VDDCore:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 216
+          - 96
+          - 224
+          - 104
+    stype: 1
+    ttype: 2
+  VDDIO:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 196
+          - 96
+          - 204
+          - 104
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 176
+          - 96
+          - 184
+          - 104
+    stype: 2
+    ttype: 2
+  clk_en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -4
+          - 4
+          - 4
+    stype: 0
+    ttype: 0
+  data_en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -24
+          - 4
+          - -16
+    stype: 0
+    ttype: 0
+  iclkn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -44
+          - 4
+          - -36
+    stype: 0
+    ttype: 0
+  iopad:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -64
+          - 4
+          - -56
+    stype: 0
+    ttype: 0
+  oclkn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 376
+          - -4
+          - 384
+          - 4
+    stype: 0
+    ttype: 1
+  oclkp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 376
+          - -24
+          - 384
+          - -16
+    stype: 0
+    ttype: 1
+  odat:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 376
+          - -44
+          - 384
+          - -36
+    stype: 0
+    ttype: 1
+  odat_async:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 376
+          - -64
+          - 384
+          - -56
+    stype: 0
+    ttype: 1
+  por:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -84
+          - 4
+          - -76
+    stype: 0
+    ttype: 0
+  por_vccl:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 376
+          - -124
+          - 384
+          - -116
+    stype: 1
+    ttype: 1
+  porb_vccl:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 376
+          - -144
+          - 384
+          - -136
+    stype: 1
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 340
+          - -120
+        -
+          - 380
+          - -120
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - -120
+      alignment: 1
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -80
+        -
+          - 40
+          - -80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -80
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -60
+        -
+          - 40
+          - -60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -60
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iopad
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -40
+        -
+          - 40
+          - -40
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -40
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iclkn
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -20
+        -
+          - 40
+          - -20
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -20
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_en
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 0
+        -
+          - 40
+          - 0
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 0
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_en
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 380
+          - -60
+        -
+          - 340
+          - -60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - -60
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat_async
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 380
+          - -40
+        -
+          - 340
+          - -40
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - -40
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 380
+          - -20
+        -
+          - 340
+          - -20
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - -20
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkp
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 380
+          - 0
+        -
+          - 340
+          - 0
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - 0
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkn
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 180
+          - 100
+        -
+          - 180
+          - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 180
+        - 54
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 200
+          - 100
+        -
+          - 200
+          - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 200
+        - 54
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 220
+          - 100
+        -
+          - 220
+          - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 220
+        - 54
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - -160
+        - 380
+        - 100
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 350
+        - 60
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 175
+        - -50
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - -160
+        - 340
+        - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 340
+          - -140
+        -
+          - 380
+          - -140
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 334
+        - -140
+      alignment: 1
+      orient: MY
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1569949589
+  partName:
+    - 3
+    - aib_rxanlg_core
+  pin#:
+    - 0
+    - 15
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("oclkn" "oclkp" "odat" "odat_async" "por_vccl" "porb_vccl" "VDDCore" "VDDIO" "VSS" "clk_en" "data_en" "iclkn" "iopad" "por")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 343
+  _dbvCvTimeStamp:
+    - 0
+    - 343
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_rxanlg_core.yaml b/src/aib_ams/schematic/netlist_info/aib_rxanlg_core.yaml
new file mode 100644
index 0000000..2f5f353
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_rxanlg_core.yaml
@@ -0,0 +1,3150 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_rxanlg_core
+view_name: schematic
+bbox:
+  - -91
+  - -3100
+  - 1743
+  - -205
+terminals:
+  VDDCore:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 0
+            - -340
+            - R0
+          bbox:
+            - -61
+            - -366
+            - 10
+            - -330
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -25
+            - -340
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VDDIO:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 0
+            - -360
+            - R0
+          bbox:
+            - -61
+            - -386
+            - 10
+            - -350
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -25
+            - -360
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - 0
+            - -380
+            - R0
+          bbox:
+            - -61
+            - -406
+            - 10
+            - -370
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -25
+            - -380
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  clk_en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - 0
+            - -540
+            - R0
+          bbox:
+            - -57
+            - -566
+            - 0
+            - -530
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -30
+            - -540
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  data_en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - 0
+            - -520
+            - R0
+          bbox:
+            - -57
+            - -546
+            - 0
+            - -510
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -30
+            - -520
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  iclkn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - 0
+            - -480
+            - R0
+          bbox:
+            - -57
+            - -506
+            - 0
+            - -470
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -30
+            - -480
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  iopad:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - 0
+            - -460
+            - R0
+          bbox:
+            - -57
+            - -486
+            - 0
+            - -450
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -30
+            - -460
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  oclkn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 60
+            - -460
+            - R0
+          bbox:
+            - 60
+            - -486
+            - 117
+            - -450
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 85
+            - -460
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  oclkp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 60
+            - -480
+            - R0
+          bbox:
+            - 60
+            - -506
+            - 117
+            - -470
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 85
+            - -480
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  odat:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 60
+            - -500
+            - R0
+          bbox:
+            - 60
+            - -526
+            - 117
+            - -490
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 85
+            - -500
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  odat_async:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 60
+            - -520
+            - R0
+          bbox:
+            - 60
+            - -546
+            - 117
+            - -510
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 85
+            - -520
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  por:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - 0
+            - -590
+            - R0
+          bbox:
+            - -57
+            - -616
+            - 0
+            - -580
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -30
+            - -590
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  por_vccl:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 60
+            - -560
+            - R0
+          bbox:
+            - 60
+            - -586
+            - 117
+            - -550
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 85
+            - -560
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 1
+  porb_vccl:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - 60
+            - -580
+            - R0
+          bbox:
+            - 60
+            - -606
+            - 117
+            - -570
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - 85
+            - -580
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 1500
+          - -400
+        -
+          - 1500
+          - -360
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 1493
+        - -396
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odat_async
+      points:
+        -
+          - 1600
+          - -480
+        -
+          - 1640
+          - -480
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odat_async
+      origin:
+        - 1604
+        - -473
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat_async
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1010
+          - -3100
+        -
+          - 1010
+          - -3060
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1493
+        - -564
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<0>
+      points:
+        -
+          - 1600
+          - -900
+        -
+          - 1640
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<0>
+      origin:
+        - 1604
+        - -893
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por
+      points:
+        -
+          - 300
+          - -2420
+        -
+          - 340
+          - -2420
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por
+      origin:
+        - 336
+        - -2413
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc5
+      origin:
+        - 726
+        - -2913
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc5
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_buf
+      origin:
+        - 564
+        - -2413
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1010
+          - -2680
+        -
+          - 1010
+          - -2640
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1003
+        - -2644
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 440
+          - -2340
+        -
+          - 440
+          - -2300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 433
+        - -2336
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 433
+        - -2924
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 300
+          - -2840
+        -
+          - 340
+          - -2840
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 640
+          - -1510
+        -
+          - 680
+          - -1510
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<2:0>
+      points:
+        -
+          - 1650
+          - -1880
+        -
+          - 1650
+          - -1840
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 440
+          - -2960
+        -
+          - 440
+          - -2920
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 336
+        - -2833
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 440
+          - -2760
+        -
+          - 440
+          - -2720
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc5
+      points:
+        -
+          - 690
+          - -2920
+        -
+          - 730
+          - -2920
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_buf
+      origin:
+        - 564
+        - -2433
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1360
+          - -900
+        -
+          - 1400
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1396
+        - -893
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 440
+          - -2540
+        -
+          - 440
+          - -2500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 433
+        - -2504
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odatb
+      points:
+        -
+          - 1280
+          - -480
+        -
+          - 1400
+          - -480
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1500
+          - -1020
+        -
+          - 1500
+          - -980
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 650
+          - -2050
+        -
+          - 690
+          - -2050
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 686
+        - -2043
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_en_vccl
+      points:
+        -
+          - 1300
+          - -1360
+        -
+          - 1340
+          - -1360
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad
+      points:
+        -
+          - 280
+          - -860
+        -
+          - 320
+          - -860
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: data_enb_vccl
+      points:
+        -
+          - 1310
+          - -1950
+        -
+          - 1350
+          - -1950
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: data_enb_vccl
+      origin:
+        - 1314
+        - -1943
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_enb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 1050
+          - -1740
+        -
+          - 1050
+          - -1700
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 1043
+        - -1736
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<1>
+      origin:
+        - 1274
+        - -2853
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<1>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc4
+      points:
+        -
+          - 690
+          - -2900
+        -
+          - 730
+          - -2900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dumn
+      origin:
+        - 630
+        - -2853
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dumn
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc4
+      origin:
+        - 726
+        - -2893
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc4
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dumn
+      points:
+        -
+          - 560
+          - -2860
+        -
+          - 730
+          - -2860
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dump
+      origin:
+        - 630
+        - -2833
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dump
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dump
+      points:
+        -
+          - 560
+          - -2840
+        -
+          - 730
+          - -2840
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_buf
+      points:
+        -
+          - 700
+          - -480
+        -
+          - 740
+          - -480
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_buf
+      origin:
+        - 736
+        - -473
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<1>
+      points:
+        -
+          - 1270
+          - -2860
+        -
+          - 1310
+          - -2860
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 640
+          - -1470
+        -
+          - 680
+          - -1470
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 676
+        - -1463
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 433
+        - -2756
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_buf
+      points:
+        -
+          - 700
+          - -500
+        -
+          - 740
+          - -500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_buf
+      origin:
+        - 736
+        - -493
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_buf
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<2>
+      origin:
+        - 1274
+        - -2873
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<2>
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 676
+        - -1503
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 970
+          - -1740
+        -
+          - 970
+          - -1700
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 963
+        - -1736
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 650
+          - -2070
+        -
+          - 690
+          - -2070
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 686
+        - -2063
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: data_en_vccl
+      points:
+        -
+          - 1310
+          - -1920
+        -
+          - 1350
+          - -1920
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: data_en_vccl
+      origin:
+        - 1314
+        - -1913
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_en_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 650
+          - -2030
+        -
+          - 690
+          - -2030
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 686
+        - -2023
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: data_en
+      points:
+        -
+          - 650
+          - -1960
+        -
+          - 690
+          - -1960
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: data_en
+      origin:
+        - 686
+        - -1953
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_en
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1010
+          - -2220
+        -
+          - 1010
+          - -2180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1003
+        - -2184
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: unused<2:0>
+      origin:
+        - 1643
+        - -1876
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: unused<2:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 960
+          - -1180
+        -
+          - 960
+          - -1140
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc3
+      points:
+        -
+          - 690
+          - -2460
+        -
+          - 730
+          - -2460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc3
+      origin:
+        - 726
+        - -2453
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc3
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 1274
+        - -2453
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 1010
+          - -2330
+        -
+          - 1010
+          - -2290
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: oclkn_vccl
+      points:
+        -
+          - 560
+          - -880
+        -
+          - 740
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_en_vccl
+      origin:
+        - 1304
+        - -1353
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_en_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1020
+          - -700
+        -
+          - 1020
+          - -660
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1013
+        - -664
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 1020
+          - -350
+        -
+          - 1020
+          - -310
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 1013
+        - -346
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1493
+        - -984
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odatb
+      origin:
+        - 1284
+        - -473
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odatb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odat
+      points:
+        -
+          - 1280
+          - -460
+        -
+          - 1320
+          - -460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odat
+      origin:
+        - 1284
+        - -453
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odat
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_buf
+      points:
+        -
+          - 560
+          - -2420
+        -
+          - 730
+          - -2420
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc3
+      origin:
+        - 726
+        - -2873
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc3
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_buf
+      points:
+        -
+          - 560
+          - -2440
+        -
+          - 730
+          - -2440
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 1010
+          - -2750
+        -
+          - 1010
+          - -2710
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odatp_vccl
+      points:
+        -
+          - 560
+          - -440
+        -
+          - 740
+          - -440
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_enb_vccl
+      points:
+        -
+          - 1300
+          - -1390
+        -
+          - 1340
+          - -1390
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 1500
+          - -820
+        -
+          - 1500
+          - -780
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 1493
+        - -816
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc5
+      points:
+        -
+          - 690
+          - -2500
+        -
+          - 730
+          - -2500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc5
+      origin:
+        - 726
+        - -2493
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc5
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: odatn_vccl
+      points:
+        -
+          - 560
+          - -460
+        -
+          - 740
+          - -460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_en
+      origin:
+        - 676
+        - -1393
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_en
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1020
+          - -1120
+        -
+          - 1020
+          - -1080
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1013
+        - -1084
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 1020
+          - -770
+        -
+          - 1020
+          - -730
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 1013
+        - -766
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: oclkn
+      points:
+        -
+          - 1280
+          - -900
+        -
+          - 1320
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: oclkn
+      origin:
+        - 1284
+        - -893
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: oclkp
+      points:
+        -
+          - 1280
+          - -880
+        -
+          - 1320
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: oclkp
+      origin:
+        - 1284
+        - -873
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkp
+  -
+    - 7
+    - layer: 230
+      purpose: 4294967295
+      net: ""
+      origin:
+        - 1130
+        - -230
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 24
+      overbar: false
+      visible: true
+      drafting: true
+      text: Note that odat delay should be matched to oclk and oclk_b delay.
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 1270
+          - -2460
+        -
+          - 1310
+          - -2460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iopad
+      origin:
+        - 316
+        - -433
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iopad
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 1040
+          - -1180
+        -
+          - 1040
+          - -1140
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 1003
+        - -2326
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 676
+        - -1483
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 440
+          - -800
+        -
+          - 440
+          - -760
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 993
+        - -1624
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 640
+          - -1490
+        -
+          - 680
+          - -1490
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1003
+        - -3064
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: data_enb_vccl
+      points:
+        -
+          - 280
+          - -480
+        -
+          - 320
+          - -480
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: data_enb_vccl
+      origin:
+        - 316
+        - -473
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_enb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 440
+          - -360
+        -
+          - 440
+          - -320
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 433
+        - -356
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_enb_vccl
+      origin:
+        - 1304
+        - -1383
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_enb_vccl
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odatn_vccl
+      origin:
+        - 574
+        - -453
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odatn_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_en
+      points:
+        -
+          - 640
+          - -1400
+        -
+          - 680
+          - -1400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: odatp_vccl
+      origin:
+        - 574
+        - -433
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: odatp_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: data_en_vccl
+      points:
+        -
+          - 280
+          - -460
+        -
+          - 320
+          - -460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: data_en_vccl
+      origin:
+        - 316
+        - -453
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: data_en_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 440
+          - -580
+        -
+          - 440
+          - -540
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 433
+        - -544
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iopad
+      points:
+        -
+          - 280
+          - -440
+        -
+          - 320
+          - -440
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 433
+        - -796
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_enb_vccl
+      points:
+        -
+          - 280
+          - -920
+        -
+          - 320
+          - -920
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_enb_vccl
+      origin:
+        - 316
+        - -913
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_enb_vccl
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 1033
+        - -1176
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: oclkn_vccl
+      origin:
+        - 564
+        - -873
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkn_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1000
+          - -1660
+        -
+          - 1000
+          - -1620
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: oclkp_vccl
+      origin:
+        - 564
+        - -853
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: oclkp_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: clk_en_vccl
+      points:
+        -
+          - 280
+          - -900
+        -
+          - 320
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: clk_en_vccl
+      origin:
+        - 316
+        - -893
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: clk_en_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: iclkn
+      points:
+        -
+          - 280
+          - -880
+        -
+          - 320
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iclkn
+      origin:
+        - 316
+        - -873
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iclkn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 440
+          - -1020
+        -
+          - 440
+          - -980
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 433
+        - -984
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: iopad
+      origin:
+        - 316
+        - -853
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: iopad
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 953
+        - -1176
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: oclkp_vccl
+      points:
+        -
+          - 560
+          - -860
+        -
+          - 740
+          - -860
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 1003
+        - -2746
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: unused<2>
+      points:
+        -
+          - 1270
+          - -2880
+        -
+          - 1310
+          - -2880
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 1270
+          - -2440
+        -
+          - 1310
+          - -2440
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 1274
+        - -2433
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 700
+          - -520
+        -
+          - 740
+          - -520
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 736
+        - -513
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc4
+      points:
+        -
+          - 690
+          - -2480
+        -
+          - 730
+          - -2480
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc4
+      origin:
+        - 726
+        - -2473
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc4
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_buf
+      points:
+        -
+          - 700
+          - -920
+        -
+          - 740
+          - -920
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_buf
+      origin:
+        - 736
+        - -913
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1500
+          - -600
+        -
+          - 1500
+          - -560
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc3
+      points:
+        -
+          - 690
+          - -2880
+        -
+          - 730
+          - -2880
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_buf
+      points:
+        -
+          - 690
+          - -900
+        -
+          - 740
+          - -900
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_buf
+      origin:
+        - 726
+        - -893
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 700
+          - -940
+        -
+          - 740
+          - -940
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 736
+        - -933
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+instances:
+  XDUM:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - 1400
+      - -1000
+      - R0
+    bbox:
+      - 1396
+      - -984
+      - 1604
+      - -816
+    connections:
+      VDD: VDDCore
+      VSS: VSS
+      in: VSS
+      out: unused<0>
+    params:
+      {}
+    is_primitive: false
+  XINV:
+    lib_name: bag3_digital
+    cell_name: inv
+    view_name: symbol
+    xform:
+      - 1400
+      - -580
+      - R0
+    bbox:
+      - 1396
+      - -564
+      - 1604
+      - -396
+    connections:
+      VDD: VDDCore
+      VSS: VSS
+      in: odatb
+      out: odat_async
+    params:
+      {}
+    is_primitive: false
+  XLV_CLK:
+    lib_name: bag3_digital
+    cell_name: lvshift_core_w_drivers
+    view_name: symbol
+    xform:
+      - 740
+      - -1080
+      - R0
+    bbox:
+      - 736
+      - -1084
+      - 1284
+      - -766
+    connections:
+      VDD: VDDCore
+      VSS: VSS
+      in: oclkp_vccl
+      inb: oclkn_vccl
+      out: oclkp
+      outb: oclkn
+      rst_casc: porb_buf
+      rst_out: por_buf
+      rst_outb: VSS
+    params:
+      {}
+    is_primitive: false
+  XLV_CLK_EN:
+    lib_name: bag3_digital
+    cell_name: lvshift
+    view_name: symbol
+    xform:
+      - 680
+      - -1620
+      - R0
+    bbox:
+      - 676
+      - -1624
+      - 1304
+      - -1176
+    connections:
+      VDD: VDDIO
+      VDD_in: VDDCore
+      VSS: VSS
+      in: clk_en
+      out: clk_en_vccl
+      outb: clk_enb_vccl
+      rst_casc: porb_vccl
+      rst_out: por_vccl
+      rst_outb: VSS
+    params:
+      {}
+    is_primitive: false
+  XLV_DATA:
+    lib_name: bag3_digital
+    cell_name: lvshift_core_w_drivers
+    view_name: symbol
+    xform:
+      - 740
+      - -660
+      - R0
+    bbox:
+      - 736
+      - -664
+      - 1284
+      - -346
+    connections:
+      VDD: VDDCore
+      VSS: VSS
+      in: odatp_vccl
+      inb: odatn_vccl
+      out: odat
+      outb: odatb
+      rst_casc: porb_buf
+      rst_out: por_buf
+      rst_outb: VSS
+    params:
+      {}
+    is_primitive: false
+  XLV_DATA_EN:
+    lib_name: bag3_digital
+    cell_name: lvshift
+    view_name: symbol
+    xform:
+      - 690
+      - -2180
+      - R0
+    bbox:
+      - 686
+      - -2184
+      - 1314
+      - -1736
+    connections:
+      VDD: VDDIO
+      VDD_in: VDDCore
+      VSS: VSS
+      in: data_en
+      out: data_en_vccl
+      outb: data_enb_vccl
+      rst_casc: porb_vccl
+      rst_out: por_vccl
+      rst_outb: VSS
+    params:
+      {}
+    is_primitive: false
+  XLV_DUM:
+    lib_name: bag3_digital
+    cell_name: lvshift_core_w_drivers
+    view_name: symbol
+    xform:
+      - 730
+      - -3060
+      - R0
+    bbox:
+      - 726
+      - -3064
+      - 1274
+      - -2746
+    connections:
+      VDD: VDDIO
+      VSS: VSS
+      in: dump
+      inb: dumn
+      out: unused<1>
+      outb: unused<2>
+      rst_casc: nc4
+      rst_out: nc3
+      rst_outb: nc5
+    params:
+      {}
+    is_primitive: false
+  XLV_POR:
+    lib_name: bag3_digital
+    cell_name: lvshift_core_w_drivers
+    view_name: symbol
+    xform:
+      - 730
+      - -2640
+      - R0
+    bbox:
+      - 726
+      - -2644
+      - 1274
+      - -2326
+    connections:
+      VDD: VDDIO
+      VSS: VSS
+      in: por_buf
+      inb: porb_buf
+      out: por_vccl
+      outb: porb_vccl
+      rst_casc: nc4
+      rst_out: nc3
+      rst_outb: nc5
+    params:
+      {}
+    is_primitive: false
+  XNC<2:0>:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 1650
+      - -1880
+      - R0
+    bbox:
+      - 1640
+      - -1930
+      - 1660
+      - -1876
+    connections:
+      noConn: unused<2:0>
+    params:
+      {}
+    is_primitive: true
+  XPOR:
+    lib_name: bag3_digital
+    cell_name: inv_chain
+    view_name: symbol
+    xform:
+      - 340
+      - -2500
+      - R0
+    bbox:
+      - 336
+      - -2504
+      - 648
+      - -2336
+    connections:
+      VDD: VDDCore
+      VSS: VSS
+      in: por
+      out: por_buf
+      outb: porb_buf
+    params:
+      {}
+    is_primitive: false
+  XPOR_DUM:
+    lib_name: bag3_digital
+    cell_name: inv_chain
+    view_name: symbol
+    xform:
+      - 340
+      - -2920
+      - R0
+    bbox:
+      - 336
+      - -2924
+      - 648
+      - -2756
+    connections:
+      VDD: VDDCore
+      VSS: VSS
+      in: VSS
+      out: dump
+      outb: dumn
+    params:
+      {}
+    is_primitive: false
+  XSE_CLK:
+    lib_name: aib_ams
+    cell_name: aib_se2diff_match
+    view_name: symbol
+    xform:
+      - 320
+      - -940
+      - R0
+    bbox:
+      - 316
+      - -984
+      - 564
+      - -796
+    connections:
+      VDD: VDDIO
+      VSS: VSS
+      en: clk_en_vccl
+      enb: clk_enb_vccl
+      inn: iclkn
+      inp: iopad
+      outn: oclkn_vccl
+      outp: oclkp_vccl
+    params:
+      {}
+    is_primitive: false
+  XSE_DATA:
+    lib_name: aib_ams
+    cell_name: aib_se2diff
+    view_name: symbol
+    xform:
+      - 320
+      - -540
+      - R0
+    bbox:
+      - 316
+      - -544
+      - 564
+      - -356
+    connections:
+      VDD: VDDIO
+      VSS: VSS
+      en: data_en_vccl
+      enb: data_enb_vccl
+      in: iopad
+      outn: odatn_vccl
+      outp: odatp_vccl
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 113888
+  instance#:
+    - 0
+    - 12
+  instancesLastChanged:
+    - 4
+    - time_val: 1569962531
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1570050365
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 17
+  schGeometryLastUpdated:
+    - 0
+    - 113888
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 113888
+  _dbvCvTimeStamp:
+    - 0
+    - 113888
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_se2diff.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_se2diff.symbol.yaml
new file mode 100644
index 0000000..e73299f
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_se2diff.symbol.yaml
@@ -0,0 +1,503 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_se2diff
+view_name: symbol
+bbox:
+  - -4
+  - -4
+  - 244
+  - 184
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 116
+          - 176
+          - 124
+          - 184
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 116
+          - -4
+          - 124
+          - 4
+    stype: 2
+    ttype: 2
+  en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 76
+          - 4
+          - 84
+    stype: 0
+    ttype: 0
+  enb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 56
+          - 4
+          - 64
+    stype: 0
+    ttype: 0
+  in:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 96
+          - 4
+          - 104
+    stype: 0
+    ttype: 0
+  outn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 76
+          - 244
+          - 84
+    stype: 0
+    ttype: 1
+  outp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 96
+          - 244
+          - 104
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 80
+        -
+          - 40
+          - 80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 16
+        - 110
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: in
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 100
+        -
+          - 40
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 16
+        - 90
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: en
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 80
+        -
+          - 200
+          - 80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 234
+        - 110
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: outp
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 100
+        -
+          - 200
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 234
+        - 90
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: outn
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 110
+        - 34
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 60
+        -
+          - 40
+          - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 110
+        - 174
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - 0
+        - 240
+        - 180
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 200
+        - 150
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 115
+        - 60
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - 40
+        - 200
+        - 140
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 80
+        -
+          - 80
+          - 80
+        -
+          - 90
+          - 100
+        -
+          - 110
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 90
+        -
+          - 130
+          - 90
+        -
+          - 120
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 90
+        -
+          - 120
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 90
+        -
+          - 110
+          - 90
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 140
+          - 80
+        -
+          - 160
+          - 80
+        -
+          - 170
+          - 100
+        -
+          - 190
+          - 100
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 140
+          - 100
+        -
+          - 160
+          - 100
+        -
+          - 170
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 170
+          - 80
+        -
+          - 190
+          - 80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 16
+        - 70
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: enb
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 140
+        -
+          - 120
+          - 180
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 0
+        -
+          - 120
+          - 40
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1569962447
+  partName:
+    - 3
+    - aib_se2diff
+  pin#:
+    - 0
+    - 7
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("outn" "outp" "VDD" "VSS" "en" "enb" "in")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 344
+  _dbvCvTimeStamp:
+    - 0
+    - 344
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_se2diff.yaml b/src/aib_ams/schematic/netlist_info/aib_se2diff.yaml
new file mode 100644
index 0000000..915d15d
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_se2diff.yaml
@@ -0,0 +1,763 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_se2diff
+view_name: schematic
+bbox:
+  - -411
+  - -500
+  - 458
+  - 70
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -350
+            - 60
+            - R0
+          bbox:
+            - -411
+            - 34
+            - -340
+            - 70
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -375
+            - 60
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -350
+            - 30
+            - R0
+          bbox:
+            - -411
+            - 4
+            - -340
+            - 40
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -375
+            - 30
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -350
+            - -50
+            - R0
+          bbox:
+            - -407
+            - -76
+            - -350
+            - -40
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -380
+            - -50
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  enb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -350
+            - -70
+            - R0
+          bbox:
+            - -407
+            - -96
+            - -350
+            - -60
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -380
+            - -70
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  in:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -350
+            - -30
+            - R0
+          bbox:
+            - -407
+            - -56
+            - -350
+            - -20
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -380
+            - -30
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  outn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -300
+            - -50
+            - R0
+          bbox:
+            - -300
+            - -76
+            - -243
+            - -40
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -275
+            - -50
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  outp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -300
+            - -30
+            - R0
+          bbox:
+            - -300
+            - -56
+            - -243
+            - -20
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -275
+            - -30
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -60
+          - -460
+        -
+          - -60
+          - -420
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -67
+        - -424
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -60
+          - -260
+        -
+          - -60
+          - -220
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -67
+        - -256
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: inb
+      origin:
+        - 100
+        - -333
+      alignment: 5
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: inb
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: en,in
+      width: 10
+      points:
+        -
+          - -200
+          - -340
+        -
+          - -160
+          - -340
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: en,in
+      origin:
+        - -164
+        - -328
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: en,in
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc
+      origin:
+        - 64
+        - -73
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc
+      points:
+        -
+          - 40
+          - -80
+        -
+          - 100
+          - -80
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -67
+        - -164
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -60
+          - -200
+        -
+          - -60
+          - -160
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -67
+        - 4
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -60
+          - 0
+        -
+          - -60
+          - 40
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: enb,VDD
+      origin:
+        - -164
+        - -68
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: enb,VDD
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: enb,VDD
+      width: 10
+      points:
+        -
+          - -200
+          - -80
+        -
+          - -160
+          - -80
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: inb
+      points:
+        -
+          - 60
+          - -340
+        -
+          - 140
+          - -340
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 260
+          - -500
+        -
+          - 260
+          - -460
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 253
+        - -464
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 260
+          - -220
+        -
+          - 260
+          - -180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 253
+        - -216
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: outn
+      points:
+        -
+          - 380
+          - -300
+        -
+          - 420
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: outn
+      origin:
+        - 384
+        - -293
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: outn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: outp
+      points:
+        -
+          - 380
+          - -380
+        -
+          - 420
+          - -380
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: outp
+      origin:
+        - 384
+        - -373
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: outp
+instances:
+  XCORE:
+    lib_name: bag3_digital
+    cell_name: se_to_diff
+    view_name: symbol
+    xform:
+      - 140
+      - -460
+      - R0
+    bbox:
+      - 136
+      - -464
+      - 458
+      - -216
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: inb
+      outn: outp
+      outp: outn
+    params:
+      {}
+    is_primitive: false
+  XDUM:
+    lib_name: bag3_digital
+    cell_name: nor
+    view_name: symbol
+    xform:
+      - -160
+      - -160
+      - R0
+    bbox:
+      - -164
+      - -164
+      - 128
+      - 4
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: enb,VDD
+      out: nc
+    params:
+      {}
+    is_primitive: false
+  XNAND:
+    lib_name: bag3_digital
+    cell_name: nand
+    view_name: symbol
+    xform:
+      - -160
+      - -420
+      - R0
+    bbox:
+      - -164
+      - -424
+      - 138
+      - -256
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: en,in
+      out: inb
+    params:
+      {}
+    is_primitive: false
+  XNC:
+    lib_name: basic
+    cell_name: noConn
+    view_name: symbol
+    xform:
+      - 100
+      - -80
+      - R0
+    bbox:
+      - 90
+      - -130
+      - 110
+      - -76
+    connections:
+      noConn: nc
+    params:
+      {}
+    is_primitive: true
+props:
+  connectivityLastUpdated:
+    - 0
+    - 10718
+  instance#:
+    - 0
+    - 1
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1569964496
+  net#:
+    - 0
+    - 1
+  pin#:
+    - 0
+    - 8
+  schGeometryLastUpdated:
+    - 0
+    - 10718
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 10718
+  _dbvCvTimeStamp:
+    - 0
+    - 10718
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_se2diff_match.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_se2diff_match.symbol.yaml
new file mode 100644
index 0000000..dad2bb8
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_se2diff_match.symbol.yaml
@@ -0,0 +1,571 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_se2diff_match
+view_name: symbol
+bbox:
+  - -4
+  - -44
+  - 244
+  - 144
+terminals:
+  VDD:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 116
+          - 136
+          - 124
+          - 144
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 116
+          - -44
+          - 124
+          - -36
+    stype: 2
+    ttype: 2
+  en:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 36
+          - 4
+          - 44
+    stype: 0
+    ttype: 0
+  enb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 16
+          - 4
+          - 24
+    stype: 0
+    ttype: 0
+  inn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 56
+          - 4
+          - 64
+    stype: 0
+    ttype: 0
+  inp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - 76
+          - 4
+          - 84
+    stype: 0
+    ttype: 0
+  outn:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 56
+          - 244
+          - 64
+    stype: 0
+    ttype: 1
+  outp:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 76
+          - 244
+          - 84
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 80
+        -
+          - 40
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 90
+          - 60
+        -
+          - 110
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 20
+        -
+          - 40
+          - 20
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 80
+        -
+          - 80
+          - 80
+        -
+          - 90
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - -40
+        -
+          - 120
+          - 0
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 140
+        -
+          - 120
+          - 100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 16
+        - 90
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: inp
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 16
+        - 30
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: enb
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - -40
+        - 240
+        - 140
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 210
+        - 110
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 60
+        -
+          - 200
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 40
+        -
+          - 40
+          - 40
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 170
+          - 60
+        -
+          - 190
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 70
+        -
+          - 130
+          - 70
+        -
+          - 120
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 120
+          - 70
+        -
+          - 110
+          - 70
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 140
+          - 60
+        -
+          - 160
+          - 60
+        -
+          - 170
+          - 80
+        -
+          - 190
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 60
+          - 60
+        -
+          - 80
+          - 60
+        -
+          - 90
+          - 80
+        -
+          - 110
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 140
+          - 80
+        -
+          - 160
+          - 80
+        -
+          - 170
+          - 60
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 130
+          - 70
+        -
+          - 120
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 80
+        -
+          - 200
+          - 80
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 60
+        -
+          - 40
+          - 60
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - 0
+        - 200
+        - 100
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 125
+        - 40
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 16
+        - 50
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: en
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 16
+        - 70
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: inn
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 110
+        - 134
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 110
+        - -6
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 234
+        - 70
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: outn
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 234
+        - 90
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: outp
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1569962077
+  partName:
+    - 3
+    - aib_se2diff_match
+  pin#:
+    - 0
+    - 15
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("outn" "outp" "VDD" "VSS" "en" "enb" "inn" "inp")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 551
+  _dbvCvTimeStamp:
+    - 0
+    - 551
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_se2diff_match.yaml b/src/aib_ams/schematic/netlist_info/aib_se2diff_match.yaml
new file mode 100644
index 0000000..2d8de1f
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_se2diff_match.yaml
@@ -0,0 +1,915 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_se2diff_match
+view_name: schematic
+bbox:
+  - -511
+  - -620
+  - 448
+  - -80
+terminals:
+  VDD:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -450
+            - -90
+            - R0
+          bbox:
+            - -511
+            - -116
+            - -440
+            - -80
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -475
+            - -90
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -450
+            - -120
+            - R0
+          bbox:
+            - -511
+            - -146
+            - -440
+            - -110
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -475
+            - -120
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  en:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -450
+            - -240
+            - R0
+          bbox:
+            - -507
+            - -266
+            - -450
+            - -230
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -480
+            - -240
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  enb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -450
+            - -260
+            - R0
+          bbox:
+            - -507
+            - -286
+            - -450
+            - -250
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -480
+            - -260
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  inn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -450
+            - -200
+            - R0
+          bbox:
+            - -507
+            - -226
+            - -450
+            - -190
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -480
+            - -200
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  inp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -450
+            - -180
+            - R0
+          bbox:
+            - -507
+            - -206
+            - -450
+            - -170
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -480
+            - -180
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  outn:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -400
+            - -200
+            - R0
+          bbox:
+            - -400
+            - -226
+            - -343
+            - -190
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -375
+            - -200
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  outp:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -400
+            - -180
+            - R0
+          bbox:
+            - -400
+            - -206
+            - -343
+            - -170
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -375
+            - -180
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -160
+          - -140
+        -
+          - -160
+          - -100
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -167
+        - -136
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -160
+          - -340
+        -
+          - -160
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -167
+        - -304
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nand_out
+      origin:
+        - 64
+        - -213
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nand_out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - -160
+          - -420
+        -
+          - -160
+          - -380
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - -167
+        - -416
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -160
+          - -620
+        -
+          - -160
+          - -580
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -167
+        - -584
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc1
+      points:
+        -
+          - 360
+          - -220
+        -
+          - 400
+          - -220
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: en,inp
+      width: 10
+      points:
+        -
+          - -300
+          - -220
+        -
+          - -260
+          - -220
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: en,inp
+      origin:
+        - -264
+        - -208
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: en,inp
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: enb,inn
+      width: 10
+      points:
+        -
+          - -300
+          - -500
+        -
+          - -260
+          - -500
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: enb,inn
+      origin:
+        - -264
+        - -488
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: enb,inn
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc1
+      origin:
+        - 364
+        - -213
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc1
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 240
+          - -140
+        -
+          - 240
+          - -100
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 233
+        - -136
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 240
+          - -340
+        -
+          - 240
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 233
+        - -304
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nand_out
+      points:
+        -
+          - -40
+          - -220
+        -
+          - 140
+          - -220
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nc2
+      points:
+        -
+          - 340
+          - -500
+        -
+          - 380
+          - -500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nc2
+      origin:
+        - 344
+        - -493
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nc2
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDD
+      points:
+        -
+          - 220
+          - -420
+        -
+          - 220
+          - -380
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDD
+      origin:
+        - 213
+        - -416
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDD
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 220
+          - -620
+        -
+          - 220
+          - -580
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 213
+        - -584
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nor_out
+      points:
+        -
+          - -60
+          - -500
+        -
+          - 120
+          - -500
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nor_out
+      origin:
+        - 116
+        - -493
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nor_out
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: outn
+      points:
+        -
+          - 340
+          - -520
+        -
+          - 380
+          - -520
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: outn
+      origin:
+        - 344
+        - -513
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: outn
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: outp
+      points:
+        -
+          - 360
+          - -240
+        -
+          - 400
+          - -240
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: outp
+      origin:
+        - 364
+        - -233
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: outp
+instances:
+  XBUFN:
+    lib_name: bag3_digital
+    cell_name: inv_chain
+    view_name: symbol
+    xform:
+      - 120
+      - -580
+      - R0
+    bbox:
+      - 116
+      - -584
+      - 428
+      - -416
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: nor_out
+      out: nc2
+      outb: outn
+    params:
+      {}
+    is_primitive: false
+  XBUFP:
+    lib_name: bag3_digital
+    cell_name: inv_chain
+    view_name: symbol
+    xform:
+      - 140
+      - -300
+      - R0
+    bbox:
+      - 136
+      - -304
+      - 448
+      - -136
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in: nand_out
+      out: nc1
+      outb: outp
+    params:
+      {}
+    is_primitive: false
+  XNAND:
+    lib_name: bag3_digital
+    cell_name: nand
+    view_name: symbol
+    xform:
+      - -260
+      - -300
+      - R0
+    bbox:
+      - -264
+      - -304
+      - 38
+      - -136
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: en,inp
+      out: nand_out
+    params:
+      {}
+    is_primitive: false
+  XNOR:
+    lib_name: bag3_digital
+    cell_name: nor
+    view_name: symbol
+    xform:
+      - -260
+      - -580
+      - R0
+    bbox:
+      - -264
+      - -584
+      - 28
+      - -416
+    connections:
+      VDD: VDD
+      VSS: VSS
+      in<1:0>: enb,inn
+      out: nor_out
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 11763
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1570027331
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 8
+  schGeometryLastUpdated:
+    - 0
+    - 11763
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 11763
+  _dbvCvTimeStamp:
+    - 0
+    - 11763
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_txanlg_core.symbol.yaml b/src/aib_ams/schematic/netlist_info/aib_txanlg_core.symbol.yaml
new file mode 100644
index 0000000..bcec14d
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_txanlg_core.symbol.yaml
@@ -0,0 +1,606 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_txanlg_core
+view_name: symbol
+bbox:
+  - -4
+  - -244
+  - 444
+  - 104
+terminals:
+  VDDCore:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 196
+          - 96
+          - 204
+          - 104
+    stype: 1
+    ttype: 2
+  VDDIO:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 236
+          - 96
+          - 244
+          - 104
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 196
+          - -244
+          - 204
+          - -236
+    stype: 2
+    ttype: 2
+  din:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -4
+          - 4
+          - 4
+    stype: 0
+    ttype: 0
+  indrv_buf<1:0>:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -44
+          - 4
+          - -36
+    stype: 0
+    ttype: 0
+  ipdrv_buf<1:0>:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -24
+          - 4
+          - -16
+    stype: 0
+    ttype: 0
+  itx_en_buf:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -64
+          - 4
+          - -56
+    stype: 0
+    ttype: 0
+  por_vccl:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -144
+          - 4
+          - -136
+    stype: 0
+    ttype: 0
+  porb_vccl:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -164
+          - 4
+          - -156
+    stype: 0
+    ttype: 0
+  txpadout:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - 436
+          - -4
+          - 444
+          - 4
+    stype: 0
+    ttype: 1
+  weak_pulldownen:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -84
+          - 4
+          - -76
+    stype: 0
+    ttype: 0
+  weak_pullupenb:
+    obj:
+      - 0
+      - layer: 229
+        purpose: 4294967295
+        net: ""
+        bbox:
+          - -4
+          - -104
+          - 4
+          - -96
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -100
+        -
+          - 40
+          - -100
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -100
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pullupenb
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -80
+        -
+          - 40
+          - -80
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -80
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pulldownen
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -160
+        -
+          - 40
+          - -160
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -60
+        -
+          - 40
+          - -60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -60
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: itx_en_buf
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -20
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ipdrv_buf<1:0>
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -40
+        -
+          - 40
+          - -40
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -20
+        -
+          - 40
+          - -20
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - 0
+        -
+          - 40
+          - 0
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - 0
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 440
+          - 0
+        -
+          - 400
+          - 0
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 394
+        - 0
+      alignment: 7
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 240
+          - 100
+        -
+          - 240
+          - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 240
+        - 54
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 200
+          - 100
+        -
+          - 200
+          - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 200
+        - 54
+      alignment: 1
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 200
+          - -240
+        -
+          - 200
+          - -200
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 200
+        - -194
+      alignment: 7
+      orient: R270
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 0
+    - layer: 236
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 0
+        - -240
+        - 440
+        - 100
+  -
+    - 8
+    - layer: 236
+      purpose: 237
+      net: ""
+      origin:
+        - 400
+        - 70
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@instanceName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 8
+    - layer: 231
+      purpose: 237
+      net: ""
+      origin:
+        - 220
+        - -65
+      alignment: 4
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: "[@partName]"
+      evaluator: cdsNLPEvalText
+  -
+    - 0
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      bbox:
+        - 40
+        - -200
+        - 400
+        - 60
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -160
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -40
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: indrv_buf<1:0>
+  -
+    - 5
+    - layer: 231
+      purpose: 4294967295
+      net: ""
+      points:
+        -
+          - 0
+          - -140
+        -
+          - 40
+          - -140
+  -
+    - 7
+    - layer: 229
+      purpose: 237
+      net: ""
+      origin:
+        - 46
+        - -140
+      alignment: 1
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+instances:
+  {}
+props:
+  instNamePrefix:
+    - 3
+    - X
+  interfaceLastChanged:
+    - 4
+    - time_val: 1569942219
+  partName:
+    - 3
+    - aib_txanlg_core
+  pin#:
+    - 0
+    - 15
+  portOrder:
+    - 5
+    - name: ILList
+      bin_val: ("txpadout" "VDDCore" "VDDIO" "VSS" "din" "indrv_buf<1:0>" "ipdrv_buf<1:0>" "itx_en_buf" "por_vccl" "porb_vccl" "weak_pulldownen" "weak_pullupenb")
+  vendorName:
+    - 3
+    - ""
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 439
+  _dbvCvTimeStamp:
+    - 0
+    - 439
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
diff --git a/src/aib_ams/schematic/netlist_info/aib_txanlg_core.yaml b/src/aib_ams/schematic/netlist_info/aib_txanlg_core.yaml
new file mode 100644
index 0000000..182c308
--- /dev/null
+++ b/src/aib_ams/schematic/netlist_info/aib_txanlg_core.yaml
@@ -0,0 +1,2512 @@
+# SPDX-License-Identifier: Apache-2.0
+# Copyright 2019 Blue Cheetah Analog Design Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+lib_name: aib_ams
+cell_name: aib_txanlg_core
+view_name: schematic
+bbox:
+  - -828
+  - -920
+  - 2152
+  - 810
+terminals:
+  VDDCore:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -670
+            - 770
+            - R0
+          bbox:
+            - -731
+            - 744
+            - -660
+            - 780
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -695
+            - 770
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VDDIO:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -670
+            - 800
+            - R0
+          bbox:
+            - -731
+            - 774
+            - -660
+            - 810
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -695
+            - 800
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 1
+    ttype: 2
+  VSS:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: iopin
+          view_name: symbolr
+          xform:
+            - -670
+            - 740
+            - R0
+          bbox:
+            - -731
+            - 714
+            - -660
+            - 750
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -695
+            - 740
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 2
+    ttype: 2
+  din:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -670
+            - 640
+            - R0
+          bbox:
+            - -727
+            - 614
+            - -670
+            - 650
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -700
+            - 640
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  indrv_buf<1:0>:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -670
+            - 610
+            - R0
+          bbox:
+            - -727
+            - 584
+            - -670
+            - 620
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -700
+            - 610
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  ipdrv_buf<1:0>:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -670
+            - 580
+            - R0
+          bbox:
+            - -727
+            - 554
+            - -670
+            - 590
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -700
+            - 580
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  itx_en_buf:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -670
+            - 550
+            - R0
+          bbox:
+            - -727
+            - 524
+            - -670
+            - 560
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -700
+            - 550
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  por_vccl:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -670
+            - 460
+            - R0
+          bbox:
+            - -727
+            - 434
+            - -670
+            - 470
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -700
+            - 460
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  porb_vccl:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -670
+            - 430
+            - R0
+          bbox:
+            - -727
+            - 404
+            - -670
+            - 440
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -700
+            - 430
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  txpadout:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: opin
+          view_name: symbol
+          xform:
+            - -540
+            - 640
+            - R0
+          bbox:
+            - -540
+            - 614
+            - -483
+            - 650
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -515
+            - 640
+          alignment: 1
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 1
+  weak_pulldownen:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -670
+            - 520
+            - R0
+          bbox:
+            - -727
+            - 494
+            - -670
+            - 530
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -700
+            - 520
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+  weak_pullupenb:
+    obj:
+      - 1
+      - inst:
+          lib_name: basic
+          cell_name: ipin
+          view_name: symbol
+          xform:
+            - -670
+            - 490
+            - R0
+          bbox:
+            - -727
+            - 464
+            - -670
+            - 500
+          connections:
+            {}
+          params:
+            {}
+          is_primitive: true
+        attr:
+          layer: 229
+          purpose: 237
+          net: ""
+          origin:
+            - -700
+            - 490
+          alignment: 7
+          orient: R0
+          font: 5
+          height: 10
+          overbar: false
+          visible: true
+          drafting: true
+          attr_type: 0
+          format: 1
+    stype: 0
+    ttype: 0
+shapes:
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 40
+          - 280
+        -
+          - 40
+          - 320
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 33
+        - 316
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 40
+          - 760
+        -
+          - 40
+          - 800
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 33
+        - 764
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: txpadout
+      points:
+        -
+          - 360
+          - 560
+        -
+          - 400
+          - 560
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: txpadout
+      origin:
+        - 364
+        - 567
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: txpadout
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: din_io
+      points:
+        -
+          - -320
+          - 660
+        -
+          - -280
+          - 660
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: din_io
+      origin:
+        - -284
+        - 667
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din_io
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: nen_drvb_io<1:0>
+      width: 10
+      points:
+        -
+          - -320
+          - 640
+        -
+          - -280
+          - 640
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nen_drvb_io<1:0>
+      origin:
+        - -284
+        - 652
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nen_drvb_io<1:0>
+  -
+    - 6
+    - layer: 228
+      purpose: 4294967295
+      net: pen_drv_io<1:0>
+      width: 10
+      points:
+        -
+          - -320
+          - 620
+        -
+          - -280
+          - 620
+      style: 2
+      begin_ext: 0
+      end_ext: 0
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: pen_drv_io<1:0>
+      origin:
+        - -284
+        - 632
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: pen_drv_io<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: tristate_io
+      points:
+        -
+          - -320
+          - 600
+        -
+          - -280
+          - 600
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: tristate_io
+      origin:
+        - -284
+        - 607
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: tristate_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: tristateb_io
+      points:
+        -
+          - -320
+          - 580
+        -
+          - -280
+          - 580
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: tristateb_io
+      origin:
+        - -284
+        - 587
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: tristateb_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: pden_io
+      points:
+        -
+          - -320
+          - 560
+        -
+          - -280
+          - 560
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: pden_io
+      origin:
+        - -284
+        - 567
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: pden_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: puenb_io
+      points:
+        -
+          - -320
+          - 540
+        -
+          - -280
+          - 540
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: puenb_io
+      origin:
+        - -284
+        - 547
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: puenb_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 960
+          - -340
+        -
+          - 960
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 953
+        - -304
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 600
+          - -190
+        -
+          - 640
+          - -190
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 636
+        - -183
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -280
+          - -190
+        -
+          - -240
+          - -190
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -244
+        - -183
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: tristateb_io
+      points:
+        -
+          - 1260
+          - -40
+        -
+          - 1300
+          - -40
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: tristateb_io
+      origin:
+        - 1264
+        - -33
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: tristateb_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: itx_en_buf
+      points:
+        -
+          - 600
+          - -80
+        -
+          - 640
+          - -80
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: itx_en_buf
+      origin:
+        - 636
+        - -73
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: itx_en_buf
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 920
+          - 140
+        -
+          - 920
+          - 180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 913
+        - 144
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: tristate_io
+      points:
+        -
+          - 1260
+          - -70
+        -
+          - 1300
+          - -70
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: tristate_io
+      origin:
+        - 1264
+        - -63
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: tristate_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 600
+          - -150
+        -
+          - 640
+          - -150
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 636
+        - -143
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 600
+          - -170
+        -
+          - 640
+          - -170
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 636
+        - -163
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 80
+          - -340
+        -
+          - 80
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 73
+        - -304
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 120
+          - 140
+        -
+          - 120
+          - 180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 113
+        - 144
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: dinb_io
+      points:
+        -
+          - 380
+          - -70
+        -
+          - 420
+          - -70
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: dinb_io
+      origin:
+        - 384
+        - -63
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: dinb_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: din_io
+      points:
+        -
+          - 380
+          - -40
+        -
+          - 420
+          - -40
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: din_io
+      origin:
+        - 384
+        - -33
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - -280
+          - -150
+        -
+          - -240
+          - -150
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - -244
+        - -143
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: din
+      points:
+        -
+          - -280
+          - -80
+        -
+          - -240
+          - -80
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: din
+      origin:
+        - -244
+        - -73
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: din
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 40
+          - 140
+        -
+          - 40
+          - 180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 33
+        - 144
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - -280
+          - -170
+        -
+          - -240
+          - -170
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - -244
+        - -163
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 1000
+          - 140
+        -
+          - 1000
+          - 180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 993
+        - 144
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1780
+          - -340
+        -
+          - 1780
+          - -300
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1773
+        - -304
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 1420
+          - -190
+        -
+          - 1460
+          - -190
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 1456
+        - -183
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 1420
+          - -170
+        -
+          - 1460
+          - -170
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 1456
+        - -163
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1420
+          - -150
+        -
+          - 1460
+          - -150
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1456
+        - -143
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: weak_pulldownen
+      points:
+        -
+          - 1420
+          - -80
+        -
+          - 1460
+          - -80
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: weak_pulldownen
+      origin:
+        - 1456
+        - -73
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pulldownen
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: pdenb_io
+      points:
+        -
+          - 2080
+          - -70
+        -
+          - 2120
+          - -70
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: pdenb_io
+      origin:
+        - 2084
+        - -63
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: pdenb_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: pden_io
+      points:
+        -
+          - 2080
+          - -40
+        -
+          - 2120
+          - -40
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: pden_io
+      origin:
+        - 2084
+        - -33
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: pden_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 1740
+          - 140
+        -
+          - 1740
+          - 180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 1733
+        - 144
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 1820
+          - 140
+        -
+          - 1820
+          - 180
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 1813
+        - 144
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1780
+          - -920
+        -
+          - 1780
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1773
+        - -884
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 1420
+          - -770
+        -
+          - 1460
+          - -770
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 1456
+        - -763
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 1420
+          - -750
+        -
+          - 1460
+          - -750
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 1456
+        - -743
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 1420
+          - -730
+        -
+          - 1460
+          - -730
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 1456
+        - -723
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: weak_pullupenb
+      points:
+        -
+          - 1420
+          - -660
+        -
+          - 1460
+          - -660
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: weak_pullupenb
+      origin:
+        - 1456
+        - -653
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: weak_pullupenb
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: puen_io
+      points:
+        -
+          - 2080
+          - -650
+        -
+          - 2120
+          - -650
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: puen_io
+      origin:
+        - 2084
+        - -643
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: puen_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: puenb_io
+      points:
+        -
+          - 2080
+          - -620
+        -
+          - 2120
+          - -620
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: puenb_io
+      origin:
+        - 2084
+        - -613
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: puenb_io
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 1740
+          - -440
+        -
+          - 1740
+          - -400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 1733
+        - -436
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 1820
+          - -440
+        -
+          - 1820
+          - -400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 1813
+        - -436
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 960
+          - -920
+        -
+          - 960
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 953
+        - -884
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 600
+          - -770
+        -
+          - 640
+          - -770
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 636
+        - -763
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nen_drv_io<1:0>
+      points:
+        -
+          - 1260
+          - -620
+        -
+          - 1300
+          - -620
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nen_drv_io<1:0>
+      origin:
+        - 1264
+        - -613
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nen_drv_io<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: indrv_buf<1:0>
+      points:
+        -
+          - 600
+          - -660
+        -
+          - 640
+          - -660
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: indrv_buf<1:0>
+      origin:
+        - 636
+        - -653
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: indrv_buf<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 920
+          - -440
+        -
+          - 920
+          - -400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 913
+        - -436
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: nen_drvb_io<1:0>
+      points:
+        -
+          - 1260
+          - -650
+        -
+          - 1300
+          - -650
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: nen_drvb_io<1:0>
+      origin:
+        - 1264
+        - -643
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: nen_drvb_io<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - 600
+          - -730
+        -
+          - 640
+          - -730
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - 636
+        - -723
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - 600
+          - -750
+        -
+          - 640
+          - -750
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - 636
+        - -743
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 1000
+          - -440
+        -
+          - 1000
+          - -400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 993
+        - -436
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - 80
+          - -920
+        -
+          - 80
+          - -880
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - 73
+        - -884
+      alignment: 8
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VSS
+      points:
+        -
+          - -280
+          - -770
+        -
+          - -240
+          - -770
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VSS
+      origin:
+        - -244
+        - -763
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VSS
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: porb_vccl
+      points:
+        -
+          - -280
+          - -750
+        -
+          - -240
+          - -750
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: porb_vccl
+      origin:
+        - -244
+        - -743
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: porb_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: por_vccl
+      points:
+        -
+          - -280
+          - -730
+        -
+          - -240
+          - -730
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: por_vccl
+      origin:
+        - -244
+        - -723
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: por_vccl
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: ipdrv_buf<1:0>
+      points:
+        -
+          - -280
+          - -660
+        -
+          - -240
+          - -660
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: ipdrv_buf<1:0>
+      origin:
+        - -244
+        - -653
+      alignment: 8
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: ipdrv_buf<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: pen_drvb_io<1:0>
+      points:
+        -
+          - 380
+          - -650
+        -
+          - 420
+          - -650
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: pen_drvb_io<1:0>
+      origin:
+        - 384
+        - -643
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: pen_drvb_io<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: pen_drv_io<1:0>
+      points:
+        -
+          - 380
+          - -620
+        -
+          - 420
+          - -620
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: pen_drv_io<1:0>
+      origin:
+        - 384
+        - -613
+      alignment: 2
+      orient: R0
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: pen_drv_io<1:0>
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDCore
+      points:
+        -
+          - 40
+          - -440
+        -
+          - 40
+          - -400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDCore
+      origin:
+        - 33
+        - -436
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDCore
+  -
+    - 5
+    - layer: 228
+      purpose: 4294967295
+      net: VDDIO
+      points:
+        -
+          - 120
+          - -440
+        -
+          - 120
+          - -400
+  -
+    - 7
+    - layer: 228
+      purpose: 237
+      net: VDDIO
+      origin:
+        - 113
+        - -436
+      alignment: 2
+      orient: R90
+      font: 5
+      height: 10
+      overbar: false
+      visible: true
+      drafting: true
+      text: VDDIO
+instances:
+  XDRV:
+    lib_name: aib_ams
+    cell_name: aib_driver_output_driver
+    view_name: symbol
+    xform:
+      - -280
+      - 320
+      - R0
+    bbox:
+      - -284
+      - 316
+      - 364
+      - 764
+    connections:
+      VDD: VDDIO
+      VSS: VSS
+      din: din_io
+      n_enb_drv<1:0>: nen_drvb_io<1:0>
+      p_en_drv<1:0>: pen_drv_io<1:0>
+      tristate: tristate_io
+      tristateb: tristateb_io
+      txpadout: txpadout
+      weak_pden: pden_io
+      weak_puenb: puenb_io
+    params:
+      {}
+    is_primitive: false
+  XLV_DIN:
+    lib_name: bag3_digital
+    cell_name: lvshift
+    view_name: symbol
+    xform:
+      - -240
+      - -300
+      - R0
+    bbox:
+      - -244
+      - -304
+      - 384
+      - 144
+    connections:
+      VDD: VDDIO
+      VDD_in: VDDCore
+      VSS: VSS
+      in: din
+      out: din_io
+      outb: dinb_io
+      rst_casc: porb_vccl
+      rst_out: por_vccl
+      rst_outb: VSS
+    params:
+      {}
+    is_primitive: false
+  XLV_ITX_EN:
+    lib_name: bag3_digital
+    cell_name: lvshift
+    view_name: symbol
+    xform:
+      - 640
+      - -300
+      - R0
+    bbox:
+      - 636
+      - -304
+      - 1264
+      - 144
+    connections:
+      VDD: VDDIO
+      VDD_in: VDDCore
+      VSS: VSS
+      in: itx_en_buf
+      out: tristateb_io
+      outb: tristate_io
+      rst_casc: porb_vccl
+      rst_out: por_vccl
+      rst_outb: VSS
+    params:
+      {}
+    is_primitive: false
+  XLV_NDRV<1:0>:
+    lib_name: bag3_digital
+    cell_name: lvshift
+    view_name: symbol
+    xform:
+      - 640
+      - -880
+      - R0
+    bbox:
+      - 636
+      - -884
+      - 1264
+      - -436
+    connections:
+      VDD: <*2>VDDIO
+      VDD_in: <*2>VDDCore
+      VSS: <*2>VSS
+      in: indrv_buf<1:0>
+      out: nen_drv_io<1:0>
+      outb: nen_drvb_io<1:0>
+      rst_casc: <*2>porb_vccl
+      rst_out: <*2>por_vccl
+      rst_outb: <*2>VSS
+    params:
+      {}
+    is_primitive: false
+  XLV_PD:
+    lib_name: bag3_digital
+    cell_name: lvshift
+    view_name: symbol
+    xform:
+      - 1460
+      - -300
+      - R0
+    bbox:
+      - 1456
+      - -304
+      - 2084
+      - 144
+    connections:
+      VDD: VDDIO
+      VDD_in: VDDCore
+      VSS: VSS
+      in: weak_pulldownen
+      out: pden_io
+      outb: pdenb_io
+      rst_casc: porb_vccl
+      rst_out: VSS
+      rst_outb: por_vccl
+    params:
+      {}
+    is_primitive: false
+  XLV_PDRV<1:0>:
+    lib_name: bag3_digital
+    cell_name: lvshift
+    view_name: symbol
+    xform:
+      - -240
+      - -880
+      - R0
+    bbox:
+      - -244
+      - -884
+      - 384
+      - -436
+    connections:
+      VDD: <*2>VDDIO
+      VDD_in: <*2>VDDCore
+      VSS: <*2>VSS
+      in: ipdrv_buf<1:0>
+      out: pen_drv_io<1:0>
+      outb: pen_drvb_io<1:0>
+      rst_casc: <*2>porb_vccl
+      rst_out: <*2>por_vccl
+      rst_outb: <*2>VSS
+    params:
+      {}
+    is_primitive: false
+  XLV_PU:
+    lib_name: bag3_digital
+    cell_name: lvshift
+    view_name: symbol
+    xform:
+      - 1460
+      - -880
+      - R0
+    bbox:
+      - 1456
+      - -884
+      - 2084
+      - -436
+    connections:
+      VDD: VDDIO
+      VDD_in: VDDCore
+      VSS: VSS
+      in: weak_pullupenb
+      out: puenb_io
+      outb: puen_io
+      rst_casc: porb_vccl
+      rst_out: VSS
+      rst_outb: por_vccl
+    params:
+      {}
+    is_primitive: false
+props:
+  connectivityLastUpdated:
+    - 0
+    - 66632
+  lastSchematicExtraction:
+    - 4
+    - time_val: 1569942246
+  net#:
+    - 0
+    - 0
+  pin#:
+    - 0
+    - 15
+  schGeometryLastUpdated:
+    - 0
+    - 66632
+  schGeometryVersion:
+    - 3
+    - sch.ds.gm.1.4
+  schXtrVersion:
+    - 3
+    - sch.10.0
+app_defs:
+  _dbLastSavedCounter:
+    - 0
+    - 66632
+  _dbvCvTimeStamp:
+    - 0
+    - 66632
+  cdbRevision:
+    - 0
+    - 227612
+  cdnSPDesignMajorVersion:
+    - 0
+    - 2
